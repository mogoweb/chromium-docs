<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/chromium-os","deleted":false,"title":"Chromium OS","dir":"ltr"},{"path":"/chromium-os/packages","deleted":false,"title":"packages","dir":"ltr"},{"path":"/chromium-os/packages/crash-reporting","deleted":false,"title":"Crash Reporting (Chrome OS System)","dir":"ltr"},{"path":"/chromium-os/packages/crash-reporting/faq","deleted":false,"title":"Crash Reporting FAQ","dir":"ltr"}];
  var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttp://sites.google.com/a/chromium.org/dev/chromium-os/packages/crash-reporting/faq\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"http://csi.gstatic.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["http://www.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["http://www.gstatic.com/sites/p/56e332/system/js/codemirror.js","http://www.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","http://www.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","http://www.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","http://www.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/chromium-os/packages/crash-reporting","parentWuid":"wuid:gx:758606dbdf7d4562","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Crash Reporting FAQ","locale":"en","wuid":"wuid:gx:42089b56ab3efd43","revision":23,"path":"/chromium-os/packages/crash-reporting/faq","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"faq","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Crash Reporting FAQ - The Chromium Projects" />
<meta itemprop="name" content="Crash Reporting FAQ - The Chromium Projects" />
<meta property="og:title" content="Crash Reporting FAQ - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Crash Reporting FAQ - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="http://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="http://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:571d8fbd499df20e" class="sites-navigation-link">Sitemap</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/chromium-os" dir="ltr">Chromium OS</A>‎ &gt; ‎<A href="/chromium-os/packages" dir="ltr">packages</A>‎ &gt; ‎<A href="/chromium-os/packages/crash-reporting" dir="ltr">Crash Reporting (Chrome OS System)</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Crash Reporting FAQ</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div class="sites-embed-align-left-wrapping-off"><div class="sites-embed-border-off sites-embed sites-embed-full-width" style="width:100%;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-6"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-General-Questions"><strong>1 </strong>General Questions</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-How-can-I-get-the-stack-trace-from-a-crash-on-my-development-Chromebook-"><strong>1.1 </strong>How can I get the stack trace from a crash on my development Chromebook?</a></li><li class="goog-toc"><a href="#TOC-How-can-I-get-a-core-dump-from-a-minidump-for-use-by-gdb-"><strong>1.2 </strong>How can I get a core dump from a minidump for use by gdb?</a></li><li class="goog-toc"><a href="#TOC-Is-there-a-design-document-for-Chrome-OS-Crash-Reporting-"><strong>1.3 </strong>Is there a design document for Chrome OS Crash Reporting?</a></li><li class="goog-toc"><a href="#TOC-What-s-the-difference-between-Aw-Snap-and-He-s-Dead-Jim-"><strong>1.4 </strong>What's the difference between "Aw, Snap!" and "He's Dead, Jim!"?</a></li></ol></li><li class="goog-toc"><a href="#TOC-Crash-Reporter"><strong>2 </strong>Crash Reporter</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Will-a-developer-s-build-image-upload-crash-reports-"><strong>2.1 </strong>Will a developer's build image upload crash reports?</a></li><li class="goog-toc"><a href="#TOC-How-can-I-know-if-my-Chromebook-will-report-crashes-"><strong>2.2 </strong>How can I know if my Chromebook will report crashes?</a></li><li class="goog-toc"><a href="#TOC-Why-aren-t-crashes-being-reported-for-Chrome-"><strong>2.3 </strong>Why aren't crashes being reported for Chrome?</a></li><li class="goog-toc"><a href="#TOC-Are-there-limits-on-how-many-crashes-will-be-reported-"><strong>2.4 </strong>Are there limits on how many crashes will be reported?</a></li><li class="goog-toc"><a href="#TOC-Where-can-I-find-the-crash-minidump-core-file-for-a-crashed-process-on-my-Chromebook-"><strong>2.5 </strong>Where can I find the crash minidump/core file for a crashed process on my Chromebook?</a></li><li class="goog-toc"><a href="#TOC-Why-are-my-crash-dumps-disappearing-sometimes-"><strong>2.6 </strong>Why are my crash dumps disappearing sometimes?</a></li><li class="goog-toc"><a href="#TOC-At-what-point-can-the-crash-reporter-catch-crashes-"><strong>2.7 </strong>At what point can the crash reporter catch crashes?</a></li><li class="goog-toc"><a href="#TOC-Something-crashed-during-startup-but-I-don-t-see-it-in-var-spool-crash-or-crash-"><strong>2.8 </strong>Something crashed during startup, but I don't see it in /var/spool/crash/ or ~/crash/?</a></li><li class="goog-toc"><a href="#TOC-Do-we-report-out-of-memory-OOM-crashes-"><strong>2.9 </strong>Do we report out-of-memory (OOM) crashes?</a></li></ol></li><li class="goog-toc"><a href="#TOC-Core-File-Questions"><strong>3 </strong>Core File Questions</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Does-crash_reporter-save-the-core-file-for-a-crash-"><strong>3.1 </strong>Does crash_reporter save the core file for a crash?</a></li><li class="goog-toc"><a href="#TOC-How-can-I-get-the-core-file-for-a-crash-"><strong>3.2 </strong>How can I get the core file for a crash?</a></li><li class="goog-toc"><a href="#TOC-Why-would-Chrome-crashes-not-generate-a-core-file-on-dev-builds-"><strong>3.3 </strong>Why would Chrome crashes not generate a core file on dev builds?</a></li></ol></li><li class="goog-toc"><a href="#TOC-Build-Questions"><strong>4 </strong>Build Questions</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Should-we-be-building-with--g--ggdb-or--ggdb2-"><strong>4.1 </strong>Should we be building with "-g", "-ggdb", or "-ggdb2"?</a></li></ol></li><li class="goog-toc"><a href="#TOC-Technical-Details"><strong>5 </strong>Technical Details</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Can-my-program-catch-SIGSEGV-without-screwing-up-crash_reporter-"><strong>5.1 </strong>Can my program catch SIGSEGV without screwing up crash_reporter?</a></li><li class="goog-toc"><a href="#TOC-For-Chrome-what-general-functions-are-used-for-reporting-crashes-"><strong>5.2 </strong>For Chrome what general functions are used for reporting crashes?</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Chrome-Browser-Crashes"><strong>5.2.1 </strong>Chrome Browser Crashes</a></li><li class="goog-toc"><a href="#TOC-Chrome-Renderer-Crashes"><strong>5.2.2 </strong>Chrome Renderer Crashes</a></li></ol></li></ol></li><li class="goog-toc"><a href="#TOC-About-the-Team"><strong>6 </strong>About the Team</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Where-should-I-file-Crash-Reporting-bug-reports-feature-requests-"><strong>6.1 </strong>Where should I file Crash Reporting bug reports/feature requests?</a></li><li class="goog-toc"><a href="#TOC-Who-is-responsible-for-this-FAQ-"><strong>6.2 </strong>Who is responsible for this FAQ?</a></li><li class="goog-toc"><a href="#TOC-Who-are-the-authors-of-this-FAQ-"><strong>6.3 </strong>Who are the authors of this FAQ?</a></li></ol></li></ol></div></div></div></div>
<hr />
<h2><a name="TOC-General-Questions"></a>General Questions</h2>
<h3><a name="TOC-How-can-I-get-the-stack-trace-from-a-crash-on-my-development-Chromebook-"></a>How can I get the stack trace from a crash on my development Chromebook?</h3>
<p>Crash reporter will still collect crashes, they just won't be sent to the Crash Server.  Beyond that, the crash reporter is no longer involved, but you can get more info from <a href="https://sites.google.com/a/google.com/chromeos/resources/engineering/getting-a-stack-dump-from-a-minidump-file">Getting a stack dump from a minidump file</a>.</p>
<h3><a name="TOC-How-can-I-get-a-core-dump-from-a-minidump-for-use-by-gdb-"></a>How can I get a core dump from a minidump for use by gdb?</h3>
<p>There's a <code>minidump-2-core</code> executable provided by Breakpad to convert a minidump to a core file.  You can build it in a Chrome checkout, or you can build it in a Chrome OS checkout with <code><font color="#9900ff">sudo emerge google-breakpad</font></code>.  Googlers: You can also check <code>/home/mkrebs/public/crash_reporting/minidump-2-core/</code> for some pre-built binaries that might work for you.</p>
<p>Once you have <code>minidump-2-core</code>, you can look at section <a href="http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/crash-reporting/debugging-a-minidump#TOC-Use-gdb-to-show-a-backtrace">Use gdb to show a backtrace</a> of the <a href="http://www.chromium.org/chromium-os/packages/crash-reporting/debugging-a-minidump">Debugging a Minidump File</a> guide.  This is my collection of instructions for how I've made use of <code>gdb</code> given a minidump file.  It shows, for example, how to adjust the symbol addresses in <code>gdb</code> so they match up appropriately, and it includes instructions for how to do this for ARM minidumps as well.</p>
<p>Googlers: You can also look through the section <a href="https://sites.google.com/a/google.com/chrome-msk/dev#TOC-Crash-dump-analysis">Crash dump analysis</a>, which is where I found the address-adjusting logic.</p>
<h3><a name="TOC-Is-there-a-design-document-for-Chrome-OS-Crash-Reporting-"></a>Is there a design document for Chrome OS Crash Reporting?</h3>
<p>Yes.  The public copy is <a href="http://www.chromium.org/chromium-os/packages/crash-reporting/ChromeOSCrashReporting.pdf?attredirects=0">here</a> and the <a href="https://docs.google.com/a/google.com/document/d/1TE1ZXqIzYz-fkbT8xeaRWN7KqxfUnQI3ET014YiRBXs/edit?authkey=CMf2--cG">Google Drive is here</a>.  For a general overview, though:</p>
<p>Crash reporting for <b>Chrome</b> is done by linking in Breakpad.  When a Chrome crash occurs, the Breakpad library code linked into it takes care of generating a report.  For <b>non-Chrome</b> processes we use an external program, <code>crash_reporter</code>, that gets called by the kernel when a crash occurs.  It gets passed the crashing process's core file, and takes care of generating the report.  <code>crash_reporter</code> also generates a report for kernel crashes, unclean shutdowns, and several other things.</p>
<p>The crash reports generated by Chrome are uploaded by Chrome itself.  The crash reports generated by <code>crash_reporter</code> are uploaded by <code>crash_sender</code>, which is run via a cron job every hour.</p>
<p>We also report crash metrics (UMA) for Chrome OS.  The crash metrics for <b>Chrome</b> are reported and uploaded by Chrome itself.  The crash metrics for <b>non-Chrome</b> processes are reported by <code>crash_reporter</code> <i>via</i> Chrome, which then uploads them.  <code>crash_reporter</code> sends a metric for each crash, saying whether it's a user crash, kernel crash, or unclean shutdown.</p>
<p>There are currently two different, but redundant, types of metrics being reported by <code>crash_reporter</code>:</p>
<ul><li>The old type uses the "Logging.CrashCounter" histogram with buckets for "user", "kernel", and "unclean shutdown" counts.</li>
<li>The new type has Chrome report them in its own stability metrics (see <a href="http://crosbug.com/11192">http://crosbug.com/11192</a> for more info).</li></ul>
<h3><a name="TOC-What-s-the-difference-between-Aw-Snap-and-He-s-Dead-Jim-"></a>What's the difference between "Aw, Snap!" and "He's Dead, Jim!"?</h3>
<p>These are error pages shown by Chrome when a tab's process in some way dies.  According to the Chrome Help pages, "You may see the "Aw, Snap!" message if a webpage's process crashes unexpectedly."  On the other hand, "You may see the “He’s Dead, Jim!” message if the operating system has terminated the tab’s process due to a lack of memory.  Alternatively, if you terminated the process using Google Chrome's Task Manager, the system's task manager, or with a command line tool, this message will appear as well."</p>
<p>That is, an "Aw, Snap" is most likely caused by a genuine crash of the non-browser process (e.g. renderer, plugin), and should result in a crash report if consent is enabled (see FAQ entry <a href="https://sites.google.com/a/google.com/chromeos/resources/engineering/crash-reporting-faq#TOC-How-can-I-know-if-my-Chromebook-will-report-crashes-">How can I know if my Chromebook will report crashes</a>).  The "He's Dead, Jim" is shown if a webpage's process is terminated by somebody or something else.</p>
<p>Reference ("Aw, Snap!"): <a href="http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=95669">http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=95669</a><br />
Reference ("He's Dead, Jim!"): <a href="http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1270364">http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1270364</a><br />
Reference: <a href="http://crosbug.com/37545">http://crosbug.com/37545</a></p>
<hr />
<h2><a name="TOC-Crash-Reporter"></a>Crash Reporter</h2>
<h3><a name="TOC-Will-a-developer-s-build-image-upload-crash-reports-"></a>Will a developer's build image upload crash reports?</h3>
<p>No.  A crash will still be processed by <code>crash_reporter</code>, but the report will not be uploaded to the Crash Server.  More specifically, <code>crash_sender</code> will only send crash reports if the word "Official" appears in the "CHROMEOS_RELEASE_DESCRIPTION" line of <code>/etc/lsb-release</code>.</p>
<p>Googlers: You can override this behavior by setting the environment variable <b>$FORCE_OFFICIAL</b> to 1 and then run <code>crash_sender</code> manually.  This may be helpful for certain testing scenarios.  By default, <code>crash_sender</code> will delay up to ten minutes before sending each crash report, so you will probably also want to set the variable <b>$SECONDS_SEND_SPREAD</b> to 1 to make them upload right away.  For example: <code><font color="#990000">sudo FORCE_OFFICIAL=1 SECONDS_SEND_SPREAD=1 crash_sender</font></code>.</p>
<h3><a name="TOC-How-can-I-know-if-my-Chromebook-will-report-crashes-"></a>How can I know if my Chromebook will report crashes?</h3>
<p>You can check the consent settings.  Go to <b>Settings -&gt; Advanced Settings</b> and then see if "Automatically send usage statistics and crash reports to Google" is enabled under the <b>Privacy</b> section.  If there is no such setting shown, then you are running a developer's build image (see FAQ entry <a href="#TOC-Will-a-developer-s-build-image-upload-crash-reports-">Will a developer's build image upload crash reports</a>).</p>
<h3><a name="TOC-Why-aren-t-crashes-being-reported-for-Chrome-"></a>Why aren't crashes being reported for Chrome?</h3>
<p>First, check to make sure that consent has been enabled (see FAQ entry <a href="#TOC-How-can-I-know-if-my-Chromebook-will-report-crashes-">How can I know if my Chromebook will report crashes</a>).  If no such setting is shown, read on.</p>
<p>If you don't see any reference at all to crash reporting in <code>/var/log/ui/ui.LATEST</code> after a crash, chances are you're running a developer image.  Developer images are built with Chromium.  Chrome handles its own crashes by linking in Breakpad, whereas Chromium does not link in Breakpad.  Therefore, when a Chromium crash occurs, it is simply ignored.</p>
<p>If you want to see these crash reports, you can either have crash_reporter report Chromium crashes, or build Chrome instead of Chromium. For the former, see instructions related to <code style="font-size:10pt;background-color:transparent">collect_chrome_crashes</code><span style="font-size:10pt;background-color:transparent">, below. For the latter, use the "--internal" flag to cros chrome-sdk, as explained in the instructions for </span><a href="http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/building-chromium-browser" style="font-size:10pt;background-color:transparent">building Chrome on Chrome OS</a><span style="font-size:10pt;background-color:transparent">.</span></p><p><span style="font-size:10pt;background-color:transparent">Bear in mind that crash_reporter won't upload crash reports by default for developer images.  See FAQ entry </span><a href="#TOC-Will-a-developer-s-build-image-upload-crash-reports-" style="font-size:10pt;background-color:transparent">Will a developer's build image upload crash reports</a><span style="font-size:10pt;background-color:transparent"> for more information.</span></p>
<h3><a name="TOC-Are-there-limits-on-how-many-crashes-will-be-reported-"></a>Are there limits on how many crashes will be reported?</h3>
Short answer: yes (Chrome OS crashes) and no (Chrome crashes).
<p>For Chrome OS crashes, <code>crash_reporter</code> will stop creating crash reports if there are 32 of them already on disk.  There's a separate limit per collection directory, so <code>/var/spool/crash</code> and <code>/home/chronos/user/crash</code> can each contain up to 32 crash reports.  That limit is defined in <b>crash-reporter/crash_collector.cc</b>'s variable <b>CrashCollector::kMaxCrashDirectorySize</b>.  With respect to uploading crash reports, <code>crash_sender</code> will not send more than 32 per day.  More specifically, if 32 crash reports have been sent within the past 24 hours, it will delay and try sending the crash report later.  That limit is defined in <b>crash--reporter/crash_sender</b>'s variable <b>$MAX_CRASH_RATE</b>.</p>
<p>Chrome uses its own crash-reporting mechanism, and it has no limits.  Its crash reports are only temporarily on disk (they are deleted immediately after uploading), so the number-on-disk is not much of an issue; however, it is technically possible for <b>browser</b> crash reports to stay around in <code>/var/log/chrome/Crash Reports/</code> (e.g. if the machine happens to crash before the removal is done).  I'm not aware of any cleanup that's done for these lingering files.  If consent is enabled for uploading crash reports, Chrome will upload a report as soon the crash occurs regardless of how many have already been sent (although there's no long-term retry upon failure).</p>
<p>Reference: <a href="http://crosbug.com/17094#c10">http://crosbug.com/17094#c10</a></p>
<h3><a name="TOC-Where-can-I-find-the-crash-minidump-core-file-for-a-crashed-process-on-my-Chromebook-"></a>Where can I find the crash minidump/core file for a crashed process on my Chromebook?</h3>
<p>For processes run as user "chronos", <code>crash_reporter</code> puts its files (*.dmp, *.meta, and *.core) in <code>/home/chronos/user/crash/</code>.  For other processes, <code>crash_reporter</code> puts them in <code>/var/spool/crash/</code>.  If you are running a developer image (i.e. the <code>/root/.leave_core</code> file exists), <code>crash_reporter</code> will not delete the core file.  Note that Chrome handles its own crashes, and so <code>crash_reporter</code> will normally ignore them (see FAQ entry <a href="#TOC-Why-would-Chrome-crashes-not-generate-a-core-file-on-dev-builds-">Why would chrome crashes not generate a core file on dev builds</a> to change that).</p>
<p>The way Chrome handles its own crashes does not result in a core file.  It will normally generate a minidump file, upload it (if consent is enabled), and then delete it immediately.   It will generate the minidump (*.dmp) in <code>/tmp/</code> for non-<b>browser</b> crashes, and in <code>/var/log/chrome/Crash Reports/</code> for <b>browser</b> crashes.  TIP: I've used this fact in the past to get an almost complete copy of the minidump by having a "while [ 1 ]" shell loop copy off <code>/tmp/*.dmp</code> to somewhere else during a crash.</p>
<p>If Chrome is in "headless" mode, it will generate both kinds of minidumps in <code>/var/log/chrome/Crash Reports/</code>, and neither upload nor delete them.  NOTE: Instead of <code>/var/log/chrome/Crash Reports/</code>, Chrome used to put its minidumps in (and still does for non-Chrome OS machines) <code>$HOME/.config/google-chrome/Crash Reports/</code>, but that was changed due to <a href="http://crosbug.com/25089">http://crosbug.com/25089</a>.</p>
<h3><a name="TOC-Why-are-my-crash-dumps-disappearing-sometimes-"></a>Why are my crash dumps disappearing sometimes?</h3>
<p>The <code>crash_sender</code> process runs every hour.  In most cases when it runs, it will delete your existing crash dumps -- after uploading the report if that is enabled.  The exception to them being deleted is if <code>crash_sender</code> is uploading crash reports and it reaches a limit, in which case it will hold off for another hour.  You can prevent the <code>crash_sender</code> from running by touch'ing the <code>/var/lib/crash_sender_paused</code> file.</p>
<h3><a name="TOC-At-what-point-can-the-crash-reporter-catch-crashes-"></a>At what point can the crash reporter catch crashes?</h3>
<p>TBD</p>
<h3><a name="TOC-Something-crashed-during-startup-but-I-don-t-see-it-in-var-spool-crash-or-crash-"></a>Something crashed during startup, but I don't see it in /var/spool/crash/ or ~/crash/?</h3>
<p>In order for the crash reporter to be called to process a crash, the line in <code>/proc/sys/kernel/core_pattern</code> must start with "|/sbin/crash_reporter".  Unless otherwise set, it defaults to just "core".  The <code>crash_reporter</code> program sets the kernel's core pattern when it is first run by Upstart.  This is currently done at the same time as "system-services" services (see <code>src/platform/init/crash-reporter.conf</code>).</p>
<p>Reference: <a href="http://crosbug.com/16800">http://crosbug.com/16800</a></p>
<h3><a name="TOC-Do-we-report-out-of-memory-OOM-crashes-"></a>Do we report out-of-memory (OOM) crashes?</h3>
<p>No.  When a system is running out of memory, the kernel will invoke its OOM killer to kill some process with the hopes that it will free up enough memory.  On Chrome OS the killed process should always be one of Chrome's, because we make all others unkillable.  Search for "init on ChromeOS" in <a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling">Out of memory handling</a> to see which processes should be killed first.</p>
<p>When the OOM killer runs, you should see a message like the following in the system's log:</p>
<div class="sites-codeblock sites-codesnippet-block"><code><font color="#000000">&lt;4&gt;[ 2461.625535] chrome invoked oom-killer: gfp_mask=0x200da, order=0, oom_adj=0, oom_score_adj=0</font></code></div>
<p>..followed by a bunch of current memory information and then:</p>
<div class="sites-codeblock sites-codesnippet-block">
<code><font color="#000000">&lt;3&gt;[ 2461.638097] Out of memory: Kill process 9250 (chrome) score 648 or sacrifice child<br />
&lt;3&gt;[ 2461.638107] Killed process 9250 (chrome) total-vm:197184kB, anon-rss:14464kB, file-rss:13184kB</font></code></div>
<p>Unfortunately, we don't have a good way to report these OOM killings.  When the kernel kills a process with the oom-killer, it effectively does so with the SIGKILL signal.  Because of this, the Breakpad signal handler does not get invoked (which is how Chrome reports its crashes), nor does <code>crash_reporter</code> get called by the kernel.</p>
<p>There's been talk about handling this within Chrome by having a soft memory limit.  See <a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling">Out of memory handling</a> for the design doc.  Otherwise, I imagine we could modify the kernel to do something smarter than a SIGKILL.  A simpler solution would be to have something monitor the system logs, and simply report the OOM killing (at least with an UMA metric).</p>
<hr />
<h2><a name="TOC-Core-File-Questions"></a>Core File Questions</h2>
<h3><a name="TOC-Does-crash_reporter-save-the-core-file-for-a-crash-"></a>Does crash_reporter save the core file for a crash?</h3>
<p>Yes, but only for developer images.  When a crash occurs, the kernel sends the core file to <code>crash_reporter</code>.  The core file is saved to disk by <code>crash_reporter</code> and then converted to a minidump.  If the <code>/root/.leave_core</code> file exists (i.e. it's a developer image), the core file will be left on disk.  See FAQ entry <a href="#TOC-Where-can-I-find-the-crash-minidump-core-file-for-a-crashed-process-on-my-Chromebook-">Where can I find the crash dump/core file for a crashed process on my Chromebook</a> for where to find the core file.  Note that by default Chrome crashes are not handled by <code>crash_reporter</code> (see FAQ entry <a href="#TOC-Why-would-Chrome-crashes-not-generate-a-core-file-on-dev-builds-">Why would chrome crashes not generate a core file on dev builds</a>).</p>
<h3><a name="TOC-How-can-I-get-the-core-file-for-a-crash-"></a>How can I get the core file for a crash?</h3>
<p>For non-Chrome crashes when running a developer image, see FAQ entry <a href="#TOC-Does-crash_reporter-save-the-core-file-for-a-crash-">Does crash_reporter save the core file for a crash</a>.  For Chrome crashes on a developer image, see FAQ entry <a href="#TOC-Why-would-Chrome-crashes-not-generate-a-core-file-on-dev-builds-">Why would chrome crashes not generate a core file on dev builds</a>.</p>
<p>If you're not running a developer image, the easiest way to get core files is probably to touch the <code>/mnt/stateful_partition/etc/enable_chromium_coredumps</code> file and reboot.  This will disable <code>crash_reporter</code> and core files will be saved into <code>/var/coredumps/</code>.  NOTE: There's a race condition with the checking of this flag file and the initialization of <code>crash_reporter</code> -- meaning that the setting of <code>core_pattern</code> might be undone if <code>crash_reporter</code> happens to start after the UI is started (see <a href="http://crosbug.com/35170">http://crosbug.com/35170</a>).</p>
<p>If you don't want to reboot, for whatever reason, you can manually change the setting such that the kernel creates a core file instead of piping it to <code>crash_reporter</code>.  First, set the core file pattern (make sure the core's path is writable by the would-be crashing process):</p>
<blockquote style="margin:0 0 0 40px;border:none;padding:0px">
<div><code><font color="#990000">sudo sh -c 'echo "/home/chronos/core.%e.%p" &gt; /proc/sys/kernel/core_pattern'</font></code></div>
</blockquote>
<p>Then, modify the maximum size of core files created for the process(es) you care about:</p>
<blockquote style="margin:0 0 0 40px;border:none;padding:0px">
<div><code><font color="#990000">prlimit --core=unlimited --pid &lt;pid&gt;</font></code></div>
</blockquote>
<h3><a name="TOC-Why-would-Chrome-crashes-not-generate-a-core-file-on-dev-builds-"></a>Why would Chrome crashes not generate a core file on dev builds?</h3>
<p>By default, all but Chrome crashes are handled by <code>crash_reporter</code>.  Chrome handles its own crashes by linking in Breakpad, which does not generate core files.  In order to have <code>crash_reporter</code> not ignore Chrome crashes, though, you can touch the <code>/mnt/stateful_partition/etc/collect_chrome_crashes</code> file.  This file is normally used by the autotests in order for Chrome crashes to still be handled.  See also FAQ entry <a href="#TOC-Does-crash_reporter-save-the-core-file-for-a-crash-">Does crash_reporter save the core file for a crash</a>.</p>
<p>Reference: <a href="http://crosbug.com/17987">http://crosbug.com/17987</a></p>
<hr />
<h2><a name="TOC-Build-Questions"></a>Build Questions</h2>
<h3><a name="TOC-Should-we-be-building-with--g--ggdb-or--ggdb2-"></a>Should we be building with "-g", "-ggdb", or "-ggdb2"?</h3>
<p>Use "-g".  We used to build with "-ggdb" just to be more explicit about what <code>cros_generate_breakpad_symbols</code> expects; however, WebKit currently relies on it being "-g" if we want to remove its debug symbols.  davidjames@ did the work to figure out that "-g" and "-ggdb" are the same for the GNU compiler we're currently using, so he could switch Chrome to building with "-g".  To be consistent, we might as well build everything with "-g".  As of 11/10/2011 no other packages had been modified to use the new option yet, but this is the direction we'd like to go in.</p>
<p>Reference: <a href="https://gerrit.chromium.org/gerrit/11462">https://gerrit.chromium.org/gerrit/11462</a></p>
<hr />
<h2><a name="TOC-Technical-Details"></a>Technical Details</h2>
<h3><a name="TOC-Can-my-program-catch-SIGSEGV-without-screwing-up-crash_reporter-"></a>Can my program catch SIGSEGV without screwing up crash_reporter?</h3>
<p><i>Note: This discussion focuses on SIGSEGV, but it applies to all signals that the kernel creates coredumps for (e.g. SIGQUIT, SIGILL, SIGABRT, etc...).</i></p><p>Yes.  Normally, if you don't catch SIGSEGV, the kernel will default to spawning <code>crash_reporter</code> for the crash.  If you catch SIGSEGV, then what happens depends on how the segfault was sent and how you handle it.  If the signal was sent to your process by someone (e.g. using the <code>kill</code> command) then, after your signal handler runs, your program will continue where it left off.  If the segfault was caused by something like an actual bad memory access (e.g. "*(char *)0x0 = 1") then, after your signal handler runs, the signal could simply be sent again (assuming your signal handler didn't change the runtime environment so as to "fix" the source of the segfault).  Chances are you don't want to just return normally from your signal handler, though; in the second scenario you could easily end up with an infinite loop.</p>
<p>If you want to <b>bypass</b> <code>crash_reporter</code>, you should be able to just call <code>_exit()</code> from your handler (normally you want <code>_exit()</code> rather than <code>exit()</code> as the latter will run <code>atexit()</code> hooks which could themselves could cause problems in a signal handler context).  In both scenarios that will bypass the kernel's handling of the SIGSEGV.  However, if you <b>want</b> <code>crash_reporter</code> to still run after your handler finishes, you have to do two different things in order to handle both scenarios.  For the case where your program caused a segfault, you'll want to set the SIGSEGV handler back to what it was before -- so that when the signal is sent again it's handled as if you had no handler.  In C this is done with <code>signal(SIGSEGV, SIG_DFL)</code>.  For the case where your program was explicitly sent a signal by someone else, you'll have to re-send the signal to yourself.  You should be able to do this by just calling <code>kill()</code> directly within your handler.  Note that this should work without changing the SIGSEGV handler back because the signal will still have been masked until your handler returns (i.e. that's done in case your handler were to segfault).  You can determine which scenario you're in by checking the <code>si_pid</code> field of the <code>siginfo_t</code> struct your handler is sent.</p>
<p>An example of how to catch SIGSEGV without screwing up <code>crash_reporter</code> can be found in Google Breakpad's <a href="http://code.google.com/p/google-breakpad/source/browse/trunk/src/client/linux/handler/exception_handler.cc?spec=svn1020&amp;r=1018#223">src/breakpad/src/client/linux/handler/exception_handler.cc</a>:</p>
<div class="sites-codeblock sites-codesnippet-block">
<code>void ExceptionHandler::SignalHandler(int sig, siginfo_t* info, void* uc) {<br />
  /* PUT YOUR HANDLER CODE HERE */<br />
<br />
  if (info-&gt;si_pid) {<br />
    // This signal was triggered by somebody sending us the signal with kill().<br />
    // In order to retrigger it, we have to queue a new signal by calling<br />
    // kill() ourselves.<br />
    if (tgkill(getpid(), syscall(__NR_gettid), sig) &lt; 0) {<br />
      // If we failed to kill ourselves (e.g. because a sandbox disallows us<br />
      // to do so), we instead resort to terminating our process. This will<br />
      // result in an incorrect exit code.<br />
      _exit(1);<br />
    }<br />
  } else {<br />
    // This was a synchronous signal triggered by a hard fault (e.g. SIGSEGV).<br />
    // No need to reissue the signal. It will automatically trigger again,<br />
    // when we return from the signal handler.<br />
  }<br />
 <br />
  // As soon as we return from the signal handler, our signal will become<br />
  // unmasked. At that time, we will  get terminated with the same signal that<br />
  // was triggered originally. This allows our parent to know that we crashed.<br />
  // The default action for all the signals which we catch is Core, so<br />
  // this is the end of us.<br />
  signal(sig, SIG_DFL);<br />
}</code></div>
<p>In fact, if you link in Breakpad you can just use its handler -- which will call any callbacks you specify.  This is how Chrome handles its crashes (see <a href="http://code.google.com/searchframe#OAMlx_jo-ck/src/chrome/app/breakpad_linux.cc&amp;type=cs&amp;l=407">EnableCrashDumping() in src/chrome/app/breakpad_linux.cc</a> for an example).</p>
<p>Reference: <a href="http://www.linuxquestions.org/questions/programming-9/sigsegv-handler-segmentation-fauld-handler-277790/">http://www.linuxquestions.org/questions/programming-9/sigsegv-handler-segmentation-fauld-handler-277790/</a><br />
Reference: <a href="http://www.openqnx.com/phpbbforum/viewtopic.php?t=6835">http://www.openqnx.com/phpbbforum/viewtopic.php?t=6835</a><br />
Reference: <a href="http://www.alexonlinux.com/how-to-handle-sigsegv-but-also-generate-core-dump">http://www.alexonlinux.com/how-to-handle-sigsegv-but-also-generate-core-dump</a><br />
Reference: <a href="http://www.justskins.com/forums/how-to-ignore-sigsegv-104217.html#post337119">http://www.justskins.com/forums/how-to-ignore-sigsegv-104217.html#post337119</a></p>
<h3><a name="TOC-For-Chrome-what-general-functions-are-used-for-reporting-crashes-"></a>For Chrome what general functions are used for reporting crashes?</h3>
<p>Here is an ordered list of notable files &amp; functions in the Chromium source tree that are used by Chrome to report crashes on Chrome OS.  Although most of this probably applies to the Linux platform as well, I wrote these notes with Chrome OS in mind.</p>
<p><b>chrome/browser/chrome_browser_main_linux.cc: IsCrashReportingEnabled()</b><br />
Determines whether or not crash reporting should be done in Chrome.</p>
<h4><a name="TOC-Chrome-Browser-Crashes"></a><i>Chrome Browser Crashes</i></h4>
<p><b>chrome/app/breakpad_linux.cc: EnableCrashDumping()</b><br />
Enables crash reporting for the browser.  Determines the path for a browser crash's minidump.</p>
<p><b>breakpad/src/client/linux/handler/exception_handler.cc: ExceptionHandler::HandleSignal()</b><br />
Handles the crash signals in the browser.  Calls GenerateDump() to dump the crash.</p>
<p><b>breakpad/src/client/linux/handler/exception_handler.cc: ExceptionHandler::GenerateDump()</b><br />
Creates a new process with clone() -- which calls Breakpad's WriteMinidump() to do the dumping of the browser process.</p>
<p><b>breakpad/src/client/linux/minidump_writer/minidump_writer.cc: WriteMinidump()</b><br />
Attaches to and dumps the browser process to a minidump file.</p>
<p><b>chrome/app/breakpad_linux.cc: HandleCrashDump()</b><br />
Reads the minidump file, adds additional MIME information, and either uploads it or writes it out to file.</p>
<h4><a name="TOC-Chrome-Renderer-Crashes"></a><i>Chrome Renderer Crashes</i></h4>
<p><b>content/browser/child_process_launcher.cc: LaunchInternal()</b><br />
Seems to do the launching for renderers (e.g. sets kCrashDumpSignal).</p>
<p><b>chrome/app/breakpad_linux.cc: EnableNonBrowserCrashDumping()</b><br />
Enables crash reporting for a renderer.</p>
<p><b>breakpad/src/client/linux/handler/exception_handler.cc: ExceptionHandler::HandleSignal()</b><br />
Handles the crash signals in a renderer.  Calls the renderer crash handler; it does not call GenerateDump() to do its own crash dumping.</p>
<p><b>chrome/app/breakpad_linux.cc: NonBrowserCrashHandler()</b><br />
Called by a renderer process to handle its own crash.  Writes to the browser’s pipe with basic context info about the crash.</p>
<p><b>chrome/browser/crash_handler_host_linux.cc: CrashHandlerHostLinux::OnFileCanReadWithoutBlocking()</b><br />
Called by the browser process when a renderer crashes.  Reads the basic crash info from the renderer's pipe.</p>
<p><b>chrome/browser/crash_handler_host_linux.cc: CrashHandlerHostLinux::WriteDumpFile()</b><br />
Called by the browser process.  Determines the path for a renderer crash's minidump.  Calls Breakpad's WriteMinidump() to do the dumping.</p>
<p><b>breakpad/src/client/linux/minidump_writer/minidump_writer.cc: WriteMinidump()</b><br />
Attaches to and dumps a renderer process to a minidump file.</p>
<p><b>chrome/app/breakpad_linux.cc: HandleCrashDump()</b><br />
Reads the minidump file, adds additional MIME information, and either uploads it or writes it out to file.</p>
<hr />
<h2><a name="TOC-About-the-Team"></a>About the Team</h2>
<h3><a name="TOC-Where-should-I-file-Crash-Reporting-bug-reports-feature-requests-"></a>Where should I file Crash Reporting bug reports/feature requests?</h3>
<p>Use the chromium-os issue tracker: <a href="http://crosbug.com/new">http://crosbug.com/new</a>.  File it under area "Area-Logging".</p>
<h3><a name="TOC-Who-is-responsible-for-this-FAQ-"></a>Who is responsible for this FAQ?</h3>
<p>The Crash Reporting team.  If you find any issues with the questions/answers, or there's a question you feel would be beneficial to have answered here, feel free to <a href="http://crosbug.com/new">create an issue</a> under area "Area-Logging" with type "Type-Documentation".</p>
<h3><a name="TOC-Who-are-the-authors-of-this-FAQ-"></a>Who are the authors of this FAQ?</h3>
<p>This FAQ is maintained by the Crash Reporting team.  The original author was Michael Krebs (mkrebs@).  It started as part of a general Chrome OS reference guide, but was later split into this FAQ, a <a href="https://sites.google.com/a/google.com/mkrebs/references/crash-reporting">Crash Reporting Reference Guide</a>, a <a href="https://sites.google.com/a/google.com/mkrebs/references/google-breakpad">Google Breakpad Reference Guide</a>, and another <a href="https://sites.google.com/a/google.com/mkrebs/references/chrome-os">Chrome OS Reference Guide</a>.
</p></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/chromium.org/dev/chromium-os/packages/crash-reporting/faq">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq9HPnoGyiG3wT9WkAq7qM-31LHmm9FbIpLIlb-W_BOJ62EFLja20q9QnHjyj1pZHuqgwADCyMRSdPbMjp8biAvQAjh-xvUuvMlcAiigqQMblvocktC/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
