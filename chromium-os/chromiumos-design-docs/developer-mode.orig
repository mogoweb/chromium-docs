<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/chromium-os","deleted":false,"title":"Chromium OS","dir":"ltr"},{"path":"/chromium-os/chromiumos-design-docs","deleted":false,"title":"Design Documents","dir":"ltr"},{"path":"/chromium-os/chromiumos-design-docs/developer-mode","deleted":false,"title":"Developer Mode","dir":"ltr"}];
  var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttps://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-docs/developer-mode\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"https://gg.google.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["https://ssl.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["https://ssl.gstatic.com/sites/p/56e332/system/js/codemirror.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","https://ssl.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/chromium-os/chromiumos-design-docs","parentWuid":"wuid:gx:2eb69dd73ece341e","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Developer Mode","locale":"en","wuid":"wuid:gx:b74b4e116c3383d","revision":12,"path":"/chromium-os/chromiumos-design-docs/developer-mode","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"developer-mode","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Developer Mode - The Chromium Projects" />
<meta itemprop="name" content="Developer Mode - The Chromium Projects" />
<meta property="og:title" content="Developer Mode - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="https://ssl.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Developer Mode - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="https://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="https://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/chromium-os" dir="ltr">Chromium OS</A>‎ &gt; ‎<A href="/chromium-os/chromiumos-design-docs" dir="ltr">Design Documents</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Developer Mode</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div class="sites-embed-align-right-wrapping-on"><div class="sites-embed-border-off sites-embed" style="width:250px;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-6"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Introduction"><strong>1 </strong>Introduction</a></li><li class="goog-toc"><a href="#_Toc248215923_8803129820153117"><strong>2 </strong>Vulnerabilities</a><ol class="goog-toc"><li class="goog-toc"><a href="#_Toc248215924_0121430046856403_7588140722364187"><strong>2.1 </strong>Attacker with complete physical access</a></li><li class="goog-toc"><a href="#_Toc248215925_125048759393394_"><strong>2.2 </strong>Attacker with casual physical access</a></li><li class="goog-toc"><a href="#Attacker_with_no_physical_acce_11411279905587435"><strong>2.3 </strong>Attacker with no physical access</a></li><li class="goog-toc"><a href="#Developer_borrows_a_device_454_7139797462150455"><strong>2.4 </strong>Developer borrows a device</a></li><li class="goog-toc"><a href="#_Toc248215929_4665314937010407_37114893924444914"><strong>2.5 </strong>Other vulnerabilities</a></li></ol></li><li class="goog-toc"><a href="#Use_cases_to_allow_43935584556"><strong>3 </strong>Use cases to allow</a><ol class="goog-toc"><li class="goog-toc"><a href="#_Toc248215931_5656016152352095"><strong>3.1 </strong>Normal user</a></li><li class="goog-toc"><a href="#_Toc248215932_8072109296917915"><strong>3.2 </strong>Developer</a></li><li class="goog-toc"><a href="#_Toc248215933_7666546516120434"><strong>3.3 </strong>User installs prebuilt OS distribution (other than Google Chrome OS)</a></li><li class="goog-toc"><a href="#Manufacturer_8761296030133963__32800763566046953"><strong>3.4 </strong>Manufacturer</a></li></ol></li><li class="goog-toc"><a href="#_Toc248215934_3490785825997591"><strong>4 </strong>Implementation</a><ol class="goog-toc"><li class="goog-toc"><a href="#Developer_switch_2767844246700"><strong>4.1 </strong>Developer switch</a></li><li class="goog-toc"><a href="#TOC-Mode-transition-wipe"><strong>4.2 </strong>Mode transition wipe</a></li><li class="goog-toc"><a href="#_Toc248215935_5567605430260301"><strong>4.3 </strong>Recovery button always triggers recovery mode</a></li><li class="goog-toc"><a href="#Unsigned_kernel_always_trigger"><strong>4.4 </strong>Boot errors always trigger recovery mode</a></li><li class="goog-toc"><a href="#_Toc248215937_7895837649703026"><strong>4.5 </strong>Recovery boot image</a></li><li class="goog-toc"><a href="#_Toc248215938_3369763251394033_7636734712868929"><strong>4.6 </strong>Boot time warning screen</a></li><li class="goog-toc"><a href="#Manufacturer_hardware_modifica_025306428782641888"><strong>4.7 </strong>Manufacturer hardware modifications </a></li></ol></li><li class="goog-toc"><a href="#_Toc248215940_6743441168218851"><strong>5 </strong>How this design addresses vulnerabilities and use cases</a><ol class="goog-toc"><li class="goog-toc"><a href="#_Toc248215941_4736762922257185"><strong>5.1 </strong>Attacker with complete physical access</a></li><li class="goog-toc"><a href="#_Toc248215942_7427392201498151"><strong>5.2 </strong>Attacker with casual physical access</a></li><li class="goog-toc"><a href="#_Toc248215943_1916042426601052_08223548997193575"><strong>5.3 </strong>Attacker with no physical access</a></li><li class="goog-toc"><a href="#Developer_borrows_a_device_672"><strong>5.4 </strong>Developer borrows a device</a></li><li class="goog-toc"><a href="#_Toc248215946_3512580990791321"><strong>5.5 </strong>Normal user</a></li><li class="goog-toc"><a href="#_Toc248215948_1449832087382674_9122296990826726"><strong>5.6 </strong>Developer</a></li><li class="goog-toc"><a href="#_Toc248215949_6924706334248185"><strong>5.7 </strong>User installs prebuilt OS distribution (other than Google Chrome OS)</a></li><li class="goog-toc"><a href="#Manufacturer_4568967502564192__8691104557365179"><strong>5.8 </strong>Manufacturer</a></li></ol></li><li class="goog-toc"><a href="#TOC-Revision-History"><strong>6 </strong>Revision History</a></li></ol></div></div></div></div>
<h1><a name="TOC-Introduction"></a>Introduction</h1>
<p>Google Chrome OS devices must be:</p>
<ul><li>Secure - users must be protected from attackers. This protection should reasonably extend to inexperienced or naive users.</li>
<li>Open - developers must be able to install their own builds of a Chromium-based OS, or another operating system (e.g., Ubuntu). Developers should not be significantly impaired from using the full capabilities of the device.</li></ul>
<p>These two requirements are somewhat at odds. Locking down a device to protect users makes it less useful for developers. Openings for developers to run modified software easily can also be exploited by attackers. </p>
<p>This document describes:</p>
<ul><li>Vulnerabilities to which Google Chrome OS devices may be exposed.</li>
<li>Use cases we must allow for normal users and developers.</li>
<li>A proposed implementation of developer mode that provides both openness for developers and security for users.</li>
<li>How the implementation protects from vulnerabilities while allowing required use cases.</li></ul>
<p>
Note that this document is specifically about the developer mode in Google Chrome OS devices, not about other Chromium OS-based devices. It's focused on developers who want to install a different operating system on a device that initially shipped with Google Chrome OS. </p>
<h1><a name="_Toc248215923_8803129820153117"></a>Vulnerabilities</h1>
<p>The following vulnerabilities have been considered in this design.</p>
<h2><a name="_Toc248215924_0121430046856403_7588140722364187"></a>Attacker with complete physical access</h2>
<p>An attacker with physical possession of the device over an extended period. The attacker has access to tools including a soldering iron.</p>
<p>The attacker can remove the EEPROM containing our read-only firmware and replace it with compromised firmware which does not perform signature checks. Alternately, the attacker could simply replace the embedded controller's EEPROM with code implementing a keylogger.</p>
<p>Based on YouTube videos of speed disassembly and assembly of computers and consumer electronics devices, we believe that a practical attack could be mounted in as little as 5 minutes.</p>
<p>This attack is unlikely to be made against a large number of devices.</p>
<p>Subcases:</p>
<ul><li>Evil maid: The attacker modifies a targeted user's netbook so that it captures passwords, etc. The attack can be reversed by the attacker given a second possession of the device, leaving no evidence of the attack.</li>
<li>Malicious return: The attacker modifies a device then returns it to a store. It could act as a keylogger, phoning home at a later date with credentials of the next purchaser.</li>
<li>Device swap: The attacker purchases the same model of netbook as the targeted user. When the targeted user is distracted, a replacement netbook is swapped for the user's netbook.</li></ul>
<p>We cannot prevent this attack.</p>
<h2><a name="_Toc248215925_125048759393394_"></a>Attacker with casual physical access</h2>
<p>An attacker with short-term access to a device—for example, a netbook briefly left unattended at a conference or coffee shop.</p>
<p>The attacker may be able to insert a USB key and reboot the device, but cannot make extensive physical modifications. The attacker may be able to unscrew a panel and flip a switch. </p>
<p>Subcases:</p>
<ul><li>The attacker attempts to quickly install malicious software on a temporarily-unattended machine.</li>
<li>The attacker walks down a row of machines at a trade show or store, installing malicious software on them (password sniffer, keylogger, etc).</li>
<li>A store employee attempts to install malicious software on a large number of computers for sale.</li></ul>
<p>We should protect against this attack by making it as costly as the physical attack, in terms of time required and noticeability to passers-by.</p>
<h2><a name="Attacker_with_no_physical_acce_11411279905587435"></a>Attacker with no physical access</h2>
<p>An attacker with no physical access attempts to alter the device to persistently run modified software. This is the most dangerous attack, due to its ability to affect a large number of devices.</p>
<p>We must prevent this attack. That is, it should not be possible to persistently control a device without first having physical access to it.</p>
<h2><a name="Developer_borrows_a_device_454_7139797462150455"></a>Developer borrows a device</h2>
<p>A developer buys or borrows a device, installs their own software, then returns the device without reinstalling Google Chrome OS.</p>
<p>The custom software installed is unlikely to be intentionally malicious. The primary risk is that developer images may not autoupdate, so the software on the device will not be patched to close vulnerabilities. This risk has manifested recently in smartphones with user-modified ('jailbroken') operating systems. </p>
<p>Subcases:</p>
<ul><li>Return to store: The store may boot the device to make sure it's not broken, but will not generally open the case to check for hardware modification or switch state. The next user buys the device and starts using it. The first time the user boots the device, they're likely to be right in front of it, so will notice (but may not understand) a warning screen.</li>
<li>Return to user: It may take several boots for the user to actually be present at the device during boot, but it's very likely the user eventually sees a warning screen.</li></ul>
<p>We should protect against these cases.</p>
<h2><a name="_Toc248215929_4665314937010407_37114893924444914"></a>Other vulnerabilities</h2>
<p>There are other potential data and device vulnerabilities, including:</p>
<ul><li>Data corruption caused by cosmic rays, aborted auto-updates, defective drives, etc.</li>
<li>Theft of a device.</li></ul>
<p>These are outside the scope of this document since they do not relate to developer mode.</p>
<h1><a name="Use_cases_to_allow_43935584556"></a>Use cases to allow</h1>
<p>The following use cases have been considered in this design.</p>
<h2><a name="_Toc248215931_5656016152352095"></a>Normal user</h2>
<p>A normal user generally runs only Google Chrome OS on their device. They are not generally interested in running any other operating system on the device. </p>
<p>When faced with recovery mode, many users are likely to return the device to the store or call tech support.</p>
<p>The most naive users may not understand the significance of warning screens.  We should not be asking the user to make uninformed or cryptic decisions.</p>
<p>We must allow this use case.</p>
<h2><a name="_Toc248215932_8072109296917915"></a>Developer</h2>
<p>A developer builds Chromium OS or their own OS and wants to install it on a device.</p>
<p>The developer has access to developer tools, the target device, and any documentation which came with the device. They are experienced enough to use a screwdriver to open a panel, but most  will not be willing to use a soldering iron to modify the device or void their warranty.</p>
<p>The developer expects similar performance while using their own OS as they have while using Google Chrome OS. That is, boot time and the boot process should not be significantly impaired from a normal device.</p>
<p>It is acceptable for the initial install of a developer OS to be slow, as long as it is not painfully slow. Subsequent installs should be fast, so that a developer can do rapid development.</p>
<p>The developer should be able to go back easily to running Google Chrome OS, at which point they should have access to automatic updates. This case also covers responsible developers who buy or borrow a device, try it out with their own OS, then run recovery mode to restore the device before returning it.</p>
<p>Subcases:</p>
<ul><li>Chromium OS developer: They will use the device in a manner similar to Google Chrome OS, perhaps with some added capability (shell access, etc). This is a common and valuable developer use case; these developers contribute back to the Chromium OS project.</li>
<li>Interactive developer: The developer uses the device like a normal laptop.</li>
<li>Remote developer: The developer uses the device as a media server, set-top box, or some other use case where they do not have direct access to the keyboard and primary display. </li></ul>
<p>We must allow these use cases. If we don't, it is likely developers will hack holes in verified boot to enable them.</p>
<h2><a name="_Toc248215933_7666546516120434"></a>User installs prebuilt OS distribution (other than Google Chrome OS)</h2>
<p>This is much the same as the developer use case. The difference is that the user did not build the install. This is probably more common than developer installs, particularly for use cases such as media servers or set-top boxes.</p>
<p>We should allow this use case.</p>
<h2><a name="Manufacturer_8761296030133963__32800763566046953"></a>Manufacturer</h2>
<p>Normally, read-only firmware is fixed, and rewritable firmware is signed by Google. This introduces additional signing steps and delay into board bringup and development.</p>
<p>A vendor involved in manufacturing a device (OEM, ODM, BIOS vendor, component vendor) must be able to develop and debug firmware, including the normally-read-only parts. For example, the vendor must be able to fix bugs in recovery mode.</p>
<p>The vendor is capable of disassembling a device and making hardware modifications involving soldering</p>
<p>It is acceptable for modifying a device to disable write protection to be slow, as long as it is not painfully slow. Subsequent installs should be fast, so that the vendor can do rapid development.</p>
<p>It is not necessary for the modifications to be reversible easily. For example, removing the modifications can require re-disassembling the device and re-soldering components.</p>
<p>We must allow this use case, to reduce the time and cost of producing devices for Google Chrome OS.</p>
<h1><a name="_Toc248215934_3490785825997591"></a>Implementation</h1>
<p>The following sections describe the implementation we will use. This design supports developers while protecting normal users, and requires no changes to the typical device manufacturing process.</p>
<h2><a name="Developer_switch_2767844246700"></a><font size="4">Developer switch</font></h2>
<p>The device will have an on/off developer switch which is not easily accessible by a normal user.</p>
<p>The switch is reversible (that is, it can be turned back off once turned on). It is turned off by default. It must be turned on physically; there must be no way to turn this switch on without physically manipulating the device.</p>
<p>Approved implementations for this switch:</p>
<ul><li>A switch underneath a screw cover.</li>
<li>A switch underneath/behind the battery, such that the battery must be removed to access the switch.</li><li></li><li>Pressing Control+D at the recovery screen, where the device uses the approved keyboard recovery mechanism [1].</li><li>Pressing Control+D at the recovery screen followed by pressing the recovery button, where devices have a physical recovery button.</li></ul>
<p>Other implementations must be approved by Google in advance.</p>
<p>When the developer switch is off, only code signed by Google will run on the device. Any other code will cause the device to reboot into recovery mode. This protects against remote attack.</p><p>Note 1: The approved keyboard recovery mechanism contains a Google-designed circuit that provides assurance that the executing firmware is the read-only version, and that the user is physically present.</p><h2><a name="TOC-Mode-transition-wipe"></a>Mode transition wipe</h2><p>On the transition between dev and normal modes, there will be a 5 minute delay during which the OS will wipe the stateful partition of the device.  The delay and wipe occur on the first boot after the dev switch is enabled.</p><p>The goal of this delay is to increase the difficulty of drive-by attacks to the same level as physically compromising the device. (We could optionally play an audio track—perhaps something along the lines of "Help, help, I'm being repressed!"—or require user interaction during this delay, to make it more noticeable if an attacker is attempting to compromise a device in a public place.)</p><p>Note that the delay protects both normal users and developers; an attacker trying to change the image on a developer's machine (for example, at a Linux conference, where Chromium OS machines are likely to be common) will still incur the delay. </p>
<h2><a name="_Toc248215935_5567605430260301"></a>Recovery button always triggers recovery mode</h2>
<p>The device will have a mechanism through which it always boots in <a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/firmware-boot-and-recovery" title="recovery mode">recovery mode</a>, regardless of the position of the developer mode switch. This provides a path for users and developers to get back to Google Chrome OS, with all its safety and autoupdates. <br />
</p><p>Approved implementations for the recovery button are:</p><ul><li><span style="background-color:transparent;font-size:10pt">Physical recovery button that must be held down on boot.</span></li><li><span style="background-color:transparent;font-size:10pt">Google approved keyboard controlled recovery circuitry, whereby a user can hold three keys to get to recovery.</span></li></ul>
<h2><a name="Unsigned_kernel_always_trigger"></a>Boot errors always trigger recovery mode</h2>
<p>The firmware always checks the kernel signature at boot time. If the signature is invalid, then the firmware checks the backup kernel. If both kernels are invalid, the firmware runs recovery mode.</p><p>Google will provide a utility for developers to sign their kernels based on a self-generated certificate.</p><p>Developer kernel signatures are not tied to a single target device; that would prevent users from installing prebuilt OS distributions. In developer mode, the cryptographic signature is cannot verified since the user’s public key is not contained in the firmware; only the signing structure and checksums are used to “validate” a self-signed kernel.</p>
<h2><a name="_Toc248215937_7895837649703026"></a>Recovery boot image</h2>
<p>The recovery boot image is Google-signed software on a removable drive. The recovery boot image is what copies new firmware and software from the removable drive to the fixed drive when booted in <a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/firmware-boot-and-recovery" title="recovery mode">recovery mode</a>. Recovery mode firmware will load only Google-signed software from the removable drive. <span style="background-color:transparent">Those kernels contain their own initramfs, which copies the recovery image onto the fixed drive.</span></p>
<p>If the developer switch is off, the recovery boot image will refuse to copy anything but Google-signed software to the device. This protects against drive-by attacks; the attacker must have time to get to the developer switch. This also protects normal users from a remote attacker who stores a malicious payload on the user's SD card and then attempts to reboot into recovery mode to install that payload.</p>
<p>If the developer switch is on, the behavior of the recovery image depends on the keys used to sign the current firmware/kernel/image and the new firmware/kernel/image to be installed.</p>
<ul><li>If the new key is Google-generated, there is no delay. This is a user trying to get back to Google Chrome OS.</li>
<li>If the new key matches the current key, there is no delay. This is a developer updating their own system.</li>
<li></li><li>If the new key is not Google-signed, and is different than the current key, there is a 5-minute delay before copying the payload to the fixed disk.</li></ul>
<p>
During the delay, the recovery image will display the developer agreement and instructions on how to reinstall Google Chrome OS if you decide you don't like the image you're installing. The goal of this delay is to increase the difficulty of drive-by attacks to the same level as physically compromising the device. (We could optionally play an audio track—perhaps something along the lines of "Help, help, I'm being repressed!"—or require user interaction during this delay, to make it more noticeable if an attacker is attempting to compromise a device in a public place.)</p>
<p>
Note that the delay protects both normal users and developers; an attacker trying to change the image on a developer's machine (for example, at a Linux conference, where Chromium OS machines are likely to be common) will still incur the delay. </p>
<h2><a name="_Toc248215938_3369763251394033_7636734712868929"></a>Boot time warning screen</h2>
<p>When the device boots normally in developer mode (that is, not in recovery mode), it displays a warning so that ordinary users won't accidentally end up in the wrong operating system. </p>
<p>At boot time, if the developer switch is on and the kernel is signed, but not by Google, then a warning screen will be displayed by the firmware. The UI varies slightly with the device, but may show a message something like this:</p>
<p align="center"><b>WARNING!<br />
YOUR COMPUTER IS NOT RUNNING GOOGLE CHROME OS!<br />
PRESS THE SPACE BAR TO FIX THIS.</b></p>
<p>This screen is intended to be a little scary; for example, it should use colors and symbols designed to indicate danger / badness. It must support i18n. </p><p>If the user follows the on-screen instructions, the device will either revert to normal mode or reboot into recovery mode. The on-screen instructions typically involve pressing SPACE or RETURN, since these are the most common keys users press when trying to get past a screen without reading it.</p><p>Upon seeing this screen, non-developer users will either return to normal mode, run recovery mode, call tech support, or give up and return the device. Any of these outcomes protects the user's data.</p>
<p>If the user presses Control+D, the device will bypass the warning screen waiting period and continue booting the developer-signed code. Note that there is no indication on the warning screen that Control+D is a valid option, so naive users won't be tempted to press it. The Control+D sequence will be documented on the Chromium OS developer website (you're reading it now), where it is easy for developers to discover. We use the Control modifier so that accidentally bumping the keyboard will not trigger it. For interactive developers, this reduces the pain threshold of the warning screen to a single keypress.</p>
<p>If the user presses a key other than Control+D, space bar, Enter, or Esc, no action is taken.  This reduces the annoyance level for developers; accidentally pressing D+Control or Control+S does not reboot into recovery mode.</p>
<p>After 20 seconds of displaying the warning screen, the device should beep. This will alert a nearby user to look at the screen and see the warning. Interactive developers are likely to press Control+D before this time, so will not be forced to endure the beep.</p>
<p>If the user waits 30 seconds, the device will continue booting the developer-signed code. This is necessary to support the remote developer subcase above. It does mean that a naïve user could keep ignoring this screen. This is a reasonable tradeoff, given that requiring a keypress invites developers to hack verified boot.</p><p>In addition, there are bios flags that can be set to enable a user to trigger other interactions, including but not limited to:</p><ul><li><span style="background-color:transparent;font-size:10pt">dev_boot_usb - this enables a device to boot from USB when a user presses the Control+U keys at the boot time warning screen.</span></li><li><span style="background-color:transparent;font-size:10pt">dev_boot_legacy - this enables a device to boot from SeaBIOS when a user presses the Control+L keys at the boot time warning screen.</span></li></ul><h2><a name="_Toc248215939_2786365570500493"></a></h2>
<h2><a name="Manufacturer_hardware_modifica_025306428782641888"></a>Manufacturer hardware modifications </h2>
<p>The device can be modified to disable the write protection on the firmware. This modification should involve partial device disassembly and soldering, and will void the device warranty. Disassembling the device far enough to make this modification should require destroying a tamper-resistant seal, so that it's obvious the device has been disassembled.</p>
<p>Once this modification is performed, the manufacturer can reprogram all the firmware.</p>
<p>On a device where write protection is enabled in hardware (for example, an EEPROM with a write protect enable line), this modification may take the form of removing a resistor which pulls the write protect enable line active, and/or adding a resistor to another set of pads to pull the write protect enable line to the disabled state.</p>
<p>On a device where write protection is enabled in software (for example, a NAND flash with a write-once-per-boot instruction which prevents further write instructions that boot), this modification may take the form of an additional input GPIO whose state is controlled by a resistor. The boot stub firmware will read the GPIO state before writing the boot instruction; if the GPIO is asserted, the boot stub firmware will not issue the write instruction to the NAND flash.</p>
<p>Alternately, the EEPROM, which is normally soldered directly to the motherboard, may be replaced with a socketed EEPROM to facilitate reprogramming via an external programmer. </p>
<p>To prevent devices with disabled write protection from being shipped accidentally to consumers, final manufacturing tests should verify that the modifications have not been made. That is, the tests should attempt to write to the read-only portion of the firmware and/or verify that a write protection GPIO, if any, is asserted.</p>
<p>Note that a sufficiently advanced developer willing to void the warranty on their device may be able to make the hardware modifications to disable write protection and replace the normal Google Chrome OS firmware with their own firmware. Such a developer would also be able to desolder, remove, and rewrite the EEPROM chip with their own firmware, so including manufacturer support does not represent a significant reduction in security.</p>
<h1><a name="_Toc248215940_6743441168218851"></a>How this design addresses vulnerabilities and use cases</h1>
<h2><a name="_Toc248215941_4736762922257185"></a>Attacker with complete physical access</h2>
<p>We cannot prevent this attack.</p>
<h2><a name="_Toc248215942_7427392201498151"></a>Attacker with casual physical access</h2>
<p>The attacker must have sufficient control of the machine to turn on the not-easily-accessible developer switch.</p>
<p>Since the attacker's code is signed with a different key than the existing software on the device, the recovery image will delay installing the new image. The attacker must wait around near the device to interact with the machine during this time. This raises the risk of discovery for the attacker.</p>
<p>If the attacker has sufficient control of the device that they're not worried about unscrewing a panel, removing the battery, and interacting with the device for 5 minutes, that's tantamount to complete physical access. As with the previous case, an attacker with that level of access cannot be prevented. <br />
</p>
<h2><a name="_Toc248215943_1916042426601052_08223548997193575"></a>Attacker with no physical access</h2>
<p>If there is a vulnerability in Google Chrome, the attacker may be able to obtain temporary control over the device. Users could potentially enter their credentials into this compromised device and run modified/unsafe code. </p>
<p>The attacker will not be able to maintain long-term persistent control over the device. When the device next reboots, the verified boot process will detect the modified software and trigger recovery mode (if the developer mode switch is off) or a warning screen (if the dev mode switch is on). <br />
</p>
<h2><a name="Developer_borrows_a_device_672"></a>Developer borrows a device</h2>
<p>If the developer is a nice developer (and they remember to restore the device), they run recovery mode on the device before returning it.</p>
<p>If the developer returns the device without running recovery mode or turning the developer switch back off, the device will show a warning screen at boot time.</p>
<p>Stores should be advised to boot returned Google Chrome OS machines. If they do, they'll notice the warning screen and can refuse the return (at which point the developer will turn off the developer switch and run recovery mode and then successfully return the device).</p>
<p>If the store does not check a returned device, it could be sold to a user while still containing developer software. The first time a new user boots their device they're likely right in front of it (after all, they'll want to see our 5-second boot time) and will see the warning screen. At that point they'll likely either return/exchange the device, call tech support, or fix it themselves.</p>
<p>A user who lent their device to a developer will likely notice the warning screen, or that the login screen looks different. At this point they'll complain to the developer ("Hey sonny, what did you do to Grandma's computer?"), who can fix it.</p>
<p>Note that in all of these cases, the developer software is unlikely to be harmful in itself; the risk is that since developer mode removes some of the normal-mode protections, the user is more vulnerable to attacks.</p>
<h2><a name="_Toc248215946_3512580990791321"></a>Normal user</h2>
<p>With the developer mode switch off, a normal user can only run Google Chrome OS. Anything else will behave like the accidental corruption case—the device will either repair itself or trigger recovery mode.</p>
<h2><a name="_Toc248215948_1449832087382674_9122296990826726"></a>Developer</h2>
<p>A developer can modify the software on the device, installing their own Chromium OS or other OS. Opening a screw panel and flipping a switch is easy and does not void the device warranty.</p>
<p>To run an OS which requires legacy BIOS, they can replace the kernel with software which sets up legacy interrupts and then runs something int19h-like to load that OS. This is even easier since we're using GUID partition tables; the legacy OS will only see the partitions described in the legacy MBR which precedes the GUID partition table, so won't see the dedicated kernel partitions.</p>
<p>A developer using the device interactively needs to press a single key at boot time to dismiss the warning screen. This is minimally invasive; it delays boot time by only a second.</p>
<p>A developer using the device remotely will need to wait 30 seconds after reboot for the warning screen to time out. This is not likely to be a significant impediment for remote uses; systems like media servers or set top boxes are rebooted infrequently.</p>
<h2><a name="_Toc248215949_6924706334248185"></a>User installs prebuilt OS distribution (other than Google Chrome OS)</h2>
<p>Same as Developer case. The modification to enable developer mode is easy, and the device is comparably usable.</p>
<h2><a name="Manufacturer_4568967502564192__8691104557365179"></a>Manufacturer</h2>
<p>A manufacturer can modify the device hardware to allow reprogramming the entire firmware. Once the modification has been made, firmware development can proceed at a rate similar to other unprotected devices.</p>
<h1><a name="TOC-Revision-History"></a>Revision History</h1>
<div>1.04 (1 May 2014) - Clean up several minor inaccuracies.</div><div>1.03 (20 Mar 2014) - Generalized from invalid kernel to "boot errors" trigger recovery mode.</div>
<div>1.02 (3 Mar 2014) - Changed "unsigned" to "unverified" in kernel discussion.</div>
<div>1.01 (16 Mar 2010) - Clarified language for disabling write protect (previously known as 'manufacturer mode').</div>
<div>1.0 (15 Mar 2010) - Published to chromium.org.</div>
<div>0.1 (12 Dec 2009) - Initial version.</div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-docs/developer-mode">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="https://ssl.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXukca4jaDOG9SuQz_G8t7Hlho1vFt52G0v3zhjY-Oo0IbplOkRYIZMo1aXKu9pt3lo_18Vrvd76UXWK0TIGw_acWou4FsHgUvfRorxy_EtIexKSHUzAmF1N6Nr0UahPn8F3Pj7f/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
