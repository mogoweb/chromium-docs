<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/chromium-os","deleted":false,"title":"Chromium OS","dir":"ltr"},{"path":"/chromium-os/testing","deleted":false,"title":"Testing Home","dir":"ltr"},{"path":"/chromium-os/testing/autotest-user-doc","deleted":false,"title":"Autotest for Chromium OS developers","dir":"ltr"}];
  var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttp://sites.google.com/a/chromium.org/dev/chromium-os/testing/autotest-user-doc\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"http://csi.gstatic.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["http://www.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["http://www.gstatic.com/sites/p/56e332/system/js/codemirror.js","http://www.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","http://www.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","http://www.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","http://www.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/chromium-os/testing","parentWuid":"wuid:gx:2e2ee5668f423109","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Autotest for Chromium OS developers","locale":"en","wuid":"wuid:gx:6937dc40ef88b882","revision":33,"path":"/chromium-os/testing/autotest-user-doc","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"autotest-user-doc","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Autotest for Chromium OS developers - The Chromium Projects" />
<meta itemprop="name" content="Autotest for Chromium OS developers - The Chromium Projects" />
<meta property="og:title" content="Autotest for Chromium OS developers - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Autotest for Chromium OS developers - The Chromium Projects</title>
<meta itemprop="image" content="http://www.chromium.org/_/rsrc/1337270405104/chromium-os/testing/autotest-user-doc/atest-diagram.png" />
<meta property="og:image" content="http://www.chromium.org/_/rsrc/1337270405104/chromium-os/testing/autotest-user-doc/atest-diagram.png" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="http://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="http://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/chromium-os" dir="ltr">Chromium OS</A>‎ &gt; ‎<A href="/chromium-os/testing" dir="ltr">Testing Home</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Autotest for Chromium OS developers</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><p dir="ltr" style="font-size:medium;font-weight:bold;font-family:Times New Roman"><div class="sites-embed-align-left-wrapping-off"><div class="sites-embed-border-off sites-embed sites-embed-full-width" style="width:100%;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-3"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Useful-documents"><strong>1 </strong>Useful documents</a></li><li class="goog-toc"><a href="#TOC-Autotest-and-ebuild-workflow"><strong>2 </strong>Autotest and ebuild workflow</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Overview"><strong>2.1 </strong>Overview</a></li><li class="goog-toc"><a href="#TOC-Ebuild-setup-autotest-eclass"><strong>2.2 </strong>Ebuild setup, autotest eclass</a></li></ol></li><li class="goog-toc"><a href="#TOC-Building-tests"><strong>3 </strong>Building tests</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Building-tests-selectively"><strong>3.1 </strong>Building tests selectively</a></li></ol></li><li class="goog-toc"><a href="#TOC-Running-tests"><strong>4 </strong>Running tests</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Running-tests-on-a-machine"><strong>4.1 </strong>Running tests on a machine</a></li><li class="goog-toc"><a href="#TOC-Running-tests-in-a-VM---cros_run_vm_tests"><strong>4.2 </strong>Running tests in a VM - cros_run_vm_tests</a></li></ol></li><li class="goog-toc"><a href="#TOC-Result-log-layout-structure"><strong>5 </strong>Result log layout structure</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Interpreting-test-results-"><strong>5.1 </strong>Interpreting test results </a></li><li class="goog-toc"><a href="#TOC-Running-tests-automatically-Suites"><strong>5.2 </strong>Running tests automatically, Suites</a></li></ol></li><li class="goog-toc"><a href="#TOC-Writing-and-developing-tests"><strong>6 </strong>Writing and developing tests</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Writing-a-test"><strong>6.1 </strong>Writing a test</a></li><li class="goog-toc"><a href="#TOC-Making-a-new-test-work-with-ebuilds"><strong>6.2 </strong>Making a new test work with ebuilds</a></li><li class="goog-toc"><a href="#TOC-Deps"><strong>6.3 </strong>Deps</a></li><li class="goog-toc"><a href="#TOC-Working-on-a-test"><strong>6.4 </strong>Working on a test</a></li><li class="goog-toc"><a href="#TOC-Test-naming-conventions"><strong>6.5 </strong>Test naming conventions</a></li></ol></li><li class="goog-toc"><a href="#TOC-Common-workflows"><strong>7 </strong>Common workflows</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-W1.-Develop-and-iterate-on-a-test"><strong>7.1 </strong>W1. Develop and iterate on a test</a></li><li class="goog-toc"><a href="#TOC-W2.-Creating-a-test---steps-and-checklist"><strong>7.2 </strong>W2. Creating a test - steps and checklist</a></li><li class="goog-toc"><a href="#TOC-W3.-Splitting-autotest-ebuild-into-two"><strong>7.3 </strong>W3. Splitting autotest ebuild into two</a></li><li class="goog-toc"><a href="#TOC-W4.-Create-and-run-a-test-enabled-image-on-your-device"><strong>7.4 </strong>W4. Create and run a test-enabled image on your device</a></li></ol></li><li class="goog-toc"><a href="#TOC-Troubleshooting-FAQ"><strong>8 </strong>Troubleshooting/FAQ</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Q1:-What-autotest-ebuilds-are-out-there-"><strong>8.1 </strong>Q1: What autotest ebuilds are out there?</a></li><li class="goog-toc"><a href="#TOC-Q2:-I-see-a-test-of-the-name-greattests_TestsEverything-in-build-output-logs-whatever-How-do-I-find-which-ebuild-builds-it-"><strong>8.2 </strong>Q2: I see a test of the name ‘greattests_TestsEverything’ in build output/logs/whatever! How do I find which ebuild builds it?</a></li><li class="goog-toc"><a href="#TOC-Q3:-I-have-an-ebuild-foo-where-are-its-sources-"><strong>8.3 </strong>Q3: I have an ebuild ‘foo’, where are its sources?</a></li><li class="goog-toc"><a href="#TOC-Q4:-I-have-an-ebuild-what-tests-does-it-build-"><strong>8.4 </strong>Q4: I have an ebuild, what tests does it build?</a></li><li class="goog-toc"><a href="#TOC-Q5:-I-m-working-on-some-test-sources-how-do-I-know-which-ebuilds-to-cros_workon-start-in-order-to-properly-propagate-"><strong>8.5 </strong>Q5: I’m working on some test sources, how do I know which ebuilds to cros_workon start in order to properly propagate?</a></li><li class="goog-toc"><a href="#TOC-Q6:-I-created-a-test-added-it-into-ebuild-emerged-it-and-I-m-getting-access-denied-failures.-What-did-I-do-wrong-"><strong>8.6 </strong>Q6: I created a test, added it into ebuild, emerged it, and I’m getting access denied failures. What did I do wrong?</a></li></ol></li></ol></div></div></div></div></p><h2><a name="TOC-Useful-documents"></a><span><font size="5">Useful documents</font></span></h2><div><font size="2"><font face="Arial"><span style="white-space:pre-wrap">Autotest documentation on GitHub - </span></font><b style="font-family:Times New Roman"><span style="font-family:Arial;color:rgb(17,85,204);background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap"><a href="https://github.com/autotest/autotest/wiki/AutotestApi">https://github.com/autotest/autotest/wiki/AutotestApi</a></span></b></font></div><div><font size="2">  This would be a good read if you want to familiarize yourself with the basic Autotest concepts</font></div><div><font size="2"><br /></font></div><div><font size="2">Gentoo Portage ebuild/eclass Information - <a href="http://www.gentoo.org/proj/en/devrel/handbook/handbook.xml?part=2">http://www.gentoo.org/proj/en/devrel/handbook/handbook.xml?part=2</a></font></div><div><font size="2">  Getting to know the package build system we use.</font></div><div><font size="2"><br /></font></div><div><font size="2">ChromiumOS specific Portage FAQ - <a href="http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/portage-build-faq">http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/portage-build-faq</a></font></div><div><font size="2">  Learning something about the way we use portage.</font></div><div><b style="font-family:Times New Roman"><h2 style="font-size:medium"><a name="TOC-1"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h2><h2 style="font-size:medium"><a name="TOC-2"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h2><h2><a name="TOC-Autotest-and-ebuild-workflow"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Autotest and ebuild workflow</font></span></h2><font size="2"><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">To familiarize with autotest concepts, you should start with the upstream Autotest documentation at: </span><a href="https://github.com/autotest/autotest/wiki/AutotestApi"><span style="font-family:Arial;color:rgb(17,85,204);background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">https://github.com/autotest/autotest/wiki/AutotestApi</span></a><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">The rest of this document is going to use some terms and only explain them vaguely.</span></font><br /><h3 style="font-size:medium"><a name="TOC-3"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h3><h3><a name="TOC-Overview"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Overview</font></span></h3><br /><font size="2"><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">At a high level, tests are organized in test cases, each test case being either server or client, with one main .py file named the same as the test case, and one or more control files. In order to be able to perform all tasks on a given test, autotest expects tests to be placed in a monolithic file structure of:</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">/client/tests/</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">/client/site_tests/</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">/server/tests/</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">/server/site_tests/</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Each test directory has to have at least a control file, but typically also has a main job module (named the same as the test case). Furthermore, if it needs any additional files checked in, they are typically placed in a files/ directory, and separate projects that can be built with a Makefile inside the src/ directory.</span><br /><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Due to structural limitations in Chromium OS, it is not possible to store all test cases in this structure in a single large source repository as upstream autotest source would (placed at </span><span style="font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">third_party/autotest/files/</span><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"> in Chromium OS). In particular, the following has been required in the past:</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">- Having confidential (publicly inaccessible) tests or generally per-test ACLs for sharing only with a particular partner only.</span><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">- Storing test cases along with the project they wrap around, because the test requires binaries built as a by-product of the project’s own build system. (fe. chrome or tpm tests)</span><br /><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Furthermore, it has been desired to generally build everything that is not strongly ordered in parallel, significantly decreasing build times. That, however, requires proper dependency tree declaration and being able to specify which test cases require what dependencies, in addition to being able to process different “independent” parts of a single source repository in parallel.</span><br /><br /><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">This leads to the ebuild workflow, which generally allows compositing any number of sources in any format into a single monolithic tree, whose contents depend on build parameters.</span></font></b></div><div><br /></div><div><font face="Arial"><span style="font-size:15px;white-space:pre-wrap"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc/atest-diagram.png?attredirects=0" imageanchor="1"><img border="0" src="http://www.chromium.org/_/rsrc/1337270405104/chromium-os/testing/autotest-user-doc/atest-diagram.png" /></a></div><div style="display:block;margin-top:5px;margin-bottom:5px;text-align:left;margin-right:auto"></div></span></font><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">This allows using standard autotest workflow without any change, however, unlike what upstream does, the tests aren’t run directly from the source repository, rather from a staging read-only install location. This leads to certain differences in workflow:</font></span><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><p><span style="background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><font size="2">Source may live in an arbitrary location or can be generated on the fly. Anything that can be created as an ebuild (shell script) can be a test source. (cros-workon may be utilised, introducing a fairly standard Chromium OS project workflow)</font></span></p></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">The staging location (/build/${board}/usr/local/autotest/) may not be modified; if one wants to modify it, they have to find the source to it (using other tools, see FAQ).</font></span></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><p><span style="background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><font size="2">Propagating source changes requires an emerge step.</font></span></p><div style="font-size:16px"><span style="font-size:16px;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></div><div style="font-size:16px"><span style="font-size:16px;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></div></li></ul><h3 style="font-family:Times New Roman;font-weight:bold"><a name="TOC-Ebuild-setup-autotest-eclass"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Ebuild setup, autotest eclass</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:bold;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap">NOTE:</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap"> This assumes some basic knowledge of how ebuilds in Chromium OS work. Refer to for example </span><a href="http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/portage-build-faq" style="font-family:Times New Roman;font-weight:bold"><span style="font-family:Arial;color:rgb(17,85,204);background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/portage-build-faq</span></a><span style="font-family:Arial;font-weight:normal;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap"> for some documentation.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">An </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">autotest ebuild</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> is an ebuild that produces test cases and installs them into the </span><span style="font-family:Arial;font-weight:normal;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap">staging area</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">. It has three general tasks:</span></font><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Obtain the source - This is generally (but not necessarily) provided by ‘cros-workon’ eclass. It could also work with the more standard tarball SRC_URI pathway or generally any shell code executed in src_unpack().</font></span></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Prepare test cases - This includes, but is not limited to preprocessing any source, copying source files or intermediate binaries into the expected locations, where they will be taken over by autotest code, specifically the setup() function of the appropriate test. Typically, this is not needed.</font></span></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><font size="2"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Call autotest to ‘build’ all sources and subsequently install them - This should be done exclusively by inheriting the </span><span style="background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">autotest eclass</span><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap">, which bundles up all the necessary code to install into the intermediate location.</span></font></li></ul><font size="2"><br /><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Autotest eclass</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> is inherited by all autotest ebuilds, only requires a number of variables specified and works by itself otherwise. Most variables describe the locations and listings of work that needs to be done:</span></font><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Location variables define the paths to directories containing the test files:</font></span></li></ul><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">AUTOTEST_{CLIENT,SERVER}_{TESTS,SITE_TESTS}</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">AUTOTEST_{DEPS,PROFILERS,CONFIG}</span><br /></font><p dir="ltr" style="font-family:Times New Roman;font-weight:bold;margin-left:36pt;margin-top:0pt;margin-bottom:0pt"><span style="font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><font size="2">These typically only need to be specified if they differ from the defaults (which follow the upstream directory structure)</font></span></p><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><font size="2"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap">List variables (AUTOTEST_*_LIST) define the </span><span style="background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">list</span><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> of deps, profilers, configs that should be handled by this ebuild.</span></font></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">IUSE test list specification TESTS=, is a USE_EXPANDed specification of tests managed by the given ebuild. By virtue of being an IUSE variable, all of the options are visible as USE flag toggles while building the ebuild, unlike with list variables which are a given and the ebuild has to be modified for those to change.</font></span></li></ul><font size="2"><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Each ebuild usually operates on a single source repository. That does not always have to hold true, however, and in case of autotest, many ebuilds check out the sources of the same source repository (<i>autotest.git</i>). Invariably, this means that they have to be careful to not install the same files and split the sources between themselves to avoid file install collisions.</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">If more than one autotest ebuild operates on the same source repository, they </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">have to</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> use the above variables to define mutually exclusive slices in order to not collide during installation. Generally, if we have a source repository with client site_tests A and B, you can have either:</span></font><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">one ebuild with IUSE_TESTS=”+tests_A +tests_B”</font></span></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">two different ebuilds, one with IUSE_TESTS=”+tests_A”, the other with IUSE_TESTS=”+tests_B”</font></span></li></ul><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">As soon as an overlap between ebuilds happens, either an outside mechanism has to ensure the overlapping tests are never enabled at the same time, or file collisions happen.</span><br /></font><h2 style="font-size:medium;font-family:Times New Roman;font-weight:bold"><a name="TOC-4"></a><br /></h2><h2 style="font-family:Times New Roman;font-weight:bold"><a name="TOC-Building-tests"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Building tests</font></span></h2><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Fundamentally, a test has two main phases:</font></span><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">run_*() - This is is the main part that performs all testing and is invoked by the control files, once or repeatedly.</font></span></li><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">setup() - This function, present in the test case’s main .py file is supposed to prepare the test for running. This includes building any binaries, initializing data, etc.</font></span></li></ul><font size="2"><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">During building using emerge, autotest will call a setup() function of all test cases/deps involved. This is supposed to prepare everything. Typically, this will invoke make on a Makefile present in the test’s src/ directory, but can involve any other transformation of sources (also be empty if there’s nothing to build).</span><br /><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Note</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">, however, that setup() is implicitly called many times as test initialization even during run_*() step, so it should be a noop on reentry that merely verifies everything is in order.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Unlike run_*() functions, setup() gets called both during the prepare phase which happens on the </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">host and target alike</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">. This creates a problem with code that is being depended on or directly executed during setup(). Python modules that are imported in any pathway leading to setup() are needed both in the host chroot and on the target board to properly support the test. Any binaries would need to be compiled using the host compiler and either ensured that they will be skipped on the target (incremental setup() runs) or cross-compiled again and dynamically chosen while running on target.</span><br /><br /><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">More importantly</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">, in Chromium OS scenario, doing any write operations inside the setup() function will lead to </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">access denied failures</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">, because tests are being run from the intermediate read-only location.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Given the above, building is as easy as </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">emerge-</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">ing the autotest ebuild that contains our test.</span></font><br /><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ emerge-${board} ${test_ebuild}</font></code></div></span><br /><br /><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap">Currently, tests are organized within these notable ebuilds: </span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">(see <a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc#TOC-Q1:-What-autotest-ebuilds-are-out-there-">FAQ</a> full list)</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">chromeos-base/autotest-tests - The main ebuild handling most of autotest.git repository and its client and server tests.</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">chromeos-base/autotest-tests-* - Various ebuilds that build other parts of autotest.git</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">chromeos-base/chromeos-chrome - chrome tests; the tests that are part of chrome</span></font><br /><h3 style="font-family:Times New Roman;font-weight:bold"><a name="TOC-Building-tests-selectively"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Building tests selectively</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Test cases built by ebuilds generally come in large bundles. Sometimes, only a subset, or generally a different set of the tests provided by a given ebuild is desired. That is achieved using a <a href="http://devmanual.gentoo.org/general-concepts/use-flags/index.html">USE_EXPANDed</a> flag called <i>TESTS.</i></span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">All USE flags (and therefore tests) have a default state, either enabled (+) or disabled (-), specified directly in the ebuild, that can be manually overridden from the commandline. There are two ways to do that.</span><b style="font-family:Times New Roman;font-weight:bold"><ul style="margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Non-Incremental - Simply override the default selection by an entirely new selection, ignoring the defaults. This is useful if you develop a single test and don’t want to waste time building the others.</span></li></ul></b></font><div class="sites-codeblock sites-codesnippet-block" style="font-family:Times New Roman;font-weight:bold"><span style="font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code><font size="3">$ TESTS="test1 test2" emerge-${board} ${ebuild}</font></code></span></div><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Incremental - All USE_EXPAND flags are also accessible as USE flags, with the appropriate prefix, and can be used incrementally to selectively enable/disable tests in addition to the defaults. This can be useful if you aim to enable a test that is disabled by default and want to test locally.</font></span></li></ul><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ USE="test_to_be_enabled -test_to_be_disabled" emerge-${board} ${ebuild}</font></code></div></span><br /><br /><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">For operations across all tests, following incremental USE wildcard is supported by portage: "tests_*" to select all tests at once (or - to de-select).</span><br /><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">NOTE:</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> Both Incremental and Non-Incremental methods can be set/overriden by (in this order): the ebuild (default values), make.profile, make.conf, /etc/portage, commandline (see above). That means that any settings provided on the emerge commandline override everything else.</span></font><br /><h2><a name="TOC-Running-tests"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Running tests</font></span></h2><div><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><b style="font-family:arial,sans-serif;font-size:small">NOTE:</b><span style="font-family:arial,sans-serif;font-size:small"> In order to run tests on your device, it needs to have a <a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc#TOC-W4.-Create-and-run-a-test-enabled-image-on-your-device">test-enabled image</a>.</span></span></div><div><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span style="font-family:arial,sans-serif;font-size:small"><br /></span></span></div><span style="font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2">When running tests, fundamentally, you want to either:</font></span><ul style="font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2">Run sets of tests manually - Use case: Developing test cases</font></span></li></ul><span style="font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2">Take your local test sources, modify them, and then attempt to run them on a target machine using autotest. You are generally responsible for making sure that the machine is imaged to a test image, and the image contains all the dependencies needed to support your tests.</font></span><ul style="font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;background-color:transparent;font-weight:normal;vertical-align:baseline"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2">Verify a given image - Use case: Developing the projects subject to testing</font></span></li></ul><span style="font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2">Take an image, re-image the target device and run a test suite on it. This requires either use of build-time autotest artifacts or their reproduction by not modifying or resyncing your sources after an image has been built.</font></span></div><div><span style="font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="arial, sans-serif" size="2"><br /></font></span></div><div><h3><a name="TOC-Running-tests-on-a-machine"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Running tests on a machine</font></span></h3><div>Autotests are run with a tool called <a href="http://www.chromium.org/chromium-os/testing/test_that-basic-usage" style="font-family:Arial;white-space:pre-wrap;font-size:small;background-color:transparent">test_that</a>.</div><h3><a name="TOC-Running-tests-in-a-VM---cros_run_vm_tests"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Running tests in a VM - cros_run_vm_tests</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">VM tests are conveniently wrapped into a script cros_run_vm_tests that sets up the VM using a given image and then calls test_that This is run by builders to test using the Smoke suite.</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">If you want to run your tests on the VM (see </span><a href="http://www.chromium.org/chromium-os/how-tos-and-troubleshooting/running-chromeos-image-under-virtual-machines" style="font-family:Times New Roman;font-weight:bold"><span style="font-family:Arial;color:rgb(17,85,204);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">here</span></a><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> for basic instructions for setting up KVM with cros images) be aware of the following:</span></font><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;color:rgb(51,51,51);font-weight:normal;vertical-align:baseline"><span style="color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">cros_run_vm_test starts up a VM and runs autotests using the port specified (defaults to 9222).  As an example:</font></span></li></ul><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ ./bin/cros_run_vm_test --test_case=suite_Smoke ---image_path=&lt;my_image_to_start or don't set to use most recent build&gt; --board=x86-generic</font></code></div></span><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;color:rgb(51,51,51);font-weight:normal;vertical-align:baseline"><span style="color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">The emulator command line redirects localhost port 922 to the emulated machine's port 22 to allow you to ssh into the emulator. For Chromium OS to actually listen on this port you must append the --test_image parameter when you run the ./image_to_vm.sh script, or perhaps run the mod_image_for_test.sh script instead.</font></span></li><li style="list-style:disc;font-family:Arial;color:rgb(51,51,51);font-weight:normal;vertical-align:baseline"><span style="color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">You can then run tests on the correct ssh port with something like </font></span></li></ul><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ test_that --board=x86-generic localhost:922 'f:.*platform_BootPerf/control'</font></code></div></span><ul style="font-family:Times New Roman;font-weight:bold;margin-top:0pt;margin-bottom:0pt"><li style="list-style:disc;font-family:Arial;color:rgb(51,51,51);font-weight:normal;vertical-align:baseline"><span style="color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">To set the sudo password run set_shared_user_password. Then within the emulator you can press Ctrl-Alt-T to get a terminal, and sudo using this password. This will also allow you to ssh into the unit with, e.g. </font></span></li></ul><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ ssh -p 922 root@localhost</font></code></div></span><div><br /></div><h2><a name="TOC-Result-log-layout-structure"></a>Result log layout structure</h2><div>For information regarding the layout structure please refer to the following <a href="http://www.chromium.org/chromium-os/testing/test-code-labs/autotest-client-tests/autotest-results-logs">autotest-results-logs</a></div><div><br /></div><h3><a name="TOC-Interpreting-test-results-"></a><font size="4">Interpreting test results<span style="font-weight:normal"> </span></font></h3><div><font size="2">Running autotest will result in a lot of information going by which is probably not too informative if you have not used autotest before.  At the end of the test_that run, you will see a summary of pass/failure status, along with performance results:</font></div><div><span style="font-size:20px;font-weight:bold"><font size="3"><span style="font-size:13px;font-weight:normal"><br /></span></font></span></div><div><span style="font-weight:bold"><font><span style="font-weight:normal"><div class="sites-codeblock sites-codesnippet-block"><div><code><font size="3">22:44:30 INFO | Using installation dir /home/autotest</font></code></div><div><code><font size="3">22:44:30 ERROR| Could not install autotest from repos</font></code></div><div><code><font size="3">22:44:32 INFO | Installation of autotest completed</font></code></div><div><font size="3"><code>22:44:32 INFO | GOOD<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>----<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>Autotest.install</code><span style="white-space:pre"> </span><code>timestamp=1263509072</code><span style="white-space:pre"> </span><code>localtime=Jan 14 22:44:32</code><span style="white-space:pre"> </span></font></div><div><code><font size="3">22:44:33 INFO | Executing /home/autotest/bin/autotest /home/autotest/control phase 0</font></code></div><div><font size="3"><code>22:44:36 INFO | START<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>----</code><span style="white-space:pre"> </span><code>----<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>timestamp=1263509075</code><span style="white-space:pre"> </span><code>localtime=Jan 14 14:44:35</code><span style="white-space:pre"> </span></font></div><div><font size="3"><code>22:44:36 INFO | </code><span style="white-space:pre"> </span><code>START<font color="#000000" face="Arial, Verdana, sans-serif">   </font></code><code>sleeptest</code><span style="white-space:pre"> </span><code>sleeptest</code><span style="white-space:pre"> </span><code>timestamp=1263509076</code><span style="white-space:pre"> </span><code>localtime=Jan 14 14:44:36</code><span style="white-space:pre"> </span></font></div><div><code><font size="3">22:44:36 INFO | Bundling /usr/local/autotest/client/tests/sleeptest into test-sleeptest.tar.bz2</font></code></div><div><font size="3"><code>22:44:40 INFO |</code><span style="white-space:pre"> </span>  <code>GOOD<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>sleeptest<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>sleeptest<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>timestamp=1263509079<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>localtime=Jan 14 14:44:39</code><span style="white-space:pre"> </span><code>completed successfully</code></font></div><div><font size="3"><code>22:44:40 INFO | <font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>END GOOD<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>sleeptest</code><span style="white-space:pre"> </span><code>sleeptest<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>timestamp=1263509079<font color="#000000" face="Arial, Verdana, sans-serif">  </font></code><code>localtime=Jan 14 14:44:39</code><span style="white-space:pre"> </span></font></div><div><font size="3"><code>22:44:42 INFO | END GOOD</code><span style="white-space:pre"> </span><code>----</code><span style="white-space:pre"> </span><code>----</code><span style="white-space:pre"> </span><code>timestamp=1263509082</code><span style="white-space:pre"> </span><code>localtime=Jan 14 14:44:42</code><span style="white-space:pre"> </span></font></div><div><code><font size="3">22:44:44 INFO | Client complete</font></code></div><div><code><font size="3">22:44:45 INFO | Finished processing control file</font></code></div></div><br /></span></font></span></div><code><span style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif"><code><span style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif"><font size="2">test_that will leave around a temp directory populated with diagnostic information:</font></span></code></span></code><div><br /><div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#006000" face="monospace" size="3"><span style="line-height:13px">Finished running tests. Results can be found in /tmp/test_that_results_j8GoWH or /tmp/test_that_latest</span></font></div></div><div><font size="6"><span style="font-size:20px"><b><font size="3"><span style="font-size:13px"><span style="font-weight:normal"><br /></span></span></font></b></span></font></div><div><b><span style="font-weight:normal"><font size="2">This directory will contain a directory per test run.  Each directory contains the logs pertaining to that test run.</font></span></b></div><div><font size="2"><br /></font></div><div><font size="2">In that directory some interesting files are:</font></div><div><font size="2"><br /></font></div><div><font size="2">${TEST}/debug/client.DEBUG - the most detailed output from running the client-side test</font></div></div></div><h3 style="font-family:Times New Roman;font-size:medium;font-weight:bold"><a name="TOC-5"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h3><h3 style="font-family:Times New Roman;font-weight:bold"><a name="TOC-Running-tests-automatically-Suites"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Running tests automatically, Suites</font></span></h3><div><font face="Arial" size="2"><span style="white-space:pre-wrap">Suites provide a mechanism to group tests together in test groups. They also serve as hooks for automated runs of tests verifying various builds. Most importantly, that is the BVT (board verification tests) and Smoke (a subset of BVT that can run in a VM</span></font></div><div><font face="Arial" size="2"><span style="white-space:pre-wrap"><br /></span></font></div><div><font face="Arial" size="2"><span style="white-space:pre-wrap"><br /></span></font></div><div style="font-family:Times New Roman"><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">Please refer to the <a href="http://www.chromium.org/chromium-os/testing/test-suites">suites documentation</a></font></span></div><div style="font-family:Times New Roman;font-size:medium;font-weight:bold"><br /></div><h2 style="font-family:Times New Roman;font-size:medium"><a name="TOC-6"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h2><h2 style="font-family:Times New Roman;font-size:medium"><a name="TOC-7"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h2><h2 style="font-family:Times New Roman"><a name="TOC-Writing-and-developing-tests"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="5">Writing and developing tests</font></span></h2><h3 style="font-family:Times New Roman"><a name="TOC-Writing-a-test"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Writing a test</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">For understanding and writing the actual python code for autotest, please refer to: </span><a href="http://www.chromium.org/chromium-os/testing/autotest-developer-faq#TOC-Writing-Autotests" style="font-family:Times New Roman;font-weight:bold"><span style="font-family:Arial;color:rgb(17,85,204);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">the Developer FAQ</span></a><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Currently, all code should be placed in a standard layout inside the autotest.git repository, unless otherwise is necessary for technical reasons. Regardless, the following text assumes that code is placed in generally any repository.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">For a test to be fully functional in Chromium OS, it has to be associated with an ebuild. It is generally possible to run tests without an ebuild using test_that but discouraged, as the same will not function with other parts of the system.</span></font><br /><h3 style="font-family:Times New Roman"><a name="TOC-Making-a-new-test-work-with-ebuilds"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Making a new test work with ebuilds</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">The choice of ebuild depends on the location of its sources. Structuring tests into more smaller ebuilds (as opposed to one ebuild per source repository) serves two purposes:</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">- Categorisation - Grouping similar tests together, possibly with deps they use exclusively</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">- Parallelisation - Multiple independent ebuilds can build entirely in parallel</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">- Dependency tracking - Larger bundles of tests depend on more system packages without proper resolution which dependency belongs to which test. This also increases paralellism.</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Current ebuild structure is largely a result of breaking off the biggest blockers for parallelism, ie. tests depending on chrome or similar packages, and as such, using any of the current ebuilds should be sufficient. (see FAQ for listing of ebuilds)</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">After choosing the proper ebuild to add your test into, the test (in the form “+tests_&lt;testname&gt;”) needs to be added to IUSE_TESTS list that all autotest ebuilds have. Failing to do so will simply make ebuilds ignore your tests entirely. As with all USE flags, prepending it with + means the test will be enabled by default, and should be the default, unless you want to keep the test experimental for your own use, or turn the USE flag on explicitly by other means, eg. in a config for a particular board only.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Should a </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">new ebuild</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> be started, it should be added to </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">chromeos-base/autotest-all</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> package, which is a meta-ebuild depending on all autotest ebuild packages that can be built. autotest-all is used by the build system to automatically build all tests that we have and therefore keep them from randomly breaking.</span><br /></font><br /><h3 style="font-family:Times New Roman"><a name="TOC-Deps"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Deps</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Autotest uses deps to provide a de-facto dependencies into the ecosystem. A dep is a directory in ‘</span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">client/deps</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">’ with a structure similar to a test case without a control file. A test case that depends on a dep will invoke the dep’s setup() function in its own setup() function and will be able to access the files provided by the dep. Note that autotest deps have nothing to do with system dependencies.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">As the calls to a dep are internal autotest code, it is not possible to automatically detect these and make them an inter-package dependencies on the ebuild level. For that reason, deps should either be <a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc#TOC-Ebuild-setup-autotest-eclass">provided</a> by the same ebuild that builds test that consume them, or ebuild dependencies need to be declared manually between the dep ebuild and the test ebuild that uses it. An </span><span style="font-family:Arial;font-weight:bold;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">autotest-deponly</span><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> eclass exists to provide solution for ebuilds that build only deps and no tests. A number of deponly ebuilds already exist.</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Common deps are:</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> - chrome_test - Intending to use any of the test binaries produced by chrome.</span><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> - pyauto_dep - Using pyauto for your code.</span></font><br /><h3 style="font-family:Times New Roman"><a name="TOC-Working-on-a-test"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Working on a test</font></span></h3><font size="2"><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">As mentioned, while working on a test, it is necessary to always propagate any source changes using the emerge step. This can be either a manual emerge (instant) or build_packages (longer, rebuilds all dependencies as well).</span><br /><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">For cros-workon ebuilds, this means first starting to work on all ebuilds that are affected. (<a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc#TOC-Q5:-I-m-working-on-some-test-sources-how-do-I-know-which-ebuilds-to-cros_workon-start-in-order-to-properly-propagate-">Which ebuilds are these?</a>):</span></font><br /><span style="font-family:Arial;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code><font size="3">$ cros_workon --board=${board} start &lt;list of ebuilds&gt;</font></code></div></span><br /><font size="2"><br /><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">As described, all autotest ebuilds have a selectable list of tests, most of which can be disabled and only the one test that is being worked on can be built selectively, saving time.</span></font><br /><div class="sites-codeblock sites-codesnippet-block" style="font-family:Times New Roman;font-weight:bold"><font size="3"><span style="font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ TESTS=testname emerge-${board} &lt;list of ebuilds&gt;</code></span><br /><span style="font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ test_that -b ${board} &lt;ip&gt; testname</code></span></font><br /></div><span style="font-size:small;font-family:Arial;font-weight:bold;vertical-align:baseline;white-space:pre-wrap;background-color:transparent"><div><span style="font-size:small;font-family:Arial;font-weight:bold;vertical-align:baseline;white-space:pre-wrap;background-color:transparent"><br /></span></div>Note:</span><span style="font-size:small;font-family:Arial;vertical-align:baseline;white-space:pre-wrap;background-color:transparent"> If tests have interdependencies not handled via </span><span style="font-size:small;font-family:Arial;font-weight:bold;vertical-align:baseline;white-space:pre-wrap;background-color:transparent">deps</span><span style="font-size:small;font-family:Arial;vertical-align:baseline;white-space:pre-wrap;background-color:transparent">, those cannot be automatically detected, and you have to include all tests that are being depended on. An example of that would be an old-style test suite, which is really just a control file calling other tests selectively via hardcoded names. In order to make that work, you have to determine the list of tests accordingly, before you run the suite.</span></div><div><h3 style="font-family:Times New Roman"><a name="TOC-Test-naming-conventions"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Test naming conventions</font></span></h3><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="2">(TODO) We don’t have any. These need to be defined and documented here.</font></span></div><div><font face="Times New Roman" style="font-size:medium"><b><br /></b></font><span style="font-family:Times New Roman"><h2 style="font-weight:bold;font-size:medium"><a name="TOC-8"></a><br /></h2><h2 style="font-weight:bold"><a name="TOC-Common-workflows"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="5">Common workflows</font></span></h2><p><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="3">Step-by-step instructions</font></span></p><h3 style="font-weight:bold"><a name="TOC-9"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4"><br /></font></span></h3><h3 style="font-weight:bold"><a name="TOC-W1.-Develop-and-iterate-on-a-test"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">W1. Develop and iterate on a test</font></span></h3><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">0. Set up environment</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-weight:bold;font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ cd ~/trunk/src/third_party/autotest/files/</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ export TESTS=”&lt;the test cases to iterate on&gt;”</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ EBUILD=&lt;the ebuild that contains TEST&gt;</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ board=&lt;the board on which to develop&gt;</code></span></div><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">1. Ensure cros_workon is started</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-weight:bold;font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ cros_workon --board=${board} start ${EBUILD}</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ repo sync # Necessary only if you use minilayout.</code></span></div><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">2. Make modifications (on first run, you may want to just do 3,4 to verify everything works before you touch it &amp; break it)</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ …</code></div></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">3. Build test (TESTS= is not necessary if you exported it before)</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ emerge-$board $EBUILD</code></div></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">4. Run test to make sure it works before you touch it</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-weight:bold;font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ test_that &lt;machine IP&gt; ${TEST</code></span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>S}</code></span></div><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">5. Go to 2) to iterate</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">6. Clean up environment</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-weight:bold;font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ cros_workon --board=${board} stop ${EBUILD}</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ unset TESTS</code></span></div><br /><br /><h3 style="font-weight:bold;font-size:medium"><a name="TOC-W2.-Creating-a-test---steps-and-checklist"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">W2. Creating a test - steps and checklist</span></h3><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">When creating a test, the following steps should be done/verified.</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">1. Create the actual test directory, main test files/sources, at least one control file</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">2. Find the appropriate ebuild package and start working on it:</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ cros_workon --board=${board} start &lt;package&gt;</code></div></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">3. Add the new test into the IUSE_TESTS list of 9999 ebuild</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">4. Try building: (make sure it’s the 9999 version being built)</span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ TESTS=&lt;test&gt; emerge-$board &lt;package&gt;</code></div></span></span><font size="3"><div><font size="3"><br /></font></div>5. Try running:</font><b style="font-size:medium;font-family:Times New Roman"><div class="sites-codeblock sites-codesnippet-block"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ test_that &lt;IP&gt; &lt;test&gt;</code></span></div><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div><b style="font-size:medium;font-family:Times New Roman"><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></div>6. Iterate on 4,5 and modify source until happy with the initial version.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">7. Commit test source first, when it is safely in, commit the 9999 ebuild version change.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">8. Cleanup</span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ cros_workon --board=${board} stop &lt;package&gt;</code></div></span><br /><br /><h3><a name="TOC-W3.-Splitting-autotest-ebuild-into-two"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">W3. Splitting autotest ebuild into two</span></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Removing a test from one ebuild and adding to another in the same revision causes portage file collisions unless counter-measures are taken. Generally, some things routinely go wrong in this process, so this checklist should serve to help that.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">0. We have ebuild </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">foo-0.0.1-r100</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"> with </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">test</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"> and would like to split that test off into ebuild</span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"> bar-0.0.1-r1</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Assume that:</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">- both ebuilds are using cros-workon (because it’s likely the case).</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">- foo is used globally (eg. autotest-all depends on it), rather than just some personal ebuild</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">1. Remove </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">test</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"> from foo-{0.0.1-r100,9999}; uprev foo-0.0.1-r100 (to -r101)</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">2. Create bar-9999 (making a copy of foo and replacing IUSE_TESTS may be a good start), with IUSE_TESTS containing just the entry for </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">test</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">3. Verify package dependencies of test. Make bar-9999 only depend on what is needed for test, remove the dependencies from foo-9999, unless they are needed by tests that remained.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">4. Add a blocker. Since bar installs files owned by foo-0.0.1-r100 and earlier, the blocker’s format will be:</span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>RDEPEND=”!&lt;=foo-0.0.1-r100”</code></div></span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">5. Add a dependency to the new version of bar into chromeos-base/autotest-all-0.0.1</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>RDEPEND=”bar”</code></div></span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">6. Change the dependency of foo in chromeos-base/autotest-all-0.0.1 to be version locked to the new rev:</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>RDEPEND=”&gt;foo-0.0.1-r100”</code></div></span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">7. Uprev (move) autotest-all-0.0.1-rX symlink by one.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">8. Publish all as the same change list, have it reviewed, push.</span></b></div><div><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font face="Arial"><h3 style="font-size:15px"><a name="TOC-10"></a><br /></h3><h3 style="font-size:15px"><a name="TOC-W4.-Create-and-run-a-test-enabled-image-on-your-device"></a>W4. Create and run a test-enabled image on your device</h3><div style="font-size:15px"><br /></div><div style="font-size:15px">1. Choose which board you want to build for (we'll refer to this as ${BOARD}, which is for example "x86-generic").</div><div style="font-size:15px">2. Set up a proper portage build chroot setup.  Go through the normal process of setup_board if you haven't already. </div><div style="font-size:15px"><div class="sites-codeblock sites-codesnippet-block"><code>$ ./build_packages --board=${BOARD}</code></div></div><div style="font-size:15px">3. Build test image.</div><div style="font-size:15px"><div class="sites-codeblock sites-codesnippet-block"><code>$ ./build_image --board=${BOARD} test</code></div></div><div style="font-size:15px">4. Install the Chromium OS testing image to your target machine.  This is through the standard mechanisms: either USB, or by reimaging a device currently running a previously built Chromium OS image modded for test, or by entering the shell on the machine and forcing an auto update to your machine when it's running a dev server.  For clarity we'll walk through two common ways below, but if you already know about this, just do what you normally do.</div><div style="font-size:15px">4a. If you choose to use a USB boot, you first put the image on USB and run this from outside the chroot.</div><div style="font-size:15px"><div class="sites-codeblock sites-codesnippet-block"><code>$ ./image_to_usb.sh --to /dev/sdX --board=${BOARD} --image_name=chromiumos_test_image.bin</code></div></div><div style="font-size:15px">4b. Alternatively, if you happen to already have a machine running an image modified for test and you know its IP address (${REMOTE_IP}), you can avoid using a USB key and reimage it with a freshly built image by running this from outside the chroot:</div><div style="font-size:15px"><div class="sites-codeblock sites-codesnippet-block"><code>$ ./image_to_live.sh --remote=${REMOTE_IP} --image=`./get_latest_image.sh --board=${BOARD}`/chromiumos_test_image.bin</code></div></div><div style="font-size:15px">This will automatically start dev server, ssh to your machine, cause it to update to from that dev server using memento_updater, reboot, wait for reboot, print out the new version updated to, and shut down your dev server.</div><div style="font-size:15px"><br /></div><div style="font-size:15px"><b style="font-family:Times New Roman"><h2 style="display:inline!important"><a name="TOC-11"></a><b><b><font size="5"><span style="font-family:Arial;background-color:transparent;vertical-align:baseline"><br /></span></font></b></b></h2></b></div><div style="font-size:15px"><b style="font-family:Times New Roman"><h2 style="display:inline!important"><a name="TOC-Troubleshooting-FAQ"></a><b><b><font size="5"><span style="font-family:Arial;background-color:transparent;vertical-align:baseline">Troubleshooting/FAQ</span></font></b></b></h2></b></div><p><font size="3"><span style="font-family:Arial;background-color:transparent;vertical-align:baseline">Fairly asked questions, because yes, some of this may be confusing!</span></font></p></font></span></div><div><b style="font-family:Times New Roman"><h4 style="font-size:medium"><a name="TOC-12"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q1:-What-autotest-ebuilds-are-out-there-"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Q1: What autotest ebuilds are out there?</font></span></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Note that the list of ebuilds may differ per board, as each board has potentially different list of overlays. To find all autotest ebuilds for board </span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap">foo</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">, you can run:</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ board=</code></span><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;font-style:italic;vertical-align:baseline;white-space:pre-wrap"><code>foo</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ for dir in $(portageq-${board} envvar PORTDIR_OVERLAY); do</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>     find . -name '*.ebuild' | xargs grep "inherit.*autotest" | grep "9999" |cut -f1 -d: | \</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>     sed -e 's/.*\/\([^/]*\)\/\([^/]*\)\/.*\.ebuild/\1\/\2/'</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>   done</code></span></div><h4 style="font-size:medium"><a name="TOC-13"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q2:-I-see-a-test-of-the-name-greattests_TestsEverything-in-build-output-logs-whatever-How-do-I-find-which-ebuild-builds-it-"></a><font size="4"><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Q2: I see a test of the name ‘</span><span style="font-family:Arial;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap">greattests_TestsEverything’ in build output/logs/whatever</span><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">! How do I find which ebuild builds it?</span></font></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">All ebuilds have lists of tests exported as </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">USE_EXPAND</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">ed lists called </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">TESTS</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">. An expanded use can be searched for in the same way as other use flags, but with the appropriate prefix, in this case, you would search for ‘</span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">tests_greattests_TestsEverything</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">’:</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ use_search=tests_greattests_TestsEverything</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ equery-$board hasuse $use_search</code></span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code><font color="#0000ff"> </font><font color="#000000">* Searching for USE flag tests_greattests_TestsEverything …</font></code></span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">[I-O] [  ] some_ebuild_package_name:0</font></code></span></div><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">This will however only work on ebuilds which are </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">already installed</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">, ie. their potentially outdated versions.</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Alternately</span><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">, you can run a pretended emerge (emerge -p) of all autotest ebuilds and scan the output.</span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><div class="sites-codeblock sites-codesnippet-block"><code>$ emerge -p ${all_ebuilds_from_Q1} |grep -C 10 “${use_search}”</code></div></span><h4 style="font-size:medium"><a name="TOC-14"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q3:-I-have-an-ebuild-foo-where-are-its-sources-"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Q3: I have an ebuild ‘foo’, where are its sources?</font></span></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">Generally speaking, one has to look at the ebuild source to figure that question out (and it shouldn’t be hard). However, all present autotest ebuilds (at the time of this writing) are also ‘cros-workon’, and for those, this should always work:</span><br /><div class="sites-codeblock sites-codesnippet-block" style="font-size:medium"><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ ebuild_search=foo</code></span><br /><span style="font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code>$ ebuild $(equery-$board which $ebuild_search) info</code></span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">CROS_WORKON_SRCDIR=”/home/you/trunk/src/third_party/foo”</font></code></span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">CROS_WORKON_PROJECT=”chromiumos/third_party/foo”</font></code></span></div><h4 style="font-size:medium"><a name="TOC-15"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q4:-I-have-an-ebuild-what-tests-does-it-build-"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Q4: I have an ebuild, what tests does it build?</font></span></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:normal;vertical-align:baseline;white-space:pre-wrap">You can run a pretended emerge on the ebuild and observe the ‘TESTS=’ statement:</span></b></div><div><span style="font-size:medium;font-family:Times New Roman"><div class="sites-codeblock sites-codesnippet-block"><span style="background-color:rgb(243,243,243)"><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);vertical-align:baseline;white-space:pre-wrap"><code>$ ebuild_name=foo</code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);vertical-align:baseline;white-space:pre-wrap"><code>$ emerge-$board -pv ${ebuild_name}</code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">These are the packages that would be merged, in order:</font></code></span><br /><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">Calculating dependencies...</font> <font color="#000000">done!</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code>[</code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#00ff00">ebuild</font></code></span><span style="color:rgb(255,255,255);font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code>   </code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#ffff00">R</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#ffffff">   </font><font color="#000000">]</font><font color="#ffffff"> </font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#00ff00">foo-foo_version</font></code></span><span style="color:rgb(255,255,255);font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"> </span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">to</font> <font color="#000000">/build/$board/</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"> </span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">USE="</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#ff0000">autox hardened tpmtools xset</font></code></span><span style="color:rgb(255,255,255);font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"> </span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#0000ff">-buildcheck -opengles</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">"</font> <font color="#000000">TESTS="</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#ff0000">enabled_test1 enabled_test2 … enabled_testN</font><font color="#ffffff"> </font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#0000ff">-disabled_test1 ...disabled_testN</font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">" 0 kB</font><font color="#ffffff"> </font></code></span><span style="font-weight:normal;font-size:15px;font-family:Arial;vertical-align:baseline;white-space:pre-wrap"><code><font color="#3d85c6">[1]</font></code></span></span></div><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Alternately, you can use equery, which will list tests with the USE_EXPAND prefix:</span><br /><div class="sites-codeblock sites-codesnippet-block"><span style="font-weight:normal;font-size:15px;font-family:Arial;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code>$ equery-$board uses ${ebuild_name}</code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">[</font> <font color="#000000">Legend : U - final flag setting for installation]</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">[        : I - package is installed with flag     ]</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">[</font> <font color="#000000">Colors : set, unset                             ]</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">* Found these USE flags for chromeos-base/autotest-tests-9999:</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">U I</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + autotest                                    : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + autotest                                    : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + autox                                       : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + buildcheck                                  : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + hardened                                    : activate default security enhancements for toolchain (gcc, glibc, binutils)</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">- - opengles                                    : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">+ + tests_enabled_test                     : &lt;unknown&gt;</font></code></span><br /><span style="font-weight:normal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code> <font color="#000000">- - tests_disabled_test                      : &lt;unknown&gt;</font></code></span></div></span></div><div><h4 dir="ltr" style="font-family:Times New Roman;font-size:medium;font-weight:bold"><a name="TOC-16"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q5:-I-m-working-on-some-test-sources-how-do-I-know-which-ebuilds-to-cros_workon-start-in-order-to-properly-propagate-"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Q5: I’m working on some test sources, how do I know which ebuilds to cros_workon start in order to properly propagate?</font></span></h3><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">You should ‘workon’ and always cros_workon start all ebuilds that have files that you touched.</span><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">If you’re interested in a particular file/directory, that is installed in /build/$board/usr/local/autotest/ and would like know which package has provided that file, you can use equery:</span><br /><div class="sites-codeblock sites-codesnippet-block"><span style="font-family:Arial;font-size:15px;font-weight:normal;color:rgb(0,0,255);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code>$ equery-$board belongs /build/${board}/usr/local/autotest/client/site_tests/foo_bar/foo_bar.py</code></span><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code><font color="#0000ff"> </font><font color="#000000">* Searching for &lt;filename&gt; …</font></code></span><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><code><font color="#000000">chromeos-base/autotest-tests-9999 (&lt;filename&gt;)</font></code></span></div><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font color="#ff0000">DON’T forget</font> to do equery-$board. Just equery will also work, only never return anything useful.</span><br /><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">As a rule of thumb, if you work on anything from the core autotest framework or shared libraries (anything besides {server,client}/{test,site_tests,deps,profilers,config}), it belongs to </span><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;font-style:italic;vertical-align:baseline;white-space:pre-wrap">chromeos-base/autotest. </span><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Individual test case will each belong to a particular ebuild, see Q2.</span><br /><br /><span style="font-family:Arial;font-size:15px;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">It is important to cros_workon start every ebuild involved.</span><br /><h4 dir="ltr" style="font-family:Times New Roman;font-size:medium;font-weight:bold"><a name="TOC-17"></a><span style="font-size:16px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></h4><h3><a name="TOC-Q6:-I-created-a-test-added-it-into-ebuild-emerged-it-and-I-m-getting-access-denied-failures.-What-did-I-do-wrong-"></a><span style="font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="4">Q6: I created a test, added it into ebuild, emerged it, and I’m getting access denied failures. What did I do wrong?</font></span></h3><span style="font-family:Arial;font-weight:normal;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><font size="3">Your test’s setup() function (which runs on the host before being uploaded) is probably trying to write into the read-only intermediate location. See <a href="http://www.chromium.org/chromium-os/testing/autotest-user-doc#TOC-Building-tests">explanation</a>.</font></span></div><div><b><span style="color:rgb(34,34,34);font-family:arial,sans-serif"><br /></span></b></div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/chromium.org/dev/chromium-os/testing/autotest-user-doc">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq9dJrEQtFR98UdaOnCcWQNfaNbLNldwX_sKxQqAbKAUgKR9Jmx46fizAwX4nTiln7AbfhR75I9FtNW_73JkhKJhlUouDdLbr1fWYbsa9mKDWGOJ9OU/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
