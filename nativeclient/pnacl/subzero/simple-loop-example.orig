<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/nativeclient","deleted":false,"title":"Native Client","dir":"ltr"},{"path":"/nativeclient/pnacl","deleted":false,"title":"PNaCl","dir":"ltr"},{"path":"/nativeclient/pnacl/subzero","deleted":false,"title":"Subzero","dir":"ltr"},{"path":"/nativeclient/pnacl/subzero/simple-loop-example","deleted":false,"title":"Simple loop example","dir":"ltr"}];
  var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttp://sites.google.com/a/chromium.org/dev/nativeclient/pnacl/subzero/simple-loop-example\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"http://csi.gstatic.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["http://www.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["http://www.gstatic.com/sites/p/56e332/system/js/codemirror.js","http://www.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","http://www.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","http://www.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","http://www.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/nativeclient/pnacl/subzero","parentWuid":"wuid:gx:470f33045d84a4ce","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Simple loop example","locale":"en","wuid":"wuid:gx:2f3887d7bf14d090","revision":7,"path":"/nativeclient/pnacl/subzero/simple-loop-example","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"simple-loop-example","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Simple loop example - The Chromium Projects" />
<meta itemprop="name" content="Simple loop example - The Chromium Projects" />
<meta property="og:title" content="Simple loop example - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Simple loop example - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="http://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="http://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/nativeclient" dir="ltr">Native Client</A>‎ &gt; ‎<A href="/nativeclient/pnacl" dir="ltr">PNaCl</A>‎ &gt; ‎<A href="/nativeclient/pnacl/subzero" dir="ltr">Subzero</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Simple loop example</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr">Here we show the steps that Subzero takes in translating a simple loop example.<div><br /></div><div>For translating this example to native code, we assume a fairly constrained platform: x86-32 with only 3 registers (eax, ecx, edx) available for local register allocation, and no global register allocation.<br /><div><br /></div><div>Start with the following C example, which computes the reduction of an integer array.</div><div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><div class="sites-codeblock sites-codesnippet-block"><div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>int simple_loop(int *a, int n) {</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>  int sum = 0;</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>  for (int i = 0; i &lt; n; ++i) {</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>    sum += a[i];</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>  }</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>  return sum;</code></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>}</code></div></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /><div style="color:rgb(34,34,34);font-family:arial,sans-serif">The corresponding PNaCl bitcode after compiling with <code>pnacl-clang -O2</code> is the following:</div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>define internal i32 @simple_loop(i32 %a, i32 %n) {</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>entry:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %cmp4 = icmp sgt i32 %n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br i1 %cmp4, label %for.body, label %for.end</code></font></div><div><font color="#222222" face="arial, sans-serif"><br /></font></div><div><font color="#222222" face="arial, sans-serif"><code>for.body:                                         ; preds = %for.body, %entry</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %i.06 = phi i32 [ %inc, %for.body ], [ 0, %entry ]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %sum.05 = phi i32 [ %add, %for.body ], [ 0, %entry ]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %gep_array = mul i32 %i.06, 4</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %gep = add i32 %a, %gep_array</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %gep.asptr = inttoptr i32 %gep to i32*</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %0 = load i32* %gep.asptr, align 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %add = add i32 %0, %sum.05</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %inc = add i32 %i.06, 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %cmp = icmp slt i32 %inc, %n</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br i1 %cmp, label %for.body, label %for.end</code></font></div><div><font color="#222222" face="arial, sans-serif"><br /></font></div><div><font color="#222222" face="arial, sans-serif"><code>for.end:                                          ; preds = %for.body, %entry</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  %sum.0.lcssa = phi i32 [ 0, %entry ], [ %add, %for.body ]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret i32 %sum.0.lcssa</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>}</code></font></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Generate high-level Vanilla ICE, including lowering phi instructions.  Where possible, v_*_phi assignments are pushed up to just past their last use in the basic block, and past a compare/branch that ends the basic block.</div><div><div></div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_c = icmp sgt v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c, l_body, l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_i = phi [v_inc, l_body], [0, l_entry]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i = v_i_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum = phi [v_add, l_body], [0, l_entry]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum = v_sum_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t1 = mul v_i, 4</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t2 = add v_a, v_t1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_elt = load v_t2</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_add = add v_elt, v_sum</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = v_add</code></font></div><div><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>  v_sum2_phi = v_add</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  v_inc = add v_i, 1</code></font></div><div><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>  v_i_phi = v_inc</code></span></div><div><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>  v_c2 = icmp slt v_inc, v_n</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c2, l_body, l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum2 = phi [0, l_entry], [v_add, l_body]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2 = v_sum2_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret v_sum2</code></font></div></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Liveness analysis determines which source operands in each instruction are the end of the operand's live range.  As a bonus, it also determines the set of live operands at the beginning of each basic block.  If liveness analysis is omitted, we assume all operands are live at the beginning of every basic block, and no operands' live ranges end in any instruction.  The results are the <code>LIVE</code> annotations at the start of each basic block, and the <code>LIVEEND</code> annotations on each instruction.</div><div><div></div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry: // <span style="background-color:rgb(255,255,0)">LIVE={v_a,v_n}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2_phi = 0;</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_c = icmp sgt v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c, l_body, l_end // <span style="background-color:rgb(255,255,0)">LIVEEND={v_c}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body: // <span style="background-color:rgb(255,255,0)">LIVE={v_i_phi,v_sum_phi,v_a,v_n}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i = v_i_phi              // <span style="background-color:rgb(255,255,0)">LIVEEND={v_i_phi}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum = v_sum_phi          // <span style="background-color:rgb(255,255,0)">LIVEEND={v_sum_phi}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t1 = mul v_i, 4</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t2 = add v_a, v_t1       // <span style="background-color:rgb(255,255,0)">LIVEEND={v_t1}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_elt = load v_t2          // <span style="background-color:rgb(255,255,0)">LIVEEND={v_t2}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_add = add v_elt, v_sum   // <span style="background-color:rgb(255,255,0)">LIVEEND={v_elt,v_sum}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = v_add</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2_phi = v_add         // <span style="background-color:rgb(255,255,0)">LIVEEND={v_add}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_inc = add v_i, 1         // <span style="background-color:rgb(255,255,0)">LIVEEND={v_i}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i_phi = v_inc</code></font></div><div><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>  v_c2 = icmp slt v_inc, v_n // <span style="background-color:rgb(255,255,0)">LIVEEND={v_inc}</span></code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c2, l_body, l_end     // <span style="background-color:rgb(255,255,0)">LIVEEND={v_c2}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end: // <span style="background-color:rgb(255,255,0)">LIVE={v_sum2_phi}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2 = v_sum2_phi // <span style="background-color:rgb(255,255,0)">LIVEEND={v_sum2_phi}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret v_sum2          // <span style="background-color:rgb(255,255,0)">LIVEEND={v_sum2}</span></code></font></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Addressing mode inference (x86 only) identifies operands that pattern-match to an expression suitable to the special x86 addressing modes.  The results are an annotation on the use of the calculated address, as well as annotations on the uses of the core operands as the subexpressions are built up into the calculated address.  These annotations are labeled <code>ADDROPT</code> and <code>ADDR</code>, respectively.  The code selector makes use of the <code>ADDROPT</code> annotation, and the local register manager takes the <code>ADDR</code> annotations into account when assigning registers.</div></div><div><div></div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry: // LIVE={v_a,v_n}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_c = icmp sgt v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c, l_body, l_end // LIVEEND={v_c}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body: // LIVE={v_i_phi, v_sum_phi, v_a, v_n}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i = v_i_phi              // LIVEEND={v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum = v_sum_phi          // LIVEEND={v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t1 = mul v_i, 4          // <span style="background-color:rgb(255,255,0)">ADDR={v_i}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_t2 = add v_a, v_t1       // LIVEEND={v_t1}, <span style="background-color:rgb(255,255,0)">ADDR={v_a}</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_elt = load v_t2          // LIVEEND={v_t2}, <span style="background-color:rgb(255,255,0)">ADDROPT=v_a+4*v_i+0</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_add = add v_elt, v_sum   // LIVEEND={v_elt, v_sum}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum_phi = v_add</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2_phi = v_add         // LIVEEND={v_add}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_inc = add v_i, 1         // LIVEEND={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_i_phi = v_inc</code></font></div><div><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>  v_c2 = icmp slt v_inc, v_n // LIVEEND={v_inc}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  br v_c2, l_body, l_end     // LIVEEND={v_c2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end: // LIVE={v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  v_sum2 = v_sum2_phi // LIVEEND={v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret v_sum2          // LIVEEND={v_sum2}</code></font></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Instruction selection includes local register allocation, using 3 registers but calling them <code>r1</code>, <code>r2</code>, and <code>r3</code> so that the specific mappings to <code>eax</code>, <code>ecx</code>, and <code>edx</code> can be deferred.  In the code below, for each instruction, we retain the originating Vanilla ICE instruction in a comment for clarity, and each low-level ICE instruction is annotated with the local register manager state.  This state includes the LRU order (the first register listed is the next register to be given out), and the set of operands and constants available in each register.  When the instruction selection code works with the local register manager, the selector may take advantage of operator commutativity to minimize the instruction expansion (see the <span style="background-color:rgb(255,255,0)">highlighted</span> instruction).</div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry: // LIVE={v_a,v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  // v_i_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r1, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i_phi, r1 // r2={}, r3={}, r1={0,v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  // v_sum_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r2, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, r2 // r3={}, r1={0,v_i_phi}, r2={0,v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  // v_sum2_phi = 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, r3 // r1={0,v_i_phi}, r2={0,v_sum_phi}, r3={0,v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ble l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_body</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body: // LIVE={v_i_phi, v_sum_phi, v_a, v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_i = v_i_phi // LIVEEND={v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r1, v_i_phi // r2={}, r3={}, r1={v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i, r1 // r2={}, r3={}, r1={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum = v_sum_phi // LIVEEND={v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r2, v_sum_phi // r3={}, r1={v_i}, r2={v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum, r2 // r3={}, r1={v_i}, r2={v_sum}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_t1 = mul v_i, 4 // ADDR={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  shl r3, 2</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t1, r3 // r2={v_sum}, r3={v_t1}, r1={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_t2 = add v_a, v_t1 // LIVEEND={v_t1}, ADDR={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r2, v_a // r3={v_t1}, r1={v_i}, r2={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  <span style="background-color:rgb(255,255,0)">add r3, r2</span></code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t2, r3 // r3={v_t2}, r1={v_i}, r2={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_elt = load v_t2 // LIVEEND={v_t2}, ADDROPT=v_a+4*v_i+0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, [r2+4*r1]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_elt, r3 // r1={v_i}, r2={v_a}, r3={v_elt}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_add = add v_elt, v_sum // LIVEEND={v_elt, v_sum}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add r3, v_sum</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_add, r3 // r1={v_i}, r2={v_a}, r3={v_add}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum_phi = v_add // PHI</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, r3 // </code></font><span style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>r1={v_i}, r2={v_a}</code></span><font color="#222222" face="arial, sans-serif"><code>, r3={v_add,v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum2_phi = v_add // PHI, LIVEEND={v_add}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, r3 // </code></font><span style="color:rgb(34,34,34);font-family:arial,sans-serif"><code>r1={v_i}, r2={v_a}</code></span><font color="#222222" face="arial, sans-serif"><code>, r3={v_add,v_sum_phi,v_sum2_phi}</code></font></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code> </code></span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code> </code></span><font color="#222222" face="arial, sans-serif"><code>//v_inc = add v_i, 1 // LIVEEND={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add r1, 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_inc, r1 // r2={v_a}, r3={v_add</code></font><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>,v_sum_phi,v_sum2_phi</code></span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>}, r1={v_inc}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_i_phi = v_inc // PHI</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mv v_i_phi, r1 // r2={v_a}, r3={v_add</code></font><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>,v_sum_phi,v_sum2_phi</code></span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>}, r1={v_inc,v_i_phi}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  </code></font><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>//v_c2 = icmp slt v_inc, v_n // LIVEEND={v_inc}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp r1, v_n</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //br v_c2, l_body, l_end // LIVEEND={v_c2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  blt l_body</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end: // LIVE={v_sum2_phi}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //v_sum2 = v_sum2_phi // LIVEEND={v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r1, v_sum2_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2, r1 // r1={v_sum2_phi,v_sum2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  //ret v_sum2 // LIVEEND={v_sum2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret</code></font></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Multiblock register allocation starts by identifying register/operand candidates (<code>CAND</code>) for each basic block in which the operand is live on entry and is the first value assigned to the register in the basic block.  These candidates are used in conjunction with physical register preferences to decide on mappings between <code>r1/r2/r3</code> and <code>eax/ecx/edx</code> in each basic block.  For example, <code>mov eax, r1</code> creates a preference for <code>r1</code> to be <code>eax</code> in the last basic block, and that preference propagates when possible to the predecessor basic blocks.  Edges may need to be split to add compensation code when the preferences are overconstrained.</div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry: // LIVE={v_a,v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r3:eax, r1:ecx,r2:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r1, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i_phi, r1 // r2={}, r3={}, r1={0,v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r2, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, r2 // r3={}, r1={0,v_i_phi}, r2={0,v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, r3 // r1={0,v_i_phi}, r2={0,v_sum_phi}, r3={0,v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ble l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_body</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body_split1:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, eax // mov r2:v_sum_phi, r3:v_sum_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body: // LIVE={v_i_phi, v_sum_phi, v_a, v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={v_i_phi:r1,v_sum_phi:r2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r3:eax, r1:ecx,r2:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ////mov r1, v_i_phi // r2={}, r3={}, r1={v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i, r1 // r2={}, r3={}, r1={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ////mov r2, v_sum_phi // r3={}, r1={v_i}, r2={v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum, r2 // r3={}, r1={v_i}, r2={v_sum}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  shl r3, 2</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t1, r3 // r2={v_sum}, r3={v_t1}, r1={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r2, v_a // r3={v_t1}, r1={v_i}, r2={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add r3, r2</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t2, r3 // r3={v_t2}, r1={v_i}, r2={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov r3, [r2+4*r1]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_elt, r3 // r1={v_i}, r2={v_a}, r3={v_elt}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add r3, v_sum</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_add, r3 // r1={v_i}, r2={v_a}, r3={v_add}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, r3 // </code></font><span style="line-height:1;font-size:10pt;color:rgb(34,34,34);font-family:arial,sans-serif"><code>r1={v_i}, r2={v_a}</code></span><font color="#222222" face="arial, sans-serif" style="line-height:1;font-size:10pt"><code>, r3={v_add,v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, r3 // </code></font><span style="line-height:1;font-size:10pt;color:rgb(34,34,34);font-family:arial,sans-serif"><code>r1={v_i}, r2={v_a}</code></span><font color="#222222" face="arial, sans-serif" style="line-height:1;font-size:10pt"><code>, r3={v_add,v_sum_phi,v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add r1, 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_inc, r1 // </code></font><font color="#222222" face="arial, sans-serif" style="line-height:1;font-size:10pt"><code>r2={v_a}, r3={v_add</code></font><span style="line-height:1;font-size:10pt;background-color:transparent;color:rgb(34,34,34);font-family:arial,sans-serif"><code>,v_sum_phi,v_sum2_phi</code></span><span style="line-height:1;font-size:10pt;background-color:transparent;color:rgb(34,34,34);font-family:arial,sans-serif"><code>}, r1={v_inc}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i_phi, r1 // </code></font><font color="#222222" face="arial, sans-serif" style="line-height:1;font-size:10pt"><code>r2={v_a}, r3={v_add</code></font><span style="line-height:1;font-size:10pt;background-color:transparent;color:rgb(34,34,34);font-family:arial,sans-serif"><code>,v_sum_phi,v_sum2_phi</code></span><span style="line-height:1;font-size:10pt;background-color:transparent;color:rgb(34,34,34);font-family:arial,sans-serif"><code>}, r1={v_inc,v_i_phi}</code></span></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>  cmp r1, v_n</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  blt l_body_split1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end: // LIVE={v_sum2_phi}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={v_sum2_phi:r1}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r1:eax, r2:ecx,r3:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ////mov r1, v_sum2_phi</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2, r1 // r1={v_sum2_phi,v_sum2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, r1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret</code></font></div></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"><br /></div></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">After physical register substitution:</div><div><div></div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry: // LIVE={v_a,v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r3:eax, r1:ecx,r2:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov ecx, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i_phi, ecx // edx={}, eax={}, ecx={0,v_i_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, ecx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, edx // eax={}, ecx={0,v_i_phi}, edx={0,v_sum_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, ecx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, eax // ecx={0,v_i_phi}, edx={0,v_sum_phi}, eax={0,v_sum2_phi}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ble l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_body</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body_split1:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, eax</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body: // LIVE={v_i_phi, v_sum_phi, v_a, v_n}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={v_i_phi:r1,v_sum_phi:r2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r3:eax, r1:ecx,r2:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i, ecx // edx={}, eax={}, ecx={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum, edx // eax={}, ecx={v_i}, edx={v_sum}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, ecx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  shl eax, 2</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t1, eax // edx={v_sum}, eax={v_t1}, ecx={v_i}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, v_a // eax={v_t1}, ecx={v_i}, edx={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add eax, edx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_t2, eax // eax={v_t2}, ecx={v_i}, edx={v_a}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, [edx+4*ecx]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_elt, eax // ecx={v_i}, edx={v_a}, eax={v_elt}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add eax, v_sum</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_add, eax // ecx={v_i}, edx={v_a}, eax={v_add}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum_phi, eax // </code></font><span style="color:rgb(0,96,0);font-family:monospace;line-height:1;font-size:10pt"><code>ecx={v_i}, edx={v_a}, eax={v_add,v_sum_phi}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2_phi, eax // </code></font><span style="color:rgb(0,96,0);font-family:monospace;line-height:1;font-size:10pt"><code>ecx={v_i}, edx={v_a}, eax={v_add,v_sum_phi,v_sum2_phi}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  add ecx, 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_inc, ecx // edx={v_a}, eax={v_add</code></font><span style="color:rgb(0,96,0);font-family:monospace;line-height:1;font-size:10pt"><code>,v_sum_phi,v_sum2_phi</code></span><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>}, ecx={v_inc}</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_i_phi, ecx // edx={v_a}, eax={v_add</code></font><span style="color:rgb(0,96,0);font-family:monospace;line-height:1;font-size:10pt"><code>,v_sum_phi,v_sum2_phi</code></span><span style="color:rgb(0,96,0);font-family:arial,sans-serif;line-height:1;font-size:10pt"><code>}, ecx={v_inc,v_i_phi}</code></span></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>  cmp ecx, v_n</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  blt l_body_split1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end: // LIVE={v_sum2_phi}, r1={}, r2={}, r3={}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// CAND={v_sum2_phi:r1}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>// REG={r1:eax, r2:ecx,r3:edx}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov v_sum2, eax // eax={v_sum2_phi,v_sum2}</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, eax</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ret</code></font></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">Dead instruction elimination cleans up dead stores and no-longer-necessary calculations of intermediate components of addressing modes.</div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#222222" face="arial, sans-serif"><code>simple_loop(v_a, v_n):</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_entry:</code></font></div><div><span style="background-color:transparent;color:rgb(34,34,34);font-family:arial,sans-serif;font-size:10pt"><code>  mov ecx, 0</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, ecx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, ecx</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp v_n, 0</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  ble l_end</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  br l_body</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body_split1:</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, eax</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_body:</code></font></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>  mov v_sum, edx</code></span></div><div><font color="#222222" face="arial, sans-serif"><code>  mov edx, v_a</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  mov eax, [edx+4*ecx]</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add eax, v_sum</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  add ecx, 1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  cmp ecx, v_n</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>  blt l_body_split1</code></font></div><div><font color="#222222" face="arial, sans-serif"><code>l_end:</code></font></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;background-color:transparent;font-size:10pt"><code>  ret</code></span></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif"></div></div><br /></div><div style="color:rgb(34,34,34);font-family:arial,sans-serif">In this example, there are no clear peephole optimizations available, and since only one stack operand is left, there is no need for local variable coalescing.  Thus the difference between the code above and the actual code emitted would involve:</div><div><ul><li><font color="#222222" face="arial, sans-serif">Frame setup in the prolog</font></li><li><font color="#222222" face="arial, sans-serif">Frame destruction in the epilog</font></li><li><font color="#222222" face="arial, sans-serif">Substituting stack frame addressing modes where generic stack operands appear</font></li><li><font color="#222222" face="arial, sans-serif">Loop alignment as desired</font></li><li><font color="#222222" face="arial, sans-serif">SFI sequences</font></li><li><font color="#222222" face="arial, sans-serif">Bundling</font></li></ul></div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/chromium.org/dev/nativeclient/pnacl/subzero/simple-loop-example">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq96rcnobpEL7iyKVlbcUdPPXgl6mMNgxU_FlgQAKweTyRjgIjchm8odRmNjBwsf0C9a55jWXaZhGSgEn0MWomRHCWqFLseG-UyWXXOmllcOTem9cV4/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
