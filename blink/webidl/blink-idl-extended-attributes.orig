<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/blink","deleted":false,"title":"Blink","dir":"ltr"},{"path":"/blink/webidl","deleted":false,"title":"Web IDL in Blink","dir":"ltr"},{"path":"/blink/webidl/blink-idl-extended-attributes","deleted":false,"title":"Blink IDL Extended Attributes","dir":"ltr"}];
  var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttps://sites.google.com/a/chromium.org/dev/blink/webidl/blink-idl-extended-attributes\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"https://gg.google.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["https://ssl.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["https://ssl.gstatic.com/sites/p/56e332/system/js/codemirror.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","https://ssl.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/blink/webidl","parentWuid":"wuid:gx:31e328bf2dc4270","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Blink IDL Extended Attributes","locale":"en","wuid":"wuid:gx:f83b08a2f1eedc","revision":249,"path":"/blink/webidl/blink-idl-extended-attributes","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"blink-idl-extended-attributes","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Blink IDL Extended Attributes - The Chromium Projects" />
<meta itemprop="name" content="Blink IDL Extended Attributes - The Chromium Projects" />
<meta property="og:title" content="Blink IDL Extended Attributes - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="https://ssl.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Blink IDL Extended Attributes - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="https://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="https://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/blink" dir="ltr">Blink</A>‎ &gt; ‎<A href="/blink/webidl" dir="ltr">Web IDL in Blink</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Blink IDL Extended Attributes</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div>
<div>
<h2><a name="TOC-1"></a><span style="font-size:10pt;font-weight:normal">
<div><div class="sites-embed-align-right-wrapping-on"><div class="sites-embed-border-off sites-embed" style="width:250px;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-3"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Naming"><strong>1 </strong>Naming</a></li><li class="goog-toc"><a href="#TOC-Special-cases"><strong>2 </strong>Special cases</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Constants"><strong>2.1 </strong>Constants</a></li><li class="goog-toc"><a href="#TOC-Overloaded-methods"><strong>2.2 </strong>Overloaded methods</a></li><li class="goog-toc"><a href="#TOC-Special-operations-methods-"><strong>2.3 </strong>Special operations (methods)</a></li><li class="goog-toc"><a href="#TOC-Partial-interfaces"><strong>2.4 </strong>Partial interfaces</a></li><li class="goog-toc"><a href="#TOC-implements"><strong>2.5 </strong>implements</a></li><li class="goog-toc"><a href="#TOC-Inheritance"><strong>2.6 </strong>Inheritance</a></li></ol></li><li class="goog-toc"><a href="#TOC-Standard-Web-IDL-Extended-Attributes"><strong>3 </strong>Standard Web IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Clamp-a-p-"><strong>3.1 </strong>[Clamp] (a, p)</a></li><li class="goog-toc"><a href="#TOC-Constructor-i-"><strong>3.2 </strong>[Constructor] (i)</a></li><li class="goog-toc"><a href="#TOC-EnforceRange-a-p-"><strong>3.3 </strong>[EnforceRange] (a, p)</a></li><li class="goog-toc"><a href="#TOC-NamedConstructor-i-"><strong>3.4 </strong>[NamedConstructor] (i)</a></li><li class="goog-toc"><a href="#TOC-NewObject-m-"><strong>3.5 </strong>[NewObject] (m)</a></li><li class="goog-toc"><a href="#TOC-NoInterfaceObject-i-"><strong>3.6 </strong>[NoInterfaceObject] (i)</a></li><li class="goog-toc"><a href="#TOC-Global-and-PrimaryGlobal-i-"><strong>3.7 </strong>[Global] and [PrimaryGlobal] (i)</a></li><li class="goog-toc"><a href="#TOC-Exposed-i-m-a-c-"><strong>3.8 </strong>[Exposed] (i, m, a, c)</a></li><li class="goog-toc"><a href="#TOC-OverrideBuiltins-i-"><strong>3.9 </strong>[OverrideBuiltins] (i)</a></li><li class="goog-toc"><a href="#TOC-PutForwards-a-"><strong>3.10 </strong>[PutForwards] (a)</a></li><li class="goog-toc"><a href="#TOC-Replaceable-a-"><strong>3.11 </strong>[Replaceable] (a)</a></li><li class="goog-toc"><a href="#TOC-SameObject-m-"><strong>3.12 </strong>[SameObject] (m)</a></li><li class="goog-toc"><a href="#TOC-TreatNullAs-a-p-TreatUndefinedAs-a-p-"><strong>3.13 </strong>[TreatNullAs] (a,p), [TreatUndefinedAs] (a,p)</a></li><li class="goog-toc"><a href="#TOC-Unforgeable-m-a-"><strong>3.14 </strong>[Unforgeable] (m,a)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Common-Blink-specific-IDL-Extended-Attributes"><strong>4 </strong>Common Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-ActiveDOMObject-i-"><strong>4.1 </strong>[ActiveDOMObject] (i)</a></li><li class="goog-toc"><a href="#TOC-PerWorldBindings-m-a-"><strong>4.2 </strong>[PerWorldBindings] (m, a)</a></li><li class="goog-toc"><a href="#TOC-LogActivity-m-a-"><strong>4.3 </strong>[LogActivity] (m, a)</a></li><li class="goog-toc"><a href="#TOC-CallWith-m-a-"><strong>4.4 </strong>[CallWith] (m, a)</a></li><li class="goog-toc"><a href="#TOC-SetterCallWith-a-"><strong>4.5 </strong>[SetterCallWith] (a)</a></li><li class="goog-toc"><a href="#TOC-ConstructorCallWith-i-"><strong>4.6 </strong>[ConstructorCallWith] (i)</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-CallWith-ActiveWindow-FirstWindow-m-a-"><strong>4.6.1 </strong>[CallWith=ActiveWindow&amp;FirstWindow] (m) (a*)</a></li><li class="goog-toc"><a href="#TOC-CallWith-ThisValue-m-"><strong>4.6.2 </strong>[CallWith=ThisValue] (m)</a></li><li class="goog-toc"><a href="#TOC-ConstructorCallWith-i-1"><strong>4.6.3 </strong>[ConstructorCallWith] (i)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Custom-i-m-s-a-"><strong>4.7 </strong>[Custom] (i, m, s, a)</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Custom-PropertyQuery-PropertyEnumerator-s-"><strong>4.7.1 </strong>[Custom=PropertyQuery|PropertyEnumerator] (s)</a></li><li class="goog-toc"><a href="#TOC-Custom-LegacyCallAsFunction-i-deprecated"><strong>4.7.2 </strong>[Custom=LegacyCallAsFunction] (i) deprecated</a></li><li class="goog-toc"><a href="#TOC-Custom-ToV8-i-"><strong>4.7.3 </strong>[Custom=ToV8] (i)</a></li><li class="goog-toc"><a href="#TOC-Custom-VisitDOMWrapper-i-"><strong>4.7.4 </strong>[Custom=VisitDOMWrapper] (i)</a></li><li class="goog-toc"><a href="#TOC-Custom-Wrap-i-"><strong>4.7.5 </strong>[Custom=Wrap] (i)</a></li></ol></li><li class="goog-toc"><a href="#TOC-CustomElementCallbacks-m-a-"><strong>4.8 </strong>[CustomElementCallbacks] (m, a)</a></li><li class="goog-toc"><a href="#TOC-Default-p-"><strong>4.9 </strong>[Default] (p)</a></li><li class="goog-toc"><a href="#TOC-DependentLifetime-i-"><strong>4.10 </strong>[DependentLifetime] (i)</a></li><li class="goog-toc"><a href="#TOC-DeprecateAs-m-a-c-"><strong>4.11 </strong>[DeprecateAs] (m, a, c)</a></li><li class="goog-toc"><a href="#TOC-GarbageCollected-i-"><strong>4.12 </strong>[GarbageCollected] (i)</a></li><li class="goog-toc"><a href="#TOC-Iterable-i-"><strong>4.13 </strong>[Iterable] (i) </a></li><li class="goog-toc"><a href="#TOC-Measure-m-a-c-"><strong>4.14 </strong>[Measure] (m, a, c)</a></li><li class="goog-toc"><a href="#TOC-MeasureAs-m-a-c-"><strong>4.15 </strong>[MeasureAs] (m, a, c)</a></li><li class="goog-toc"><a href="#TOC-NotEnumerable-m-a-s-"><strong>4.16 </strong>[NotEnumerable] (m, a, s)</a></li><li class="goog-toc"><a href="#TOC-PostMessage-m-"><strong>4.17 </strong>[PostMessage] (m)</a></li><li class="goog-toc"><a href="#TOC-RaisesException-i-m-a-"><strong>4.18 </strong>[RaisesException] (i, m, a)</a></li><li class="goog-toc"><a href="#TOC-Reflect-a-"><strong>4.19 </strong>[Reflect] (a)</a></li><li class="goog-toc"><a href="#TOC-ReflectEmpty-value-a-"><strong>4.20 </strong>[ReflectEmpty="value"] (a)</a></li><li class="goog-toc"><a href="#TOC-ReflectInvalid-value-a-"><strong>4.21 </strong>[ReflectInvalid="value"] (a)</a></li><li class="goog-toc"><a href="#TOC-ReflectMissing-value-a-"><strong>4.22 </strong>[ReflectMissing="value"] (a)</a></li><li class="goog-toc"><a href="#TOC-ReflectOnly-list-a-"><strong>4.23 </strong>[ReflectOnly=&lt;list&gt;] (a)</a></li><li class="goog-toc"><a href="#TOC-RuntimeEnabled-i-m-a-c-"><strong>4.24 </strong>[RuntimeEnabled] (i, m, a, c)</a></li><li class="goog-toc"><a href="#TOC-SetWrapperReferenceFrom-xxx-i-"><strong>4.25 </strong>[SetWrapperReferenceFrom=xxx] (i)</a></li><li class="goog-toc"><a href="#TOC-SetWrapperReferenceTo-xxx-i-"><strong>4.26 </strong>[SetWrapperReferenceTo=xxx] (i)</a></li><li class="goog-toc"><a href="#TOC-TypeChecking-i-m-a-"><strong>4.27 </strong>[TypeChecking] (i, m, a)</a></li><li class="goog-toc"><a href="#TOC-TreatReturnedNullStringAs-m-a-"><strong>4.28 </strong>[TreatReturnedNullStringAs] (m, a)</a></li><li class="goog-toc"><a href="#TOC-WillBeGarbageCollected-i-"><strong>4.29 </strong>[WillBeGarbageCollected] (i)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Rare-Blink-specific-IDL-Extended-Attributes"><strong>5 </strong>Rare Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-CachedAttribute-a-"><strong>5.1 </strong>[CachedAttribute] (a)</a></li><li class="goog-toc"><a href="#TOC-CheckSecurity-i-m-a-"><strong>5.2 </strong>[CheckSecurity] (i, m, a)</a></li><li class="goog-toc"><a href="#TOC-DoNotCheckSecurity-m-a-"><strong>5.3 </strong>[DoNotCheckSecurity] (m, a)</a></li><li class="goog-toc"><a href="#TOC-CustomConstructor-i-"><strong>5.4 </strong>[CustomConstructor] (i)</a></li><li class="goog-toc"><a href="#TOC-FlexibleArrayBufferView-Summary:-FlexibleArrayBufferView-wraps-a-parameter-that-is-known-to-be-an-ArrayBufferView-or-a-subtype-of-e.g.-typed-arrays-with-a-FlexibleArrayBufferView.-The-FlexibleArrayBufferView-itself-can-then-either-refer-to-an-actual-ArrayB"><strong>5.5 </strong>[FlexibleArrayBufferView]Summary: [FlexibleArrayBufferView] wraps a parameter that is known to be an ArrayBufferView (or a subtype of, e.g. typed arrays) with a FlexibleArrayBufferView. The FlexibleArrayBufferView itself can then either refer to an actual ArrayBufferView or a temporary copy (for small payloads) that may even live on the stack. The idea is that copying the payload on the stack and referring to the temporary copy saves creating global handles (resulting in weak roots) in V8. Note that [FlexibleArrayBufferView]  will actually result in a TypedFlexibleArrayBufferView wrapper for typed arrays.Usage: Applies to arguments of methods. See modules/webgl/WebGLRenderingContextBase.idl for an example.</a></li><li class="goog-toc"><a href="#TOC-KeepAttributeAliveForGC-a-"><strong>5.6 </strong>[KeepAttributeAliveForGC] (a)</a></li><li class="goog-toc"><a href="#TOC-URL-a-"><strong>5.7 </strong>[URL] (a)</a></li><li class="goog-toc"><a href="#TOC-NoImplHeader-i-"><strong>5.8 </strong>[NoImplHeader] (i)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Temporary-Blink-specific-IDL-Extended-Attributes"><strong>6 </strong>Temporary Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-LegacyTreatAsPartialInterface-i-"><strong>6.1 </strong>[LegacyTreatAsPartialInterface] (i)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Discouraged-Blink-specific-IDL-Extended-Attributes"><strong>7 </strong>Discouraged Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-DoNotCheckConstants-i-"><strong>7.1 </strong>[DoNotCheckConstants] (i)</a></li><li class="goog-toc"><a href="#TOC-ImplementedAs-i-m-s-a-"><strong>7.2 </strong>[ImplementedAs] (i, m, s, a)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Deprecated-Blink-specific-IDL-Extended-Attributes"><strong>8 </strong>Deprecated Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Conditional-i-m-a-deprecated"><strong>8.1 </strong>[Conditional] (i,m,a) deprecated</a></li><li class="goog-toc"><a href="#TOC-Immutable-m-a-DoNotCheckSignature-m-possibly-deprecated"><strong>8.2 </strong>[Immutable] (m, a), [DoNotCheckSignature] (m) possibly deprecated</a></li></ol></li><li class="goog-toc"><a href="#TOC-Internal-use-Blink-specific-IDL-Extended-Attributes"><strong>9 </strong>Internal-use Blink-specific IDL Extended Attributes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-PartialInterfaceImplementedAs-m-a-c-"><strong>9.1 </strong>[PartialInterfaceImplementedAs] (m, a, c)</a></li></ol></li><li class="goog-toc"><a href="#TOC-Undocumented-Blink-specific-IDL-Extended-Attributes"><strong>10 </strong>Undocumented Blink-specific IDL Extended Attributes</a></li></ol></div></div></div></div></div>
</span></h2>
<p>The main interest in extended attributes are their <i>semantics</i>: Blink implements many more extended attributes than the Web IDL standard, to specify various behavior.</p>
<p>The authoritative list of allowed extended attributes and values is <a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/bindings/IDLExtendedAttributes.txt">bindings/IDLExtendedAttributes.txt</a>. This is complete but not necessarily precise (there may be unused extended attributes or values), since validation is run on build, but coverage isn't checked.</p>
<p>Syntactically, Blink IDL extended attributes differ from standard Web IDL extended attributes in a few ways:</p>
<ul><li><span style="background-color:transparent;font-size:10pt">trailing commas are allowed (for convenience),</span></li>
<li><span style="font-size:10pt;background-color:transparent">the value of a key=value pair can be a string literal, not just an identifier: </span><code><span style="font-size:10pt">key="foo"</span></code> or <code><span style="font-size:10pt">key=("foo","bar")</span></code></li></ul>
<span style="background-color:transparent;font-size:10pt">
<div><span style="background-color:transparent;font-size:10pt">Blink IDL also does not support certain recent features of the Web IDL grammar:</span></div>
<div>
<div>
<ul>
<li><span style="font-size:10pt;background-color:transparent">Values that are not identifiers or strings are <i>not</i> supported (the <a href="http://heycam.github.io/webidl/#prod-Other"><code>Other</code></a> production): any non-identifier should simply be quoted (this could be changed to remove the need for quotes, but requires rather lengthy additions to the parser).</span></li></ul>
</div>
</div>
Semantically, only certain extended attributes allow lists</span><span style="background-color:transparent;font-size:10pt">. Similarly, only certain extended attributes allow string literals.</span></div>
<div><br />
</div>
<div><span style="font-size:10pt;background-color:transparent">Extended attributes either take no value, take a required value, or take an optional value.</span></div>
<div>
<p>In the following explanations, (i), (m), (s), (a), (p), (c), and (d) means that a given extended attribute can be specified on interfaces, methods, special operations, attributes, parameters, constants, and dictionaries, respectively. For example, (a,p) means that the IDL attribute can be specified on attributes and parameters.</p>
<p>Note that these restrictions are not enforced by the parser: extended attributes used in unsupported contexts will simply be ignored.</p>
<p>As a rule, we do <i>not</i> add extended attributes to the IDL that are not supported by the compiler (and are thus nops). This is because it makes the IDL misleading: looking at the IDL, it looks like it should do something, but actually doesn't, which is opaque (it requires knowledge of compiler internals). Instead, please place a comment on the preceding line, with the desired extended attribute and a FIXME referring to the relevant bug. For example (back when Bug <a href="https://code.google.com/p/chromium/issues/detail?id=358506"><strike>358506</strike></a> was open)<span style="font-size:10pt;background-color:transparent">:</span></p>
<div class="sites-codeblock sites-codesnippet-block">
<div><code>// FIXME: should be [MeasureAs=Foo] but [MeasureAs] not supported on constants: http://crbug.com/358506</code></div>
<div><code>const unsigned short bar;</code></div>
</div>
<h2><a name="TOC-Naming"></a>Naming</h2>
<p>Extended attributes are named in UpperCamelCase, and are conventionally written as the name of the attribute within brackets, as <span style="color:rgb(0,96,0);font-family:monospace;background-color:transparent;font-size:10pt">[ExampleExtendedAttribute]</span><span style="background-color:transparent;font-size:10pt">, per </span><a href="https://heycam.github.io/webidl/#conventions" style="background-color:transparent;font-size:10pt">Web IDL typographic conventions</a><span style="background-color:transparent;font-size:10pt">.</span></p>
<p>There are a few rules in naming extended attributes:</p>
<ul style="font-size:13px;font-weight:normal"><li>Names should be aligned with the Web IDL spec as much as possible.</li>
<li>Extended attributes for custom bindings are prefixed by "Custom".</li></ul>
<p><span style="background-color:transparent;font-size:10pt">Lastly, please do not confuse "</span><i style="background-color:transparent;font-size:10pt">extended</i><span style="background-color:transparent;font-size:10pt"> attributes", which go inside </span><code style="background-color:transparent;font-size:10pt">[...]</code><span style="background-color:transparent;font-size:10pt"> and modify various IDL elements, and "attributes", which are of the form </span><code style="background-color:transparent;font-size:10pt">attribute foo</code><span style="background-color:transparent;font-size:10pt"> and are interface members.</span></p>
<h2><a name="TOC-Special-cases"></a>Special cases</h2>
<h3><a name="TOC-Constants"></a>Constants</h3>
<p>Only the following (Blink-only) extended attributes apply to constants: <span style="font-size:10pt;color:rgb(0,96,0);font-family:monospace;background-color:transparent">[DeprecateAs],</span><span style="font-size:10pt;background-color:transparent"> </span><span style="font-size:10pt;color:rgb(0,96,0);font-family:monospace;background-color:transparent">[MeasureAs], </span><span style="font-size:10pt;color:rgb(0,96,0);font-family:monospace;background-color:transparent"><code>[RuntimeEnabled],</code> </span><span style="font-size:10pt;background-color:transparent">and </span><code style="font-size:10pt;background-color:transparent">[Reflect]</code><span style="font-size:10pt;background-color:transparent">, and the interface extended attribute </span><code style="font-size:10pt;background-color:transparent">[DoNotCheckConstants]</code><span style="font-size:10pt;background-color:transparent"> affects constants.</span></p>
<h3><a name="TOC-Overloaded-methods"></a>Overloaded methods</h3>
<p>Extended attributes mostly work normally on overloaded methods, affecting only that method (not other methods with the same name), but there are a few exceptions, due to all the methods sharing a single callback.</p>
<p><code>[RuntimeEnabled]</code> works correctly on overloaded methods, both on individual overloads or (if specified on all method with that name) on the entire method (Bug <a href="https://code.google.com/p/chromium/issues/detail?id=339000"><strike>339000</strike></a>).</p>
<p>Note that while <code>[DeprecateAs], [MeasureAs]</code> only affect callback for non-overloaded methods, the logging code is instead put in the method itself for overloaded methods, so these can be placed on the method to log in question.</p>
<p>Extended attributes that affect the callback must be on the <i>last</i> overloaded method, though it is safest to put them on all the overloaded methods, for consistency (and in case they are rearranged or deleted). The source is <a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/bindings/templates/methods.cpp">bindings/templates/methods.cpp</a>, and currently there are no extended attribute that affect the callback (even for overloaded methods).</p>
<h3><a name="TOC-Special-operations-methods-"></a>Special operations (methods)</h3>
<div>Extended attributes on special operations (methods) are largely the same as those on methods generally, though many fewer are used.</div>
<div><br />
</div>
<div>Extended attributes that apply to the whole property (not a specific operation) must be put on the <i>getter</i>, since this is always present. There are currently two of these:</div>
<div><span style="background-color:transparent;font-size:10pt"><code>[Custom=</code></span><span style="background-color:transparent;font-size:10pt"><code>PropertyQuery|</code></span><span style="background-color:transparent;font-size:10pt"><code>PropertyEnumerator]</code> and </span><span style="background-color:transparent;font-size:10pt"><code>[NotEnumerable]</code>.</span></div>
<div>Anonymous special operations default to being implemented by a function named <code>anonymousIndexedGetter</code> etc.</div>
<div><code>[ImplementedAs]</code> can be used if there is an existing Blink function to use to implement the operation, but you do <i>not</i> wish to expose a named operation. Otherwise you can simply put the special keyword in the line of the exposed normal operation.</div>
<div><br />
</div>
<div>For example:</div>
<div>
<div class="sites-codeblock sites-codesnippet-block"><code>[ImplementedAs=item] getter DOMString (unsigned long index);  // Does not add item() to the interface: only an indexed property getter</code></div>
</div>
<div>or:</div>
<div>
<div class="sites-codeblock sites-codesnippet-block"><code>getter DOMString item(unsigned long index);</code><span style="background-color:transparent;font-size:10pt"><code> </code></span><span style="background-color:transparent;font-size:10pt"><code> // Use existing method item() to implement indexed property getter</code></span></div>
</div>
<div><br />
</div>
<div>
<div></div>
</div>
<div>
<div><span style="color:rgb(0,96,0);font-family:monospace;background-color:transparent;font-size:10pt">[ImplementedAs]</span> is also useful if you want an indexed property or named property to use an <i>attribute</i>. For example:<span>    </span></div>
</div>
<div>
<div></div>
</div>
<div class="sites-codeblock sites-codesnippet-block">
<div>
<div><code>attribute DOMString item;</code></div>
<div><code>[ImplementedAs=item] getter DOMString (unsigned long index);</code></div>
</div>
<div><code>[ImplementedAs=setItem] setter DOMString (unsigned long index);</code></div>
<div></div>
</div>
<div><br />
</div>
<div>There is one interface extended attribute that only affects special operations: <code>[OverrideBuiltins]</code>.</div>
<div>The following extended attributes are used on special operations, as on methods generally: <span style="background-color:transparent;font-size:10pt"><code>[RaisesException]</code> and <code>[TreatReturnedNullStringAs]</code>.</span></div>
<h3><a name="TOC-Partial-interfaces"></a>Partial interfaces</h3>
<div>Extended attributes on partial interface members work as normal. However, only the following 4 extended attributes can be used on the partial interface itself; otherwise extended attributes should appear on the main interface definition:</div>
</div>
</div>
<blockquote style="margin:0 0 0 40px;border:none;padding:0px">
<div>
<div>
<div>
<div><code>[Conditional], [</code><span style="background-color:transparent;font-size:10pt"><code>ImplementedAs] </code></span><span style="background-color:transparent;font-size:10pt">and <code>[</code></span><span style="background-color:transparent;font-size:10pt"><code>RuntimeEnabled]</code></span></div>
</div>
</div>
</div>
</blockquote>
<div>
<div>
<div>
<div></div>
<div><span style="background-color:transparent;font-size:10pt">3 of these are used to allow the entire partial interface to be selectively enabled or disabled: </span><code style="background-color:transparent;font-size:10pt">[Conditional] </code><span style="background-color:transparent;font-size:10pt">and <code>[</code></span><span style="background-color:transparent;font-size:10pt"><code>RuntimeEnabled]</code></span><span style="background-color:transparent;font-size:10pt">, and function as if the extended attribute were applied to each <i>member</i> (methods, attributes, and constants). Style-wise, if the entire partial interface should be enabled or disabled, these extended attributes should be used on the partial interface, not on each individual member; this clarifies intent and simplifies editing. However:</span></div>
<div>
<ul><li>If some members should not be disabled, this cannot be used on the partial interface; this is often the case for constants.</li>
<li>If different members should be controlled by different flags, this must be specified individually.</li>
<li>If a flag obviously applies to only one member of a single-member interface (i.e., it is named after that member), the extended attribute should be on the member.</li></ul>
</div>
<div>The remaining extended attribute, <code style="background-color:transparent;font-size:10pt">[</code><span style="background-color:transparent;font-size:10pt"><code>ImplementedAs]</code></span>, allows the implementation of the partial interface to be different than the implementation of the main interface; for members of the partial interface, this acts as if this <code>[ImplementedAs=...]</code> were specified on the interface, for only these members (overriding any existing value). This is stored internally via <a href="#TOC-PartialInterfaceImplementedAs-i-"><code>[PartialInterfaceImplementedAs]</code></a> (see below).</div>
</div>
<h3><a name="TOC-implements"></a>implements</h3>
<div>Extended attributes on members of an implemented interface work as normal. However, only the following 4 extended attributes can be used on the implemented interface itself; otherwise extended attributes should appear on the main (implementing) interface definition:</div>
</div>
</div>
<blockquote style="margin:0 0 0 40px;border:none;padding:0px"><code>[ImplementedAs], [LegacyTreatAsPartialInterface],<br />
[NoInterfaceObject]</code> and <code>[RuntimeEnabled]</code></blockquote>
<div>
<div>
<div><span style="background-color:transparent;font-size:10pt;color:rgb(0,96,0);font-family:monospace">[LegacyTreatAsPartialInterface]</span><span style="background-color:transparent;font-size:10pt"> is part of an ongoing change, as implemented interfaces used to be treated internally as partial interfaces.</span></div>
<div><span style="background-color:transparent;font-size:10pt;color:rgb(0,96,0);font-family:monospace">[ImplementedAs]</span><span style="background-color:transparent;font-size:10pt"> is only necessary for these legacy files: otherwise the class (C++) implementing (IDL) implemented interfaces does not need to be specified, as this is handled in Blink C++.</span></div>
<div><span style="background-color:transparent;font-size:10pt"><br />
</span></div>
<div><code>[RuntimeEnabled]</code> behaves as for partial interfaces.</div>
<div><code>[NoInterfaceObject]</code> is <i>always</i> specified on implemented interfaces.</div>
<h3><a name="TOC-Inheritance"></a>Inheritance</h3>
<div>Extended attributes are generally not inherited: only extended attributes on the interface itself are consulted. However, there are a handful of extended attributes that are inherited (applying them to an ancestor interface applies them to the descendants). These are extended attributes that affect memory management, and currently consists of <code>[ActiveDOMObject]</code> and <code>[DependentLifetime]</code>; the up-to-date list is <a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/bindings/scripts/compute_dependencies.py&amp;q=INHERITED_EXTENDED_ATTRIBUTES" style="background-color:transparent;font-size:10pt">compute_dependencies.INHERITED_EXTENDED_ATTRIBUTES</a>.</div>
<h2><a name="TOC-Standard-Web-IDL-Extended-Attributes"></a>Standard Web IDL Extended Attributes</h2>
<div>These are defined in the <a href="http://heycam.github.io/webidl/#es-extended-attributes" target="_blank">ECMAScript-specific extended attributes</a> section of the <a href="http://heycam.github.io/webidl/" style="background-color:transparent;font-size:10pt">Web IDL spec</a><span style="background-color:transparent;font-size:10pt">, and alter the binding behavior.</span></div>
<div>Unsupported: <code>[ArrayClass], [</code><span style="background-color:transparent;font-size:10pt"><code>ImplicitThis], [</code></span><span style="background-color:transparent;font-size:10pt"><code>LenientThis], [</code></span><span style="background-color:transparent;font-size:10pt"><code>NamedPropertiesObject], </code></span><span style="background-color:transparent;font-size:10pt"><code>[</code></span><span style="background-color:transparent;font-size:10pt"><code>TreatNonCallableAsNull]</code></span></div>
<h3><a name="TOC-Clamp-a-p-"></a>[Clamp] (a, p)</h3>
<div><span style="background-color:transparent;font-size:10pt">Standard: </span><a href="https://heycam.github.io/webidl/#Clamp" style="background-color:transparent;font-size:10pt">[Clamp]</a></div>
<div>
<div>
<p>Summary: [Clamp] indicates that when an ECMAScript Number is converted to the IDL type, out of range values will be clamped to the range of valid values, rather than using the operators that use a modulo operation (ToInt32, ToUint32, etc.).</p>
<p>Usage: The [Clamp] extended attribute MUST NOT appear on a read only attribute, or an attribute, operation argument or dictionary member that is not of an integer type.</p>
<p>[Clamp] can be specified on writable attributes:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {
    [Clamp] attribute unsigned short attributeName;
};
</pre>
<p>[Clamp] can be specified on extended attributes or methods arguments:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface GraphicsContext {
    void setColor(octet red, octet green, octet blue);
    void setColorClamped([Clamp] octet red, [Clamp] octet green, [Clamp] octet blue);
};
</pre>
<p>Calling the non-[Clamp] version of setColor() uses ToUint8 to coerce the Numbers to octets. Hence calling context.setColor(-1, 255, 257) is equivalent to calling setColor(255, 255, 1).</p>
<p>Calling the [Clamp] version of setColor() uses clampTo() to coerce the Numbers to octets. Hence calling context.setColor(-1, 255, 257) is equivalent to calling setColorClamped(0, 255, 255).</p>
<h3><a name="TOC-Constructor-i-"></a>[Constructor] (i)</h3>
<p><span style="font-size:10pt">Standard: </span><a href="http://heycam.github.io/webidl/#Constructor" style="font-size:10pt">[Constructor]</a><br />
</p>
<p>Summary: <code>[Constructor]</code> indicates that the interface should have a constructor, i.e. "new XXX()". </p>
<p><span style="font-size:10pt">Note: The Blink-specific <code>[CallWith]</code> and <code>[RaisesException]</code> extended attributes, specified on an interface, add information when the constructor callback is called.</span></p>
<p>Usage: <code>[Constructor]</code> can be specified on interfaces:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Constructor(float x, float y, DOMString str),
]
interface XXX {
    ...
};
</pre>
<p>In the above, <code>[Constructor(float x, float y, DOMString str)]</code> means that the interface has a constructor and the constructor signature is <code>(float x, float y, DOMString str)</code>. Specifically, JavaScript can create a DOM object of type XXX by the following code:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">var x = new XXX(1.0, 2.0, "hello");</pre>
<p>The Blink implementation must have the following method as a constructor callback:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">PassRefPtr&lt;XXX&gt; XXX::create(float x, float y, String str)
{
    ...;
}</pre>
<p>As shorthand, a constructor with no arguments can be written as <span style="background-color:transparent;font-size:10pt">[Constructor] instead of </span><span style="background-color:transparent;font-size:10pt">[Constructor()]</span><span style="background-color:transparent;font-size:10pt">.</span></p>
<p><span style="font-size:10pt">Whether you should allow an interface to have constructor depends on the spec of the interface.</span></p>
<p>Note: Currently [Constructor(...)] does not yet support optional arguments w/o defaults. It just supports optional [Default=Undefined].</p>
<h3><a name="TOC-EnforceRange-a-p-"></a>[EnforceRange] (a, p)</h3>
Standard: <a href="http://heycam.github.io/webidl/#EnforceRange">[EnforceRange]</a><br />
<p>Summary: [EnforceRange] indicates that when an ECMAScript Number is converted to the IDL type, out of range values will result in a TypeError exception being thrown.</p>
<p>Usage: The [EnforceRange] extended attribute MUST NOT appear on a read only attribute, or an attribute, operation argument or dictionary member that is not of an integer type.</p>
<p>[EnforceRange] can be specified on writable attributes:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {
    [EnforceRange] attribute unsigned short attributeName;
};
</pre>
[EnforceRange] can be specified on extended attributes on methods arguments:
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface GraphicsContext {
    void setColor(octet red, octet green, octet blue);
    void setColorEnforced([EnforceRange] octet red, [EnforceRange] octet green, [EnforceRange] octet blue);
};
</pre>
Calling the non-[EnforceRange] version of setColor() uses ToUint8 to coerce the Numbers to octets. Hence calling context.setColor(-1, 255, 257) is equivalent to calling setColor(255, 255, 1).
<p>Calling the [EnforceRange] version of setColorEnforced() with an out of range value, such as -1, 256, or Infinity will result in a TypeError exception.</p>
<p><br />
</p>
<h3><a name="TOC-NamedConstructor-i-"></a>[NamedConstructor] (i)</h3>
<p style="font-size:13px;font-weight:normal"><span style="font-size:10pt">Standard: </span><a href="http://heycam.github.io/webidl/#NamedConstructor" style="font-size:10pt">[NamedConstructor]</a></p>
<p style="font-size:13px;font-weight:normal">Summary: If you want to allow JavaScript to create a DOM object of XXX using a different name constructor (i.e. allow JavaScript to create an XXX object using "new YYY()", where YYY != XXX), you can use <code>[NamedConstructor]</code>.</p>
<p style="font-size:13px;font-weight:normal">Usage: The possible usage is <code>[NamedConstructor=YYY(...)]</code>. Just as with constructors, an empty argument list can be omitted, as: <span style="color:rgb(0,96,0);font-family:monospace;background-color:transparent;font-size:10pt">[NamedConstructor=YYY]</span><span style="background-color:transparent">. </span><code style="background-color:transparent">[NamedConstructor]</code><span style="background-color:transparent"> can be specified on interfaces. The spec allows multiple named constructors, but the Blink IDL compiler currently only supports at most one.</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    NamedConstructor=Audio(DOMString data),
] interface HTMLAudioElement {
    ...
};
</pre>
<p style="font-size:13px;font-weight:normal">The semantics are the same as <code>[Constructor]</code>, except that the name changes: JavaScript can make a DOM object <span style="background-color:transparent;font-size:10pt">by <code>new Audio()</code> instead of </span><span style="background-color:transparent">by <code>new HTMLAudioElement()</code>.</span></p>
<p style="font-size:13px;font-weight:normal">Whether you should allow an interface to have a named constructor or not depends on the spec of each interface.</p>
<h3><a name="TOC-NewObject-m-"></a><font size="3">[NewObject] (m)</font></h3>
<p><font size="2">Standard: <a href="http://heycam.github.io/webidl/#NewObject">[NewObject]</a></font></p>
<p>Summary: Signals that a method that returns an object type always returns a new object.</p>
<p>This attribute has no effect on code generation and should simply be used in Blink IDL files if the specification uses it.</p>
<h3><a name="TOC-NoInterfaceObject-i-"></a>[NoInterfaceObject] (i)</h3>
<p style="font-size:13px;font-weight:normal">Standard: <a href="http://heycam.github.io/webidl/#NoInterfaceObject" style="font-size:10pt">[NoInterfaceObject]</a></p>
<p style="font-size:13px;font-weight:normal">Summary: If the <code>[NoInterfaceObject]</code> extended attribute appears on an interface, it indicates that an interface object will not exist for the interface in the ECMAScript binding. See also the standard<span style="background-color:transparent;font-size:10pt"> <code>[Exposed=xxx]</code> extended attribute; these two do <i>not</i> change the generated code for the interface itself.</span></p>
<p style="font-size:13px;font-weight:normal">Note that every interface has <span style="background-color:transparent;font-size:10pt">a corresponding property on the ECMAScript global object, <i>except:</i></span></p>
<ul style="font-size:13px;font-weight:normal"><li>callback interfaces with no constants, and</li>
<li>non-callback interface with the <code>[NoInterfaceObject]</code> extended attribute,</li></ul>
<p style="font-size:13px;font-weight:normal">Usage: <code>[NoInterfaceObject]</code> can be specified on interfaces.</p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    NoInterfaceObject,
] interface XXX {
    ...
};</pre>
<p>Note that <code>[NoInterfaceObject]</code> <b>MUST</b> be specified on testing interfaces, as follows:</p>
<p>
</p>
<div class="sites-codeblock sites-codesnippet-block">
<code>[<br />
    NoInterfaceObject,  // testing interfaces do not appear on global objects<br />
] interface TestingInterfaceX {<br />
    ...<br />
};</code></div>
<div>
<h3><a name="TOC-Global-and-PrimaryGlobal-i-"></a>[Global] and [PrimaryGlobal] (i)</h3>
<div><span style="font-size:13px;background-color:transparent">Standard</span>: <a href="http://heycam.github.io/webidl/#Global">[Global]</a></div>
<div><br />
</div>
<div>Summary: The [Global] and [PrimaryGlobal] extended attributes can be used to give a name to one or more global interfaces, which can then be referenced by the [Exposed] extended attribute.</div>
<div><br />
</div>
<div>
<div>These extended attributes must either take no arguments or take an identifier list.</div>
<div><br />
</div>
<div>If the [Global] or [PrimaryGlobal] extended attribute is declared with an identifier list argument, then those identifiers are the interface’s global names; otherwise, the interface has a single global name, which is the interface's identifier.</div>
</div>
<h3><a name="TOC-Exposed-i-m-a-c-"></a>[Exposed] (i, m, a, c)</h3>
<p><span style="font-size:13px;background-color:transparent">Standard</span>: <a href="http://heycam.github.io/webidl/#Exposed">[Exposed]</a></p>
<p>Summary: Indicates on which global object or objects (e.g., Window, WorkerGlobalScope) the interface property is generated, i.e., in which global scope or scopes an interface exists. This is primarily of interest for the constructor, i.e., the <a href="https://heycam.github.io/webidl/#es-interface-call" style="background-color:transparent;font-size:10pt">interface object Call method</a><span style="background-color:transparent;font-size:10pt">. Global context defaults to Window (the primary global scope) if not present, overridden by standard extended attribute </span><code style="background-color:transparent;font-size:10pt">[NoInterfaceObject]</code><span style="background-color:transparent;font-size:10pt"> (the value of the property on the global object corresponding to the interface is called the </span><b style="background-color:transparent;font-size:10pt">interface object</b><span style="background-color:transparent;font-size:10pt">), which results in no interface property being generated.</span></p>
<p><span style="background-color:transparent;font-size:10pt">As with </span><span style="background-color:transparent;font-size:10pt;color:rgb(0,96,0);font-family:monospace">[NoInterfaceObject]</span><span style="background-color:transparent;font-size:10pt"> d</span><span style="background-color:transparent;font-size:10pt">oes not affect generated code for the interface itself, only the code for the corresponding global object. A partial interface is generated at build time, containing an attribute for each interface property on that global object.</span></p>
<p>All non-callback interfaces without <span style="color:rgb(0,96,0);font-family:monospace;background-color:transparent;font-size:10pt">[NoInterfaceObject]</span><span style="background-color:transparent;font-size:10pt"> have a corresponding interface property on the global object. Note that in the Web IDL spec, callback interfaces with constants also have interface properties, but in Blink callback interfaces only have methods (no constants or attributes), so this is not applicable. </span><code style="background-color:transparent;font-size:10pt">[Exposed]</code><span style="background-color:transparent;font-size:10pt"> can be used with different values to indicate on which global object or objects the property should be generated. Valid values are:</span></p>
</div>
<p>
</p>
<div>
<ul><li><code>Window</code></li>
<li><code><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#the-workerglobalscope-common-interface">Worker</a></code></li>
<li><code><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#dedicated-workers-and-the-dedicatedworkerglobalscope-interface">SharedWorker</a></code></li>
<li><code><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#shared-workers-and-the-sharedworkerglobalscope-interface">DedicatedWorker</a></code></li>
<li><code><a href="https://rawgithub.com/slightlyoff/ServiceWorker/master/spec/service_worker/index.html#service-worker-global-scope">ServiceWorker</a></code></li></ul>
<div>For reference, see <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.1" style="background-color:transparent;font-size:10pt">ECMAScript 5.1: 15.1 The Global Object</a><span style="background-color:transparent;font-size:10pt"> (</span><a href="http://es5.github.io/#x15.1" style="background-color:transparent;font-size:10pt">annotated</a><span style="background-color:transparent;font-size:10pt">),</span><span style="background-color:transparent;font-size:10pt"> </span><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html" style="background-color:transparent;font-size:10pt">HTML: 10 Web workers</a><span style="background-color:transparent;font-size:10pt">, </span><a href="http://dev.w3.org/html5/workers/" style="background-color:transparent;font-size:10pt">Web Workers</a><span style="background-color:transparent;font-size:10pt">, and </span><a href="https://rawgithub.com/slightlyoff/ServiceWorker/master/spec/service_worker/index.html" style="background-color:transparent;font-size:10pt">Service Workers</a><span style="background-color:transparent;font-size:10pt"> specs.</span></div>
<p>It is possible to have the global constructor generated on several interfaces by listing them, e.g. <code>[Exposed=(Window,WorkerGlobalScope)]</code>.<br />
</p>
<p>Usage: <code>[Exposed]</code> can be specified on interfaces that do not have the <code>[NoInterfaceObject]</code> extended attribute.</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Exposed=DedicatedWorker,
] interface XXX {
    ...
};

[
    Exposed=(Window,Worker),
] interface YYY {
    ...
};</pre>
</div>
<div><span style="font-size:10pt;background-color:transparent">Exposed can also be specified with a method, attribute and constant.</span></div>
<div><br />
</div>
<div>As a Blink-specifie extension, we allow Exposed(Arguments) form, such as <font face="courier new, monospace"><code>[Exposed(Window Feature1, DedicatedWorker Feature2)]</code></font>. You can use this form to vary the exposing global scope based on runtime enabled features. For example, <code>[Exposed(Window Feature1, Worker Feature2)]</code> exposes the qualified element to Window if "Feature1" is enabled and to Worker if "Feature2" is enabled.</div>
<h3><a name="TOC-OverrideBuiltins-i-"></a>[OverrideBuiltins] (i)</h3>
<div><span style="font-size:13px;background-color:transparent">Standard</span>: <a href="http://heycam.github.io/webidl/#OverrideBuiltins">[OverrideBuiltins]</a></div>
<div><br />
</div>
<div>Summary: Affects named property operations, making named properties shadow built-in properties of the object.</div>
<h3><a name="TOC-PutForwards-a-"></a>[PutForwards] (a)</h3>
<p>Standard: <a href="https://heycam.github.io/webidl/#PutForwards">[PutForwards]</a></p>
<p>Summary: Indicates that assigning to the attribute will have specific behavior. Namely, the assignment is “forwarded” to the attribute (specified by the extended attribute argument) on the object that is currently referenced by the attribute being assigned to.</p>
<p>Usage: Can be specified on readonly attributes:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[PutForwards=href] readonly attribute Location location;
</pre>
<span style="font-size:13px;font-weight:normal">On setting the location attribute, the assignment will be forwarded to the Location.href attribute.</span>
<h3><a name="TOC-Replaceable-a-"></a>[Replaceable] (a)</h3>
<p>Standard: <a href="http://heycam.github.io/webidl/#Replaceable" style="font-size:10pt">​[Replaceable]</a><br />
</p>
<p>Summary: <code>[Replaceable]</code> controls if a given read only regular attribute is "replaceable" or not.</p>
<p>Usage: <code>[Replaceable]</code> can be specified on attributes:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface DOMWindow {
    [Replaceable] readonly attribute long screenX;
};
</pre>
<p><code>[Replaceable]</code> is <i>incompatible</i> with <code>[Custom]</code> and <code>[Custom=Setter]</code> (because <span style="background-color:transparent;font-size:10pt">replaceable attributes have a single interface-level </span><span style="background-color:transparent;font-size:10pt">setter callback, rather than individual attribute-level callbacks); if you need custom binding for a replaceable attribute, remove <code>[Replaceable]</code> and <code>readonly</code>.</span></p>
<p><span style="background-color:transparent;font-size:10pt">Intuitively, "replaceable" means that you can set a new value to the attribute without overwriting the original value. If you delete the new value, then the original value still remains.</span></p>
<p>Specifically, a writable attribute, without <code>[Replaceable]</code>, behaves as follows: </p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">window.screenX; // Evaluates to 0 
window.screenX = "foo"; 
window.screenX; // Evaluates to "foo" 
delete window.screenX; 
window.screenX; // Evaluates to undefined. 0 is lost.
</pre>
<p><span style="font-size:10pt">A read only attribute, with <code>[Replaceable]</code>, behaves as follows: </span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">window.screenX; // Evaluates to 0 
window.screenX = "foo"; 
window.screenX; // Evaluates to "foo" 
delete window.screenX; 
window.screenX; // Evaluates to 0. 0 remains.
</pre>
<p><span style="font-size:10pt">Whether <code>[Replaceable]</code> should be specified or not depends on the spec of each attribute.</span></p>
<h3><a name="TOC-SameObject-m-"></a><font size="3">[SameObject] (m)</font></h3>
<p><font size="2">Standard: <a href="http://heycam.github.io/webidl/#SameObject">[SameObject]</a></font></p>
<p>Summary: Signals that a readonly attribute that returns an object type always returns the same object.</p>
<p>This attribute has no effect on code generation and should simply be used in Blink IDL files if the specification uses it.</p>
<h3><a name="TOC-TreatNullAs-a-p-TreatUndefinedAs-a-p-"></a>[TreatNullAs] (a,p), [TreatUndefinedAs] (a,p)</h3>
<div style="font-size:13px;font-weight:normal">Standard: <a href="http://heycam.github.io/webidl/#TreatNullAs" style="background-color:transparent">[TreatNullAs]</a>. <a href="http://heycam.github.io/webidl/#TreatUndefinedAs" style="background-color:transparent">TreatUndefinedAs</a> has been been removed from the spec.
<p>Summary: They control the behavior when a JavaScript null or undefined is passed to a DOMString attribute or parameter.</p>
Implementation: <b>Non-standard:</b> Web IDL specifies the <code>EmptyString</code> identifier for both these extended attributes, and <code>Null</code> and <code>Missing</code> for <code>TreatUndefinedAs</code>. <span style="font-size:10pt">Blink uses the <code>NullString</code> identifier instead of <code>EmptyString</code> which yields a Blink null string, corresponding to JavaScript <b>null</b>, for which both </span><span style="font-size:10pt"><code>String::IsEmpty()</code> and <code>String::IsNull()</code> return true, instead of the empty string <code>""</code>, which is empty but not null. This is for performance reasons; see <a href="https://docs.google.com/a/google.com/document/d/1kOCUlJdh2WJMJGDf-WoEQhmnjKLaOYRbiHz5TiGJl14/edit">Strings in Blink</a> for reference. It also does not implement </span><span style="font-size:10pt"><code>TreatUndefinedAs=Null</code> or </span><span style="font-size:10pt"><code>TreatUndefinedAs=Missing</code></span><span style="font-size:10pt">.</span></div>
<div style="font-size:13px;font-weight:normal"><span style="font-size:10pt"><br />
</span></div>
<div style="font-size:13px;font-weight:normal"><span style="font-size:10pt">Further, both extended attributes are both overloaded for indexed setters and named setters, in which case they take a method name (?), though this usage is rare.</span></div>
<div style="font-size:13px;font-weight:normal">
<p><span style="font-size:10pt">Usage: The possible usage is <code>[TreatNullAs=NullString]</code> or <code>[</code></span><span style="color:rgb(0,96,0);font-family:monospace;font-size:10pt">TreatNullAs=NullString, </span><code style="font-size:10pt">TreatUndefinedAs=NullString]</code><span style="font-size:10pt">. They can be specified on <code>DOMString</code> attributes or <code>DOMString</code> parameters only:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[TreatNullAs=NullString] attribute DOMString str;
void func([TreatNullAs=NullString, TreatUndefinedAs=NullString] DOMString str);
</pre>
[TreatNullAs=NullString] indicates that if a JavaScript null is passed to the attribute or parameter, then it is converted to a Blink null string, for which both String::IsEmpty() and String::IsNull() will return true. Without [TreatNullAs=NullString], a JavaScript null is converted to a Blink string "null".
<p>[TreatNullAs=NullString] in Blink corresponds to [TreatNullAs=EmptyString] in the Web IDL spec. Unless the spec specifies [TreatNullAs=EmptyString], you should not specify [TreatNullAs=NullString] in Blink.</p>
<p>[TreatUndefinedAs=NullString] indicates that if a JavaScript undefined is passed to the attribute or parameter, then it is converted to a Blink null string, for which both String::IsEmpty() and String::IsNull() will return true. Without [TreatUndefinedAs=NullString], a JavaScript undefined is converted to a Blink string "undefined".</p>
<p>[TreatUndefinedAs=NullString] in Blink corresponds to [TreatUndefinedAs=EmptyString] in the Web IDL spec. Unless the spec specifies [TreatUndefinedAs=EmptyString], you should not specify [TreatUndefinedAs=NullString] in Blink.</p>
</div>
<h3><a name="TOC-Unforgeable-m-a-"></a>[Unforgeable] (m,a)</h3>
<p>Standard: <a href="http://heycam.github.io/webidl/#Unforgeable" style="font-size:10pt">[Unforgeable]</a><br />
</p>
<p><span style="font-size:10pt">Summary: Makes interface members unconfigurable and also controls where the member is defined.</span></p>
<p>Usage: Can be specified on methods, attributes or interfaces:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[Unforgeable] void func();
[Unforgeable] attribute DOMString str;
[Unforgeable] interface XXX { ... };</pre>
<p>By default, interface members are configurable (i.e. you can modify a property descriptor corresponding to the member and also you can delete the property).  [Unforgeable] makes the member unconfiguable so that you cannot modify or delete the property corresponding to the member.</p><p>[Unconfiguable] changes where the member is defined, too.  <span style="font-size:10pt;background-color:transparent">By default, attribute getters/setters and methods are defined on a prototype chain.  [Unforgeable] defines the member on the instance object instead of the prototype object.</span></p>
<p>Implementation: <b>Non-standard:</b> [Unforgeable] for attributes has an unspeced side-effect that it makes the property data-type property ({writable: ..., value: ...}) although it must be accessor-type property ({get: ..., set: ...}).  (Bug <a href="https://code.google.com/p/chromium/issues/detail?id=497616" target="_blank">497616</a>)</p>
</div>
</div>
</div>
<div>
<h2><a name="TOC-Common-Blink-specific-IDL-Extended-Attributes"></a>Common Blink-specific IDL Extended Attributes</h2>
<div>
<p>These extended attributes are widely used.</p>
<h3><a name="TOC-ActiveDOMObject-i-"></a>[ActiveDOMObject] (i)</h3>
<p><span style="font-size:10pt">Summary: <code>[ActiveDOMObject]</code> indicates that a given DOM object should be kept alive as long as the DOM object has pending activities.</span></p>
<p>Usage: <code>[ActiveDOMObject]</code> can be specified on interfaces, and <b>is inherited</b>:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    ActiveDOMObject,
] interface Foo {
    ...
};</pre>
<p>If an interface X has <code>[ActiveDOMObject]</code> and an interface Y inherits the interface X, then the interface Y will also have [ActiveDOMObject]. For example</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    ActiveDOMObject,
] interface Foo {};

interface Bar : Foo {};  // inherits [ActiveDOMObject] from Foo<br /></pre>
<p>If a given DOM object needs to be kept alive as long as the DOM object has pending activities, you need to specify [ActiveDOMObject]. For example, [ActiveDOMObject] can be used when the DOM object is expecting events to be raised in the future.</p>
<p>If you use [ActiveDOMObject], the corresponding Blink class needs to inherit ActiveDOMObject. For example, in case of XMLHttpRequest, core/xml/XMLHttpRequest.h would look like this: </p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">class XMLHttpRequest : public ActiveDOMObject
{
    ...; 
};<br /></pre>
<p><span style="font-size:10pt">Then you need to implement the virtual methods of the ActiveDOMObject class, e.g. contextDestroyed(), canSuspend(), suspend(), resume() and stop().</span></p>
<h3><a name="TOC-PerWorldBindings-m-a-"></a><b><font size="3">[PerWorldBindings] (m, a)</font></b></h3>
<p><span style="font-size:10pt">Summary: Generates faster bindings code by avoiding check for isMainWorld().</span></p>
<p><span style="font-size:10pt">This optimization only makes sense for wrapper-types (i.e. types that have a corresponding IDL interface), as we don't need to check in which world we are for other types. Note that this optimization works by generating 2 separate code paths for the main world and for isolated worlds. As a consequence, using this extended attribute will increase binary size and we should refrain from overusing it.</span></p>
<h3><a name="TOC-LogActivity-m-a-"></a>[LogActivity] (m, a)</h3>
<div>Summary: logs activity, using <code>V8PerContextData::activityLogger</code>. Widely used. Interacts with <code>[PerWorldBindings], [LogAllWorlds]</code>.</div>
<div><br />
</div>
<div>Usage:</div>
<div>
<div>Valid values for attributes are:</div>
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><code>GetterOnly, SetterOnly</code><span style="background-color:transparent;line-height:1;font-size:10pt"><code>, (no value)</code></span></div>
<div>
<div></div>
</div>
</div>
Valid values for methods are:
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><font color="#006000" face="monospace">(no value)</font></div>
</div>
</div>
<div><span style="background-color:transparent;font-size:10pt">For methods all calls are logged, and by default for attributes all access (calls to getter or setter) are logged, but this can be restricted to just read (getter) or just write (setter).</span></div>
</div>
<div>
<h3><a name="TOC-CallWith-m-a-"></a>[CallWith] (m, a)</h3>
<div>
<h3><a name="TOC-SetterCallWith-a-"></a>[SetterCallWith] (a)</h3>
</div>
<div>
<h3><a name="TOC-ConstructorCallWith-i-"></a>[ConstructorCallWith] (i)</h3>
<div>
<div></div>
</div>
</div>
<div><span style="background-color:transparent;font-size:10pt">Summary: </span><code style="background-color:transparent;font-size:10pt">[CallWith]</code><span style="background-color:transparent;font-size:10pt"> indicates that the bindings code calls the Blink implementation with additional information.</span></div>
</div>
<div><span style="background-color:transparent;font-size:10pt">Each value changes the signature of the Blink methods by adding an additional parameter to the head of the parameter list, such as </span><span style="background-color:transparent;font-size:10pt"><code>&amp;state</code> for <code>[CallWith=</code></span><span style="background-color:transparent;font-size:10pt"><code>ScriptState]</code></span><span style="background-color:transparent;font-size:10pt">.</span></div>
<div><span style="font-size:10pt;background-color:transparent">Multiple values can be specified e.g. <code>[CallWith=</code></span><code style="background-color:transparent">ScriptState|ScriptArguments]</code><span style="background-color:transparent">. The order of the values in the IDL file doesn't matter: the generated parameter list is always in a fixed order (specifically </span><span style="font-size:10pt;background-color:transparent"><code>&amp;state,</code></span><span style="font-size:10pt;background-color:transparent"><code> scriptContext,</code></span><span style="font-size:10pt;background-color:transparent"><code> scriptArguments.release()</code>, if present, corresponding to </span><span style="font-size:10pt;background-color:transparent"><code>ScriptState, </code></span><span style="background-color:transparent"><code>ScriptExecutionContext,</code></span><span style="font-size:10pt;background-color:transparent"><code> ScriptArguments</code>, respectively).</span></div>
<div><span style="background-color:transparent">There are also three rarely used values: </span><code style="background-color:transparent">ActiveWindow, FirstWindow, ThisValue</code><span style="background-color:transparent">.</span></div>
<div><code>[SetterCallWith]</code> applies to attributes, and only affects the signature of the setter; this is only used in Location.idl, with <code>ActiveWindow&amp;</code><code>FirstWindow</code>.<br />
<p style="font-size:13px;font-weight:normal">Syntax:<br />
<span style="font-size:10pt"><font face="courier new, monospace">CallWith=</font></span><span style="font-family:courier new,monospace;background-color:transparent;font-size:10pt">ScriptState|</span><span style="font-family:courier new,monospace;font-size:10pt;background-color:transparent">ScriptExecutionContext|ScriptArguments|ActiveWindow|FirstWindow|ThisValue</span></p>
<div>
<div style="font-size:13px;font-weight:normal"><b style="font-size:10pt">[CallWith=</b><b style="font-size:10pt">ScriptState] (m) (a*)</b></div>
<p style="font-size:13px;font-weight:normal">[CallWith=ScriptState] is used in a number of places for methods.</p>
<p style="font-size:13px;font-weight:normal">[CallWith=ScriptState] <i>can</i> be used for attributes, but is not used in real IDL files.</p>
<p style="font-size:13px;font-weight:normal"><span style="font-size:10pt">IDL example:</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface Example {
    [CallWith=ScriptState] attribute DOMString str;
    [CallWith=ScriptState] DOMString func(boolean a, boolean b);
};    </pre>
<div style="font-size:13px;font-weight:normal">C++ Blink function signatures:<br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">String Example::str(ScriptState* state);
String Example::func(ScriptState* state, bool a, bool b); </pre>
</div>
<p><b>[CallWith=ExecutionContext] (m,a)</b></p>
<p><span style="font-size:10pt">IDL example:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface Example {
    [CallWith=ExecutionContext] attribute DOMString str;
    [CallWith=ExecutionContext] DOMString func(boolean a, boolean b);
};    </pre>
<div>C++ Blink function signatures:<br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">String Example::str(ExecutionContext* context);
String Example::func(ExecutionContext* context, bool a, bool b);</pre>
</div>
<p>You can retrieve the document and frame from a ExecutionContext*.</p>
<p style="font-size:13px;font-weight:normal"><b style="font-size:10pt">[CallWith=</b><b style="font-size:10pt">ScriptArguments] (m)</b></p>
<p style="font-size:13px;font-weight:normal"><span style="font-size:10pt">IDL example:</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface Example {
    [CallWith=ScriptState] DOMString func(boolean a, boolean b);
};    </pre>
<div style="font-size:13px;font-weight:normal">C++ Blink function signature:<br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">String Example::func(ScriptArguments* arguments, bool a, bool b); </pre>
<div><b><i>(rare CallWith values)</i></b></div>
<h4><a name="TOC-CallWith-ActiveWindow-FirstWindow-m-a-"></a>[CallWith=ActiveWindow&amp;FirstWindow] (m) (a*)</h4>
<p>FIXME: document!</p>
<p>Used only in one place (Location.idl), for methods and in [SetterCallWith]. Generally used together.</p>
<h4><a name="TOC-CallWith-ThisValue-m-"></a>[CallWith=ThisValue] (m)</h4>
<p>[CallWith=ThisValue] only applies to methods in callback interfaces, and is used in only one place (CSSVariablesMapForEachCallback.idl).</p>
<p style="font-size:13px;font-weight:normal"><span style="font-size:10pt">IDL example:</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">callback interface Example {
    [CallWith=ThisValue] boolean func(boolean a, boolean b);
};    </pre>
<div style="font-size:13px;font-weight:normal">C++ Blink function signature:<br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">bool Example::func(ScriptValue thisValue, bool a, bool b);
</pre>
</div>
<p>Note that [CallWith=...] arguments are added at the head of XXX::create(...)'s arguments, and the ExceptionCode argument is added at the tail of XXX::create(...)'s arguments.</p>
<h4><a name="TOC-ConstructorCallWith-i-1"></a>[ConstructorCallWith] (i)</h4>
<p>Analogous to [CallWith], but applied to interfaces with constructors, and takes different values.</p>
<p>If [Constructor] is specified on an interface, [ConstructorCallWith] can be also specified to refine the arguments passed to the callback:</p>
</div>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Constructor(float x, float y, DOMString str),
    ConstructorCallWith=Document|ExecutionContext,
]
interface XXX {
    ...
};</pre>
<p><span style="font-size:10pt">Then XXX::create(...) can have the following signature <b>FIXME outdated</b>:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">PassRefPtr&lt;XXX&gt; XXX::create(ScriptExecutionContext* context, ScriptState* state, float x, float y, String str)
{
    ...;
}</pre>
<p>You can retrieve document or frame from ScriptExecutionContext.</p>
</div>
<div>
<h3><a name="TOC-Custom-i-m-s-a-"></a>[Custom] (i, m, s, a)</h3>
<p><span style="font-size:10pt">Summary: They allow you to write bindings code manually as you like: full bindings for methods and attributes, certain functions for interfaces.</span></p>
<p>Custom bindings are <i><b>strongly discouraged.</b> </i>They <span style="background-color:transparent;font-size:10pt">are likely to be buggy, a source of security holes, and represent a significant maintenance burden. Before using <code>[Custom]</code>, you should doubly consider if you really need custom bindings. You are recommended to modify code generators and add specialized extended attributes or special cases if necessary to avoid using <code>[Custom]</code>.</span></p>
<p>Usage: <code>[Custom]</code><span style="font-size:13.3333330154419px;background-color:transparent"> </span><span style="font-size:10pt;background-color:transparent">can be specified on methods or attributes. </span><span style="color:rgb(0,96,0);font-family:monospace;font-size:13.3333330154419px;background-color:transparent">[Custom=CallEpilogue]</span><span style="font-size:13.3333330154419px;background-color:transparent"> </span><span style="font-size:10pt;background-color:transparent">can be specified on methods. </span><code style="font-size:10pt;background-color:transparent">[Custom=Getter]</code><span style="font-size:10pt;background-color:transparent"> and </span><code style="font-size:10pt;background-color:transparent">[Custom=Setter]</code><span style="font-size:10pt;background-color:transparent"> can be specified on attributes. </span><code style="font-size:10pt;background-color:transparent">[Custom=A|B]</code><span style="font-size:10pt;background-color:transparent"> can be specified on interfaces, with various values (see below).</span></p>
<p><span style="background-color:transparent;font-size:10pt">On read only attributes (that are not </span><code style="background-color:transparent;font-size:10pt">[Replaceable]</code><span style="background-color:transparent;font-size:10pt">), </span><code style="background-color:transparent;font-size:10pt">[Custom]</code><span style="background-color:transparent;font-size:10pt"> is equivalent to </span><code style="background-color:transparent;font-size:10pt">[Custom=Getter]</code><span style="background-color:transparent;font-size:10pt"> (since there is no setter) and </span><code style="background-color:transparent;font-size:10pt">[Custom=Getter]</code><span style="background-color:transparent;font-size:10pt"> is preferred.</span></p>
<p>The bindings generator largely <i>ignores</i> the specified type information of <code>[Custom]</code> members (signature of methods and type of attributes), but they must be valid types. It is best if the signature exactly matches the spec, but if one of the types is an interface that is not implemented, you can use <code><a href="https://heycam.github.io/webidl/#idl-object">object</a></code> as the type instead, to indicate "unspecified object type".</p>
<p><code>[Replaceable]</code> is <i>incompatible</i> with <code>[Custom]</code> and <code>[Custom=Setter]</code> (because <span style="background-color:transparent;font-size:10pt">replaceable attributes have a single interface-level </span><span style="background-color:transparent;font-size:10pt">setter callback, rather than individual attribute-level callbacks); if you need custom binding for a replaceable attribute, remove <code>[Replaceable]</code> and <code>readonly</code>.</span></p>
<div class="sites-codeblock sites-codesnippet-block">
<div><code>[Custom] void func();</code></div>
<div><code>[Custom] attribute DOMString str1;</code></div>
<div><code>[Custom=Getter] readonly attribute DOMString str2;</code></div>
<div><code>[Custom=Setter] attribute DOMString str3;</code></div>
</div>
<p>Before explaining the details, let us clarify the relationship of these IDL attributes.</p>
<ul><li><span style="font-size:10pt"><code>[Custom]</code> on a method indicates that you can write V8 custom bindings for the method.</span></li>
<li><span style="color:rgb(0,96,0);font-family:monospace;font-size:13.3333330154419px">[Custom=CallEpilogue]</span><span style="font-size:13.3333330154419px"> on a method indicates that the normal code is generated for the method, but with an extra call to an </span>auxiliary<span style="font-size:13.3333330154419px"> custom bindings callback at the end.</span></li>
<li><span style="font-size:10pt"><code>[Custom=Getter]</code> or <code>[Custom=Setter]</code> on an attribute means custom bindings for the attribute getter or setter.</span></li>
<li><span style="font-size:10pt"><code>[Custom]</code> on an attribute means custom bindings for both the getter and the setter</span></li></ul>
<span style="font-size:10pt">
<div><span style="font-size:10pt">Methods:</span></div>
<div>
<pre style="font-size:13.3333330154419px;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">interface XXX {
  [Custom] void func();
  [Custom=CallEpilogue] void func2();
};</pre>
<div><br />
</div>
</div>
You can write custom bindings in Source/bindings/v8/custom/V8XXXCustom.cpp:</span><br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">void V8XXX::funcMethodCustom(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)
{
    ...;
}

void V8XXX::func2MethodEpilogueCustom(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info, V8XXX* impl)
{
    ...;
}</pre>
<span style="font-size:10pt">Attribute getter:</span>
<pre style="font-size:10pt;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {
    [Custom=Getter] attribute DOMString str;
};</pre>
<span style="font-size:10pt">You can write custom bindings in </span>Source<span style="font-size:10pt">/bindings/v8/custom/V8XXXCustom.cpp:</span><br />
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">void V8XXX::strAttributeGetterCustom(const v8::PropertyCallbackInfo&lt;v8::Value&gt;&amp; info)
{
    ...;
}
</pre>
<span style="font-size:10pt">Attribute setter:</span>
<pre style="font-size:10pt;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {
    [Custom=Setter] attribute DOMString str;
};</pre>
<p>You can write custom bindings in Source/bindings/v8/custom/V8XXXCustom.cpp:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">void V8XXX::strAttributeSetterCustom(v8::Local&lt;v8::Value&gt; value, const v8::PropertyCallbackInfo&lt;v8::Value&gt;&amp; info)
{
    ...;
}</pre>
[Custom] may also be specified on special operations:</div>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {  // anonymous special operations
    [Custom] getter Node (unsigned long index);
    [Custom] setter Node (unsigned long index, Node value);
    [Custom] deleter boolean (unsigned long index);

    [Custom] getter Node (DOMString name);
    [Custom] setter Node (DOMString name, Node value);
    [Custom] deleter boolean (DOMString name);
}</pre>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface YYY {  // special operations with identifiers
    [Custom] getter Node item(unsigned long index);
    [Custom] getter Node namedItem(DOMString name);
}</pre>
<h4><a name="TOC-Custom-PropertyQuery-PropertyEnumerator-s-"></a>[Custom=PropertyQuery|PropertyEnumerator] (s)</h4>
<p style="font-weight:normal">Summary: <code>[Custom=PropertyEnumerator]</code> allows you to write custom bindings for the case where properties of a given interface are enumerated; a custom named enumerator. There is currently only one use, and in that case it is used with <span style="background-color:transparent;font-size:10pt"><code>[Custom=PropertyQuery]</code>, since the query is also custom.</span></p>
<p style="font-weight:normal">Usage: Can be specified on named property getters:</p>
<div class="sites-codeblock sites-codesnippet-block">
<code>interface XXX {</code><br />
<code>    [Custom=PropertyQuery|PropertyEnumerator] getter Foo (DOMString name);</code><br />
<code>};</code>
</div>
<div><br />
</div>
If the property getter itself should also be custom, specify <span style="color:rgb(0,96,0);font-family:monospace;background-color:transparent;font-size:10pt">[Custom=PropertyGetter]</span><span style="background-color:transparent;font-size:10pt"> (this is the default, if no arguments are given).</span></div>
<div><span style="background-color:transparent;font-size:10pt"><br />
</span></div>
<div>
<div class="sites-codeblock sites-codesnippet-block"><code>interface XXX {</code><br />
<code>    [Custom=PropertyGetter|PropertyQuery|PropertyEnumerator] getter Foo (DOMString name);</code><br />
<code>};</code></div>
<p style="font-weight:normal"><span style="font-size:10pt;background-color:transparent">You can write custom bindings as V8XXX::namedPropertyQuery(...) and V8XXX::namedPropertyEnumerator(...) in Source/bindings/v8/custom/V8XXXCustom.cpp:</span></p>
<pre style="font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">v8::Handle&lt;v8::Integer&gt; V8XXX::namedPropertyQuery(v8::Local&lt;v8::String&gt; name, const v8::AccessorInfo&amp; info)
{
    ...;
}

v8::Handle&lt;v8::Array&gt; V8XXX::namedPropertyEnumerator(const v8::AccessorInfo&amp; info)
{
    ...;
}</pre>
<h4><a name="TOC-Custom-LegacyCallAsFunction-i-deprecated"></a>[Custom=LegacyCallAsFunction] (i) <i>deprecated</i></h4>
<p style="font-weight:normal">Summary: [Custom=LegacyCallAsFunction] allows you to write custom bindings for call(...) of a given interface.</p>
<p style="font-weight:normal">Usage: [Custom=LegacyCallAsFunction] can be specified on interfaces:</p>
<pre style="font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Custom=LegacyCallAsFunction,
] interface XXX {
    ...
};</pre>
<p style="font-weight:normal">If you want to write custom bindings for XXX.call(...), you can use [Custom=LegacyCallAsFunction].</p>
<p style="font-weight:normal"><span style="font-size:10pt">You can write custom V8XXX::callAsFunctionCallback(...) in Source/bindings/v8/custom/V8XXXCustom.cpp:</span></p>
<pre style="font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">v8::Handle&lt;v8::Value&gt; V8XXX::callAsFunctionCallback(const v8::Arguments&amp; args)
{
    ...;
}</pre>
<h4><a name="TOC-Custom-ToV8-i-"></a>[Custom=ToV8] (i)</h4>
<div style="font-size:13px;font-weight:normal">FIXME: Lets you specify a Custom ::toV8 function.</div>
<h4><a name="TOC-Custom-VisitDOMWrapper-i-"></a>[Custom=VisitDOMWrapper] (i)</h4>
<p style="font-weight:normal"><a href="http://trac.webkit.org/wiki/WebKitIDL#V8CustomIsReachable"></a></p>
<p style="font-weight:normal"><span style="font-size:10pt">Summary: Allows you to write custom code for </span><font color="#006000" face="monospace">visitDOMWrapper</font><span style="font-size:10pt">: like </span><code style="font-size:10pt">[SetWrapperReferenceFrom]</code><span style="font-size:10pt">, but does not generate the function. One use (Nodelist.idl).</span></p>
<p style="font-weight:normal">Usage:</p>
<pre style="font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Custom=VisitDOMWrapper,
] interface XXX {
    ...
};</pre>
<p style="font-weight:normal">And then in V8XXXCustom.cpp:</p>
<pre style="font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">void V8XXX::visitDOMWrapper(DOMDataStore* store, void* object, v8::Persistent&lt;v8::Object&gt; wrapper)
{
    ...
}</pre>
<h4><a name="TOC-Custom-Wrap-i-"></a>[Custom=Wrap] (i)</h4>
<div style="font-size:13px;font-weight:normal">FIXME: Lets you specify a Custom ::wrap function.</div>
<h3><a name="TOC-CustomElementCallbacks-m-a-"></a>[CustomElementCallbacks] (m, a)</h3>
<div>Summary: Wraps the method/accessor with a Custom Elements "callback delivery scope" which will dispatch Custom Element callbacks (createdCallback, attributeChangedCallback, etc.) before returning to script.</div>
<div><br />
</div>
<div>If the method/accessor creates elements or modifies DOM nodes in any way, it should be tagged with this extended attribute. Even if you're not a Node, this may apply to you! For example <a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/DOMTokenList.idl&amp;l=34" style="font-size:10pt;background-color:transparent">DOMTokenList.toggle</a><span style="font-size:10pt;background-color:transparent"> can be reflected in the attribute of its associated element, so it needs to be tagged with CustomElementCallbacks. If the method/accessor only calls something that may modify the DOM (for example, it runs user script as a callback) you don't need to tag your method with [CustomElementCallbacks]; that is the responsibility of the binding that actually modifies the DOM. In general over-applying this extended attribute is safe, with one caveat:</span></div>
<div>
<ul><li><span style="font-size:10pt;background-color:transparent">This extended attribute MUST NOT be used on members that operate on non-main threads, because the callback delivery scope accesses statics.</span></li>
<li><span style="font-size:10pt;background-color:transparent">Basically: Don't apply this extended attribute to anything that can be called from a worker.</span></li>
<li><span style="font-size:10pt;background-color:transparent">This criterion (accessible by workers) depends on implementation and cannot easily be checked from the IDL or C++ headers (it includes obvious cases like </span><code style="font-size:10pt;background-color:transparent">[Exposed=Worker],</code><span style="font-size:10pt;background-color:transparent"> where there is a constructor on the (JS) global object, but also cases where the C++ creates or accesses methods internally), so please be careful.</span></li></ul>
</div>
<div>Usage: <code>[CustomElementCallbacks]</code> takes no arguments.</div>
<div></div>
<h3><a name="TOC-Default-p-"></a>[Default] (p)</h3>
<p>Summary: <code>[Default]</code> <span style="background-color:transparent;font-size:10pt">allows one to specify the default values for optional arguments. This removes the need to have C++ overloads in the Blink implementation. </span></p>
<p><span style="font-size:10pt;font-weight:normal;background-color:transparent">Standard: </span><span style="font-size:10pt;font-weight:normal;background-color:transparent">In Web IDL, </span><a href="https://heycam.github.io/webidl/#dfn-optional-argument-default-value" style="font-size:10pt;font-weight:normal;background-color:transparent">default values for optional arguments</a><span style="font-size:10pt;font-weight:normal;background-color:transparent"> are written as</span><span style="font-size:10pt;font-weight:normal;background-color:transparent"> </span><span style="font-size:10pt;font-weight:normal;background-color:transparent">"optional </span><i style="font-size:10pt;font-weight:normal;background-color:transparent">type identifier = value</i><span style="font-size:10pt;font-weight:normal;background-color:transparent">"</span><span style="font-size:10pt;font-weight:normal;background-color:transparent"> Blink supports this but not all implementations have been updated to handle overloaded functions - see bug </span><span style="background-color:transparent"><a href="https://code.google.com/p/chromium/issues/detail?id=258153">258153</a></span><span style="font-size:13px;font-weight:normal;background-color:transparent">. </span><span style="font-family:courier new,monospace;font-size:13.3333330154419px;background-color:transparent">[Default=Undefined]</span> was added to all optional parameters to preserve compatibility until the C++ implementations are updated.</p>
<p style="font-size:13px;font-weight:normal"><span style="font-size:10pt">Usage: <code>[Default=Undefined]</code> can be specified on any optional parameter:</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLFoo {
    void func1(int a, int b, optional int c, optional int d);
    void func2(int a, int b, [Default=Undefined] optional int c);
}; </pre>
<p style="font-size:13px;font-weight:normal">The parameters marked with the standard Web IDL <span style="font-family:courier new,monospace">optional</span> qualifier are optional, and JavaScript can omit the parameters. Obviously, if parameter X is marked with <span style="font-family:courier new,monospace">optional</span> then all subsequent parameters of X should be marked with <span style="font-family:courier new,monospace">optional</span>. <br />
<br />
The difference between <span style="font-family:courier new,monospace;font-size:10pt">optional</span><span style="font-size:10pt"> and <font face="courier new, monospace">[Default=Undefined] </font></span><span style="font-size:10pt"><font face="courier new, monospace">optional</font></span><span style="font-family:courier new,monospace;font-size:10pt"> </span><span style="font-size:10pt">is whether the Blink implementation requires overloaded methods or not: without a default value, the Blink implementation must have overloaded C++ functions, while with a default value, the Blink implementation only needs a single C++ function.</span></p>
<p style="font-size:13px;font-weight:normal">In case of func1(...), if JavaScript calls func1(100, 200), then HTMLFoo::func1(int a, int b) is called in Blink. If JavaScript calls func1(100, 200, 300), then HTMLFoo::func1(int a, int b, int c) is called in Blink. If JavaScript calls func1(100, 200, 300, 400), then HTMLFoo::func1(int a, int b, int c, int d) is called in Blink. In other words, if the Blink implementation has overloaded methods, you can use <span style="font-family:courier new,monospace">optional</span>.</p>
<p style="font-size:13px;font-weight:normal">In case of func2(...) which adds <span style="font-family:courier new,monospace;font-size:10pt">[Default=Undefined]</span>, <span style="font-size:10pt">if JavaScript calls func2(100, 200), then it behaves as if JavaScript called func2(100, 200, undefined). Consequently, HTMLFoo::func2(int a, int b, int c) is called in Blink. 100 is passed to a, 200 is passed to b, and 0 is passed to c. (A JavaScript </span><font face="courier new, monospace" style="font-size:10pt">undefined</font><span style="font-size:10pt"> is converted to 0, following the value conversion rule in the Web IDL spec; if it were a DOMString parameter, it would end up as the string <font face="courier new, monospace">"undefined"</font>.) In this way, Blink needs to just implement func2(int a, int b, int c) and needs not to implement both func2(int a, int b) and func2(int a, int b, int c).</span></p>
<h3><a name="TOC-DependentLifetime-i-"></a>[DependentLifetime] (i)</h3>
<p><span style="background-color:transparent;font-size:10pt">Summary: </span><span style="background-color:transparent"><code>[DependentLifetime]</code> means objects of this class are treated as dependent DOM objects.</span></p>
<p>Usage: <code>[DependentLifetime]</code> can be specified on interfaces, and <b>is inherited</b>:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    DependentLifetime,
] interface Foo { ... };

interface Bar : Foo { ... };  // inherits [DependentLifetime]</pre>
<h3><a name="TOC-DeprecateAs-m-a-c-"></a>[DeprecateAs] (m, a, c)</h3>
<p style="font-size:13.3333330154419px"><span style="font-size:10pt">Summary: Measures usage of a deprecated feature via <code>UseCounter</code>, and notifies developers about deprecation via a console warning.</span></p>
<p style="font-size:13.3333330154419px"><code>[DeprecateAs]</code> can be considered an extended form of <code>[MeasureAs]</code>: it both measures the feature's usage via the same UseCounter mechanism, and also sends out a warning to the console (optionally with a message) in order to inform developers that the code they've written will stop working at some point in the relatively near future.</p>
<p style="font-size:13.3333330154419px">Usage: <code>[DeprecateAs]</code> can be specified on methods, attributes, and constants.</p>
<pre style="font-size:13.3333330154419px;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">    [DeprecateAs=DeprecatedPrefixedAttribute] attribute Node prefixedAttribute;
    [DeprecateAs=DeprecatedPrefixedMethod] Node prefixedGetInterestingNode();
    [DeprecateAs=DeprecatedPrefixedConstant] const short DEPRECATED_PREFIXED_CONSTANT = 1; </pre>
The deprecation message show on the console can be specifie<span style="font-size:13.3333330154419px;background-color:transparent">d via the </span><a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.cpp&amp;q=UseCounter::deprecationMessage&amp;l=615" style="font-size:10pt;background-color:transparent">UseCounter::deprecationMessage</a><span style="font-size:10pt;background-color:transparent"> method.</span>
<h3><a name="TOC-GarbageCollected-i-"></a><b style="font-size:10pt;background-color:transparent"><font size="3">[GarbageCollected] (i)</font></b></h3><div>
<div><span style="font-size:10pt;background-color:transparent">Summary: The [</span><font face="courier new, monospace" style="font-size:10pt;background-color:transparent">GarbageCollected</font><span style="font-size:10pt;background-color:transparent">] attribute signals that the object is </span><span style="font-size:10pt;background-color:transparent">kept on the Oilpan heap and handled by its garbage collector.</span></div>
<div><br />
</div>
<div>Usage: [<font face="courier new, monospace">GarbageCollected</font>] can be specified on interfaces, and <b>is inherited</b>:</div>
<div>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[
    <span style="white-space:normal;background-color:rgb(255,255,255)"><font face="courier new, monospace">GarbageCollected</font></span><span style="font-family:Arial,Verdana,sans-serif;white-space:normal;background-color:rgb(255,255,255)">,</span>
] interface BatteryManager { ... };</pre>
</div>
<div><br />
</div>
<div>In order to generate correct binding layer code for an interface, <span style="font-size:10pt;background-color:transparent">[<font face="courier new, monospace">GarbageCollected</font>] must be supplied if the object is an Oilpan-based </span><span style="font-size:10pt;background-color:transparent">object. Using both [<font face="courier new, monospace">GarbageCollected</font>] and [<font face="courier new, monospace">WillBeGarbageCollected</font>] is not allowed, but an interface object deriving from an interface annotated with [<font face="courier new, monospace">WillBeGarbageCollected</font>] may override it with [<font face="courier new, monospace">GarbageCollected</font>].</span></div>
</div>
<div><br />
</div>
<h3><a name="TOC-2"></a><br /></h3>
<div style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)">
<div></div>
</div>
<div style="text-align:start;text-indent:0px">
<h3><a name="TOC-Iterable-i-"></a>[Iterable] (i) </h3>
<p><span style="font-size:13.3333330154419px;font-weight:normal">Summary: Installs a @@iterator method.</span></p>
<p><span style="font-size:10pt;font-weight:normal">NOTE: In most cases, interfaces should use the standard </span><code style="font-size:10pt;font-weight:normal">iterator&lt;valuetype&gt;</code><span style="font-size:10pt;font-weight:normal;background-color:transparent">, </span><span style="font-size:10pt;font-weight:normal"><code>iterator&lt;keytype,valuetype&gt;</code></span><span style="font-size:10pt;font-weight:normal;background-color:transparent">, </span><span style="font-size:10pt;font-weight:normal"><code>setlike&lt;type&gt;</code></span><span style="font-size:10pt;font-weight:normal;background-color:transparent">, or </span><span style="font-size:10pt;font-weight:normal"><code>maplike&lt;keytype, valuetype&gt;</code></span><span style="font-size:10pt;font-weight:normal;background-color:transparent"> IDL declarations instead. [Iterable] should only be necessary for the implementation of iterators themselves.</span></p>
<div>
<p style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)">When the attribute is set on an interface, the code generator installs iterator C++ method into [Symbol.iterator] slot.</p>
<div class="sites-codeblock sites-codesnippet-block"><code>[ Iterable ] interface IterableInterface { };</code></div>
</div>
<div><br />
<div style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"></div>
<div class="sites-codeblock sites-codesnippet-block" style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)">
<div><code>class IterableInterface : public ScriptWrappable {</code></div>
<div><code>...</code></div>
<div><code>public:</code></div>
<div><code>...</code></div>
<div><code>    // This is called when |obj[Symbol.iterator]| is called.</code></div>
<div><code>    Iterator* iterator(ScriptState*, ExceptionState&amp;);</code></div>
<div><code>};</code></div>
</div>
</div>
<div style="font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)">
<div style="line-height:13px"><code><br />
</code></div>
<div style="line-height:13px"></div>
<div class="sites-codeblock sites-codesnippet-block">
<div style="line-height:13px"><code>var obj = ...; // obj is an IterableInterface object.</code></div>
<div style="line-height:13px"><code>var iter = obj[Symbol.iterator](); // IterableInterface::iterator is called.</code></div>
<div style="line-height:13px"><font color="#006000" face="monospace">for (var value of obj) {</font></div>
<div style="line-height:13px"><font color="#006000" face="monospace">    // Iterates over |obj|.</font></div>
<div style="line-height:13px"><font color="#006000" face="monospace">}</font></div>
<div style="line-height:13px"><font color="#006000" face="monospace">for (var value of iter) {</font></div>
<div style="line-height:13px"><font color="#006000" face="monospace">    // Same as above.</font></div>
<div style="line-height:13px"><font color="#006000" face="monospace">}</font></div>
</div>
Note: currently the code generator doesn't take care of the name conflict. Namely, it is not allowed to have "iterator" method in an iterable interface.</div>
</div>
<div>
<h3><a name="TOC-Measure-m-a-c-"></a>[Measure] (m, a, c)</h3>
<div style="font-size:13.3333330154419px;font-weight:normal"></div>
<div style="font-size:13.3333330154419px;font-weight:normal">
<p style="font-size:13px">Summary: Measures usage of a specific feature via UseCounter.</p>
<p style="font-size:13px">In order to measure usage of specific features, Chrome submits anonymous statistics through the Histogram recording system for users who opt-in to sharing usage statistics. This extended attribute hooks up a specific feature to this measurement system.</p>
<p>Usage: <code style="font-size:13px">[Measure]</code> can be specified on methods, attributes, and constants<span style="font-size:13px;background-color:transparent">. </span><span style="font-size:13px;background-color:transparent">The generated feature name must be added to </span><code style="font-size:13px;background-color:transparent"><a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.h&amp;q=%22enum%20Feature%22&amp;sq=package:chromium&amp;type=cs&amp;l=61">UseCounter::Feature</a></code><span style="font-size:13px;background-color:transparent"> (in </span><span style="background-color:transparent"><a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.h">core/frame/UseCounter.h</a>).</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[Measure] attribute Node interestingAttribute;
[Measure] Node getInterestingNode();
[Measure] const INTERESTING_CONSTANT = 1;
</pre>
</div>
<h3><a name="TOC-MeasureAs-m-a-c-"></a>[MeasureAs] (m, a, c)</h3>
<span style="font-size:13px;font-weight:normal;background-color:transparent">Summary: </span><span style="font-size:13px;font-weight:normal;background-color:transparent">Like </span><code style="font-size:13px;font-weight:normal;background-color:transparent">[Measure]</code><span style="font-size:13px;font-weight:normal;background-color:transparent">, but the feature name is provided as the extended attribute value.</span>
<div><span style="font-size:13px">This is similar to the standard</span><span style="font-size:13px"> </span><code style="font-size:13px">[DeprecateAs]</code><span style="font-size:13px"> </span><span style="font-size:13px">extended attribute, but does not display a deprecation warning.</span></div>
<div style="font-size:13.3333330154419px;font-weight:normal">
<div style="font-size:13.3333330154419px">
<p>Usage: <code style="font-size:13px">[MeasureAs]</code> can be specified on methods, attributes, and constants<span style="font-size:13px;background-color:transparent">. </span><span style="font-size:13px;background-color:transparent">The value must match one of the enumeration values in </span><code style="font-size:13px;background-color:transparent"><a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.h&amp;q=%22enum%20Feature%22&amp;sq=package:chromium&amp;type=cs&amp;l=61">UseCounter::Feature</a></code><span style="font-size:13px;background-color:transparent"> (in </span><span style="background-color:transparent"><a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.h">core/frame/UseCounter.h</a>).</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[MeasureAs=AttributeWeAreInterestedIn] attribute Node interestingAttribute;
[MeasureAs=MethodsAreInterestingToo] Node getInterestingNode();
[MeasureAs=EvenSomeConstantsAreInteresting] const INTERESTING_CONSTANT = 1;</pre>
</div>
</div>
<h3><a name="TOC-NotEnumerable-m-a-s-"></a>[NotEnumerable] (m, a, s)</h3>
</div>
<div>
<div>
FIXME: docs out of date!
<div style="font-size:13px;font-weight:normal">Specification: <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" style="font-size:10pt">​The spec of Writable, Enumerable and Configurable (Section 8.6.1)</a> - <i>not standard Web IDL extended attributes</i>.<br />
<p>Summary: Controls the enumerability of methods and attributes.</p>
<p>Usage: <code>[NotEnumerable]</code> can be specified on methods and attributes</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[NotEnumerable] attribute DOMString str;
[NotEnumerable] void foo();<br /></pre>
<span style="font-size:10pt;background-color:transparent">[NotEnumerable] indicates that the method or attribute is not enumerable.</span></div><h3 style="font-size:13px;font-weight:normal"><a name="TOC-PostMessage-m-"></a><b style="font-size:10pt;background-color:transparent"><font size="3">[PostMessage] (m)</font></b></h3><div style="font-size:13px;font-weight:normal"><span style="font-size:10pt;background-color:transparent">Summary: Tells the code generator to generate postMessage method used in Workers, Service Workers etc.</span></div><div style="font-weight:normal"><br /></div><div style="font-weight:normal">Usage: [PostMessage] can be specified on methods</div><pre style="font-size:13px;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[PostMessage] void postMessage(any message, optional sequence&lt;Transferable&gt; transfer);<br /></pre><h3><a name="TOC-RaisesException-i-m-a-"></a>[RaisesException] (i, m, a)</h3>
<p style="font-size:13px">Summary: Tells the code generator to append an <code style="font-size:10pt;background-color:transparent;font-weight:normal">ExceptionState&amp;</code> argument when calling the Blink implementation.</p>
<p style="font-size:13px"><span style="font-size:10pt">Implementations may use the methods on this parameter (e.g. <code>ExceptionState::throwDOMException</code>) to throw exceptions.</span></p>
<p style="font-size:13px"><span style="font-size:10pt">Usage: [RaisesException] can be specified on methods and attributes, [RaisesException=</span><span style="background-color:transparent;font-size:10pt">Getter</span><span style="font-size:10pt;background-color:transparent">] and [RaisesException=</span><span style="background-color:transparent;font-size:10pt">Setter</span><span style="background-color:transparent;font-size:10pt">] can be specified on attributes, and [RaisesException=</span><span style="background-color:transparent;font-size:10pt">Constructor</span><span style="background-color:transparent;font-size:10pt">] can be specified on interfaces where [Constructor] is also specified. On methods and attributes, the IDL looks like:</span><br />
<br />
</p>
<div class="sites-codeblock sites-codesnippet-block" style="font-size:13px"><code>interface XXX {</code><br />
<code>    [RaisesException] attribute long count;</code><br />
<span style="color:rgb(0,96,0);font-family:monospace">    [RaisesException=Getter] attribute long count1;</span><br />
<span style="color:rgb(0,96,0);font-family:monospace">    [RaisesException=Setter] attribute long count2;</span><br />
<code>    [RaisesException] void foo();</code><br />
<code>};</code></div>
<br />
<br />
And the Blink implementations would look like:<br />
<div style="font-size:13px">
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">long XXX::count(ExceptionState&amp; exceptionState) {
    if (...) {
        exceptionState.throwDOMException(TypeMismatchError, ...);
        return;
    }
    ...;
}

void XXX::setCount(long value, ExceptionState&amp; exceptionState) {
    if (...) {
        exceptionState.throwDOMException(TypeMismatchError, ...);
        return;
    }
    ...;
}

void XXX::foo(ExceptionState&amp; exceptionState) {
    if (...) {
        exceptionState.throwDOMException(TypeMismatchError, ...);
        return;
    }
    ...;
};
</pre>
</div>
<div style="font-size:13px"><span style="font-size:10pt">If [RaisesException=</span><span style="background-color:transparent;font-size:10pt">Constructor</span><span style="background-color:transparent;font-size:10pt">] is specified on an interface and [Constructor] is also specified then an <code>ExceptionState&amp;</code> argument is added when calling the </span><span style="background-color:transparent;font-size:10pt">XXX::create(...) constructor callback.</span></div>
<div style="font-size:13px">
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em"><span style="font-family:Arial,Verdana,sans-serif;font-size:10pt">[</span><br />    Constructor(float x),
    RaisesException=Constructor,
]
interface XXX {
    ...
};
</pre>
<p><span style="font-size:10pt">Blink needs to implement the following method as a constructor callback:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">PassRefPtr&lt;XXX&gt; XXX::create(float x, ExceptionState&amp; exceptionState)
{
    ...;
    if (...) {
        exceptionState.throwDOMException(TypeMismatchError, ...);
        return nullptr;
    }
    ...;
}</pre>
</div>
</div>
</div>
</div>
<h3><a name="TOC-Reflect-a-"></a>[Reflect] (a)</h3>
<div>Specification: <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#reflect" style="font-size:10pt;font-weight:normal">​The spec of Reflect</a> - <i style="font-size:13px;font-weight:normal">defined in spec prose, not as an IDL extended attribute.</i><br />
<p style="font-size:13px;font-weight:normal">Summary: [Reflect] indicates that a given attribute should reflect the values of a corresponding content attribute.</p>
<p style="font-size:13px;font-weight:normal">Usage: The possible usage is [Reflect] or [Reflect=X], where X is the name of a corresponding content attribute. [Reflect] can be specified on attributes:</p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface Element {
    [Reflect] attribute DOMString id;
    [Reflect=class] attribute DOMString className;
};
</pre>
<p style="font-size:13px;font-weight:normal">(Informally speaking,) a content attribute means an attribute on an HTML tag: &lt;div id="foo" class="fooClass"&gt;&lt;/div&gt;</p>
<p style="font-size:13px;font-weight:normal">Here 'id' and 'class' are content attributes.</p>
<p style="font-size:13px;font-weight:normal">If a given attribute in an IDL file is marked as [Reflect], it indicates that the attribute getter returns the value of the corresponding content attribute and that the attribute setter sets the value of the corresponding content attribute. In the above example, 'div.id' returns 'foo', and 'div.id = "bar"' sets "bar" to the 'id' content attribute.</p>
<p style="font-size:13px;font-weight:normal">If the name of the corresponding content attribute is different from the attribute name in an IDL file, you can specify the content attribute name by [Reflect=X]. For example, in case of [Reflect=class], if 'div.className="barClass"' is evaluated, then "barClass" is set to the 'class' content attribute.</p>
<p style="font-size:13px;font-weight:normal">Whether [Reflect] should be specified or not depends on the spec of each attribute.</p>
<h3><a name="TOC-ReflectEmpty-value-a-"></a>[ReflectEmpty="value"] (a)</h3>
<div>Specification: <a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values">​</a><a href="http://www.whatwg.org/specs/web-apps/current-work/#enumerated-attribute">Enumerated attributes</a> - <i>defined in spec prose, not as an IDL extended attribute.</i><br />
<p>Summary: <span style="background-color:transparent">[ReflectEmpty="value"] gives the attribute keyword value to reflect when an attribute is present, but without a value</span><span style="background-color:transparent;font-size:10pt">; it supplements [ReflectOnly] and [Reflect].</span></p>
<p>Usage: <span style="background-color:transparent">The possible usage is [ReflectEmpty="value"] </span><span style="background-color:transparent;font-size:10pt">in </span><span style="background-color:transparent;font-size:10pt">combination with [ReflectOnly]:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLMyElement {
    [Reflect, ReflectOnly="for"|"against", ReflectEmpty="for"] attribute DOMString vote;
};</pre>
<p>The [ReflectEmpty] extended attribute specifies the value that an IDL getter for the 'vote' attribute should return when the content attribute is present, but without a value (e.g., return "for" when accessing the "vote" IDL attribute on "&lt;my-element vote/&gt;".) Its (string) literal value must be one of the possible values that the [ReflectOnly] extended attribute lists.</p>
<p>[ReflectEmpty] should be used if the specification for the content attribute has an empty attribute value mapped to some attribute state. For HTML, this applies to <a href="http://www.whatwg.org/specs/web-apps/current-work/#enumerated-attribute">enumerated attributes</a> only.</p>
<h3><a name="TOC-ReflectInvalid-value-a-"></a>[ReflectInvalid="value"] (a)</h3>
<div>Specification: <a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values">​</a><a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values" style="color:rgb(85,26,139)">Limited value attributes</a> - <i>defined in spec prose, not as an IDL extended attribute.</i><br />
<p>Summary: <span style="background-color:transparent">[ReflectInvalid="value"] gives the attribute keyword value to reflect when an attribute has an invalid/unknown value. I</span><span style="background-color:transparent;font-size:10pt">t supplements [ReflectOnly] and [Reflect].</span></p>
<p>Usage: <span style="background-color:transparent">The possible usage is [ReflectInvalid="value"] </span><span style="background-color:transparent;font-size:10pt">in </span><span style="background-color:transparent;font-size:10pt">combination with [ReflectOnly]:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLMyElement {
    [Reflect, ReflectOnly="left"|"right", ReflectInvalid="left"] attribute DOMString direction;
};</pre>
<p>The [ReflectInvalid] extended attribute specifies the value that an IDL getter for the 'direction' attribute should return when the content attribute has an unknown value (e.g., return "left" when accessing the "direction" IDL attribute on "&lt;my-element direction=dont-care /&gt;".) Its (string) literal value must be one of the possible values that the [ReflectOnly] extended attribute lists.</p>
<p>[ReflectInvalid] should be used if the specification for the content attribute has an <i>invalid value state</i> defined. For HTML, this applies to <a href="http://www.whatwg.org/specs/web-apps/current-work/#enumerated-attribute">enumerated attributes</a> only.</p>
<h3><a name="TOC-ReflectMissing-value-a-"></a>[ReflectMissing="value"] (a)</h3>
<div>Specification: <a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values">​</a><a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values" style="color:rgb(85,26,139)">Limited value attributes</a> - <i>defined in spec prose, not as an IDL extended attribute.</i><br />
<p>Summary: <span style="background-color:transparent">[ReflectMissing="value"] gives the attribute keyword value to reflect when an attribute isn't present. I</span><span style="background-color:transparent;font-size:10pt">t supplements [ReflectOnly] and [Reflect].</span></p>
<p>Usage: <span style="background-color:transparent">The possible usage is [ReflectMissing="value"] </span><span style="background-color:transparent;font-size:10pt">in </span><span style="background-color:transparent;font-size:10pt">combination with [ReflectOnly]:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLMyElement {
    [Reflect, ReflectOnly="ltr"|"rtl"|"auto", ReflectMissing="auto"] attribute DOMString preload;
};</pre>
<p>The [ReflectMissing] extended attribute specifies the value that an IDL getter for the 'direction' attribute should return when the content attribute is missing (e.g., return "auto" when accessing the "preload" IDL attribute on "&lt;my-element&gt;".) Its (string) literal value must be one of the possible values that the [ReflectOnly] extended attribute lists.</p>
<p>[ReflectMissing] should be used if the specification for the content attribute has a <i>missing value state</i> defined. For HTML, this applies to <a href="http://www.whatwg.org/specs/web-apps/current-work/#enumerated-attribute">enumerated attributes</a> only.</p>
</div>
</div>
</div>
<h3><a name="TOC-ReflectOnly-list-a-"></a>[ReflectOnly=&lt;list&gt;] (a)</h3>
<div>Specification: <a href="http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values">​Limited value attributes</a> - <i>defined in spec prose, not as an IDL extended attribute.</i><br />
<p>Summary: <span style="background-color:transparent">[ReflectOnly=&lt;list&gt;] indicates that a reflected string </span><span style="background-color:transparent;font-size:10pt">attribute should be limited to a set of allowable values; it supplements [Reflect].</span></p>
<p>Usage: <span style="background-color:transparent">The possible usage is [ReflectOnly="A1"|...|"An"] where A1 (up to n) </span><span style="background-color:transparent;font-size:10pt">are the attribute values allowed. [ReflectOnly=&lt;list&gt;] is used in </span><span style="background-color:transparent;font-size:10pt">combination with [Reflect]:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLMyElement {
    [Reflect, ReflectOnly="on"] attribute DOMString toggle;
    [Reflect=q, ReflectOnly="first"|"second"|"third"|"fourth"] attribute DOMString quarter;
};</pre>
<p>The ReflectOnly attribute limits the range of values that the <span style="background-color:transparent;font-size:10pt">attribute getter can return from its reflected attribute. If the content attribute has a value that is a </span><span style="background-color:transparent;font-size:10pt">case-insensitive match for one of the values given in the </span><span style="background-color:transparent;font-size:10pt">ReflectOnly's list (using "|" as separator), then it will be returned. To allow attribute values that use characters that go beyond what IDL identifiers may contain, string literals are used. This is a Blink syntactic extension to extended attributes.</span></p>
<p><span style="background-color:transparent;font-size:10pt">If there is no match, the empty string will be returned. As required </span><span style="background-color:transparent;font-size:10pt">by the specification, no such checking is performed when the reflected </span><span style="background-color:transparent;font-size:10pt">IDL attribute is set.</span></p>
<p>[ReflectOnly=&lt;list&gt;] should be used if the specification for a <span style="background-color:transparent;font-size:10pt">reflected IDL attribute says it is "<i>limited to only known values</i>".</span></p>
</div>
</div>
</div>
</div>
<h3><a name="TOC-RuntimeEnabled-i-m-a-c-"></a>[RuntimeEnabled] (i, m, a, c)</h3>
<div>Summary: <code>[RuntimeEnabled]</code> wraps the generated code with <code>if (RuntimeEnabledFeatures::FeatureNameEnabled) { ...code... }</code>.</div>
<div><br />
</div>
<div>Usage: <code>[RuntimeEnabled=FeatureName].</code> FeatureName must be included in <a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/platform/RuntimeEnabledFeatures.in">RuntimeEnabledFeatures.in</a>.</div>
<div style="font-size:13px;font-weight:normal">
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    RuntimeEnabled=Media,
] interface HTMLAudioElement : HTMLMediaElement {};</pre>
</div>
<div>Only when the feature is enabled at runtime (using a command line flag, for example, or when it is enabled only in certain platforms), the binding would be exposed to the web.</div>
<div><br />
</div>
<div><code>[RuntimeEnabled]</code> <i>cannot</i> be applied to arguments, as this changes signatures and method resolution and is both very confusing to reason about and implement. For example, what does it mean to mark a <i>required</i> argument as <code>[RuntimeEnabled]</code>? You probably want to apply it only to optional arguments, which are equivalent to overloads. Thus instead apply <code>[RuntimeEnabled]</code> to the <i>method,</i> generally splitting a method in two. For example, instead of:</div>
<div>
<div class="sites-codeblock sites-codesnippet-block"><code>foo(long x, [RuntimeEnabled=FeatureName] optional long y); // Don't do this!</code></div>
</div>
<div>do:</div>
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><code>// Overload can be replaced with optional if [RuntimeEnabled] is removed</code></div>
<div><code>foo(long x);</code></div>
<div><span style="font-size:10pt;background-color:transparent"><code>[RuntimeEnabled=FeatureName] </code></span><code>foo(long x, long y);</code></div>
<div></div>
</div>
<br />
<div>For more information, see <a href="https://www.chromium.org/blink/runtime-enabled-features">RuntimeEnabledFeatures</a>.</div>
<h3><a name="TOC-SetWrapperReferenceFrom-xxx-i-"></a>[SetWrapperReferenceFrom=xxx] (i)</h3>
<div>
<h3><a name="TOC-SetWrapperReferenceTo-xxx-i-"></a>[SetWrapperReferenceTo=xxx] (i)</h3>
</div>
<p>Summary: This generates code that allows you to set up implicit references between wrappers which can be used to keep wrappers alive during GC.</p>
<p>Usage: <code>[SetWrapperReferenceFrom]</code> and <code style="font-size:13.3333330154419px;background-color:transparent">[SetWrapperReferenceTo]</code><span style="font-size:13.3333330154419px;background-color:transparent"> </span><span style="font-size:10pt;background-color:transparent">can be specified on an interface. Use </span><code style="font-size:10pt;background-color:transparent">[Custom=VisitDOMWrapper]</code><span style="font-size:10pt;background-color:transparent"> instead if want to write a custom function.</span></p>
<div class="sites-codeblock sites-codesnippet-block"><code>[</code><br />
<code>  SetWrapperReferenceFrom=element</code><br />
<code>] interface XXX { ... };</code></div>
<p style="font-size:13.3333330154419px">The code generates a function called <code>XXX::visitDOMWrapper</code> which is called by <code>V8GCController</code> before GC. The function adds implicit references from the specified object to this object's wrapper to keep it alive.</p>
<p><span style="font-size:13.3333330154419px">The </span><span style="font-size:13.3333330154419px;color:rgb(0,96,0);font-family:monospace;background-color:transparent">[SetWrapperReferenceFrom]</span> <span style="font-size:13.3333330154419px;background-color:transparent">extended attribute takes a value, which is the function to call to get the object that determines whether the object is reachable or not. The currently valid values are:</span><span style="font-size:13.3333330154419px;background-color:transparent"> </span><code style="font-size:13.3333330154419px;background-color:transparent">document, element, owner, ownerNode</code></p>
<div><br />
</div>
<div class="sites-codeblock sites-codesnippet-block">
<div><span style="font-size:13.3333330154419px"><code>[<br />
  SetWrapperReferenceTo=targetMethod<br />
] interface YYY { ... };</code></span></div>
</div>
<div>
<p style="font-size:13.3333330154419px">The code generates a function called <code>YYY::visitDOMWrapper</code> which is called by <code>V8GCController</code> before GC. The function adds implicit references from this object's wrapper to a target object's wrapper to keeps it alive.</p>
<p><span style="font-size:13.3333330154419px">The </span><span style="font-size:13.3333330154419px;color:rgb(0,96,0);font-family:monospace;background-color:transparent">[SetWrapperReferenceTo]</span> <span style="font-size:13.3333330154419px;background-color:transparent">extended attribute takes a value, which is the method name to call to get the target object. For example, with the above declaration a call will be made to <code>YYY::</code></span><code>targetMethod</code><span style="font-size:13.3333330154419px;background-color:transparent"><code>()</code> to get the target of the reference.</span></p>
</div>
<h3><a name="TOC-TypeChecking-i-m-a-"></a><span style="background-color:transparent"><font size="3">[TypeChecking] (i, m, a)</font></span></h3>
<p>Summary: Implements type checking per spec (<a href="https://heycam.github.io/webidl/#es-type-mapping" style="background-color:transparent;font-size:10pt">ECMAScript type mapping</a>). By default Blink bindings performs some type checking on values passed as arguments or when setting<span style="font-size:10pt;background-color:transparent">, but not all, and even assume that returned values from methods and setters may always be null!</span><span style="font-size:10pt;background-color:transparent"> (Bug </span><a href="https://code.google.com/p/chromium/issues/detail?id=321518" style="font-size:10pt;background-color:transparent">321518</a><span style="font-size:10pt;background-color:transparent">). This extended attribute forces some additional type checking, per spec, raising </span><code style="font-size:10pt;background-color:transparent">TypeError</code><span style="font-size:10pt;background-color:transparent"> on failure.</span></p>
<p>Usage: <code>[TypeChecking]</code> can be specified on interfaces, attributes, and methods. If on an interface, it applies to all members; if on an attribute, it applies to getter and setter; if on a method, it applies to all parameters and the return value. Valid values are <code>Interface</code>, which check that an interface is implemented, and nullability (error if <code>null</code> passed to non-nullable parameter or attribute):</p>
<div class="sites-codeblock sites-codesnippet-block">
<pre style="margin:0px"><code>[TypeChecking=Interface] attribute Foo? x;
[TypeChecking=Interface] Foo f(Bar? x);</code></pre>
</div>
<h3><a name="TOC-TreatReturnedNullStringAs-m-a-"></a>[TreatReturnedNullStringAs] (m, a)</h3>
<p>Summary: [TreatReturnedNullStringAs] controls the behavior when a Blink null string is returned from the Blink implementation.</p>
<p>Usage: The possible usage is [TreatReturnedNullStringAs=Null], [TreatReturnedNullStringAs=Undefined]. They can be specified on DOMString attributes or methods that return a DOMString value:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[TreatReturnedNullStringAs=Null] attribute DOMString str;
[TreatReturnedNullStringAs=Undefined] DOMString func();
</pre>
<ul><li>[TreatReturnedNullStringAs=Null] indicates that if the returned DOMString is a Blink null string, the returned value is treated as a JavaScript null.</li>
<li>[TreatReturnedNullStringAs=Undefined] indicates that if the returned DOMString is a Blink null string, the returned value is treated as a JavaScript undefined.</li></ul>
<p>Without [TreatReturnedNullStringAs=...], if the returned DOMString is a Blink null string, then the returned value is treated as a JavaScript empty string.</p>
<p>Note that what should be specified on [TreatReturnedNullStringAs=...] depends on the spec of each attribute or method.</p>
<h3><a name="TOC-WillBeGarbageCollected-i-"></a><font size="3"><b>[WillBeGarbageCollected] (i)</b></font></h3>
<p><span style="font-size:10pt;background-color:transparent">Summary: The [<font face="courier new, monospace">WillBeGarbageCollected</font>] attributes indicates that if </span><span style="font-size:10pt;background-color:transparent">Oilpan is enabled, the object resides on its heap and is controlled by </span><span style="font-size:10pt;background-color:transparent">the Oilpan garbage collector.</span></p>
<p><span style="font-size:10pt;background-color:transparent">Usage: [</span><font face="courier new, monospace" style="font-size:10pt;background-color:transparent">WillBeGarbageCollected</font><span style="font-size:10pt;background-color:transparent">] can be specified on interfaces, and is inherited:</span></p>
<div class="sites-codeblock sites-codesnippet-block"><code>[ </code><br />
<code>  WillBeGarbageCollected </code><br />
<code>] interface AnimationEffect { ... };</code></div>
<p><span style="font-size:10pt;background-color:transparent">The attribute supports transitioning an object to Oilpan, allowing it </span><span style="font-size:10pt;background-color:transparent">to be Oilpan controlled if Oilpan is universally enabled, but implemented as </span><span style="font-size:10pt;background-color:transparent">a 'normal' ref-counted object if not. The generated bindings code will </span><span style="font-size:10pt;background-color:transparent">handle either case, depending on that compile-time setting (i.e., </span><span style="font-size:10pt;background-color:transparent">Oilpan enabled or not.)</span></p>
<p><span style="font-size:10pt;background-color:transparent">When the Oilpan transition period is over, support for </span><span style="font-size:10pt;background-color:transparent">[<font face="courier new, monospace">WillBeGarbageCollected</font>] will be phased out. So, unless there are </span><span style="font-size:10pt;background-color:transparent">existing constraints why you have to use the conditional </span><span style="font-size:10pt;background-color:transparent">[<font face="courier new, monospace">WillBeGarbageCollected</font>], using [<font face="courier new, monospace">GarbageCollected</font>] is preferable.</span></p>
<p><span style="font-size:10pt;background-color:transparent"><br />
</span></p>
<h2><a name="TOC-Rare-Blink-specific-IDL-Extended-Attributes"></a>Rare Blink-specific IDL Extended Attributes</h2>
<div>
<div>
<p>These extended attributes are rarely used, generally only in one or two places. These are often replacements for [Custom] bindings, and may be candidates for deprecation and removal.</p>
<h3><a name="TOC-CachedAttribute-a-"></a>[CachedAttribute] (a)</h3>
<p><span style="font-size:10pt">Summary: For performance optimization, <code>[CachedAttribute]</code> indicates that a wrapped object should be cached on a DOM object. Rarely used (only by IndexDB).</span></p>
<p>Usage: <code>[CachedAttribute]</code> can be specified on attributes, and takes a required value, generally called <code>is*Dirty</code> (esp. <code>isValueDirty</code>):</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface HTMLFoo {
    [CachedAttribute=isKeyDirty] attribute DOMString key;
    [CachedAttribute=isValueDirty] attribute SerializedScriptValue serializedValue;
};
</pre>
<p>Without <code>[CachedAttribute]</code>, the <code>key</code> getter works in the following way:</p>
<ol><li><code>HTMLFoo::key()</code> is called in Blink.</li>
<li>The result of <code>HTMLFoo::key()</code> is passed to <code>toV8()</code>, and is converted to a wrapped object.</li>
<li>The wrapped object is returned.</li>
</ol>
<p>In case where <code>HTMLFoo::key()</code> or the operation to wrap the result is costly, you can cache the wrapped object onto the DOM object. With <code>CachedAttribute</code>, the key getter works in the following way:</p>
<ol><li>If the wrapped object is cached, the cached wrapped object is returned. That's it.</li>
<li>Otherwise, <code>HTMLFoo::key()</code> is called in Blink.</li>
<li>The result of <code>HTMLFoo::key()</code> is passed to <code>toV8()</code>, and is converted to a wrapped object.</li>
<li>The wrapped object is cached.</li>
<li>The wrapped object is returned.</li>
</ol>
<p><code>[CachedAttribute]</code> is particularly useful for serialized values, since deserialization can be costly. Without <code>[CachedAttribute]</code>, the <code>serializedValue</code> getter works in the following way:</p>
<ol><li><code>HTMLFoo::serializedValue()</code> is called in Blink.</li>
<li>The result of <code>HTMLFoo::serializedValue()</code> is deserialized.</li>
<li>The deserialized result is passed to <code>toV8()</code>, and is converted to a wrapped object.</li>
<li>The wrapped object is returned.</li>
</ol>
<p>In case where <code>HTMLFoo::serializedValue()</code>, the deserialization or the operation to wrap the result is costly, you can cache the wrapped object onto the DOM object. With <code>[CachedAttribute]</code>, the <code>serializedValue</code> getter works in the following way:</p>
<ol><li>If the wrapped object is cached, the cached wrapped object is returned. That's it.</li>
<li>Otherwise, <code>HTMLFoo::serializedValue()</code> is called in Blink.</li>
<li>The result of HTMLFoo::serializedValue() is deserialized.</li>
<li>The deserialized result is passed to toJS() or toV8(), and is converted to a wrapped object.</li>
<li>The wrapped object is cached.</li>
<li>The wrapped object is returned.</li>
</ol>
<p>Note that you should cache attributes if and only if it is really important for performance. Not only does caching increase the DOM object size, but also it increases the overhead of "cache-miss"ed getters. In addition, setters always need to invalidate the cache.</p>
<p><span style="font-size:10pt"><code>[CachedAttribute]</code> </span><span style="font-size:10pt">takes a required parameter which the name of a method to call on the implementation object. The method should take <code>void</code> and return <code>bool</code>. Before the cached attribute is used, the method will be called. If the method returns true the cached value is not used, which will result in the accessor being called again. This allows the implementation to both gain the performance benefit of caching (when the conversion to a script value can be done lazily) while allowing the value to be updated. The typical use pattern is:</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">// Called internally to update value
void Object::setValue(Type data)
{
    m_data = data;
    m_attributeDirty = true;
}

// Called by generated binding code
bool Object::isAttributeDirty()
{
    return m_attributeDirty;
}

// Called by generated binding code if no value cached or isAttributeDirty() returns true
ScriptValue Object::attribute(ScriptExecutionContext* context)
{
    m_attributeDirty = false;
    return convertDataToScriptValue(m_data);
}</pre>
</div>
<h3><a name="TOC-CheckSecurity-i-m-a-"></a>[CheckSecurity] (i, m, a)</h3>
<h3><a name="TOC-DoNotCheckSecurity-m-a-"></a>[DoNotCheckSecurity] (m, a)</h3>
<p>Summary: Check whether a given access is allowed or not, in terms of the same-origin security policy. Used in Location.idl, Window.idl, and a few HTML*Element.idl.</p>
<p>If the security check is necessary, you should specify <code>[CheckSecurity]</code>. <i style="font-size:13px;background-color:transparent"><font color="#ff0000">This is very important for security.</font></i></p>
<div>
<p style="font-size:13px;font-weight:normal">Usage: <code>[CheckSecurity=Frame]</code> can be specified on interfaces, which enables a <i>frame</i> security check for all members <span style="background-color:transparent">(methods and attributes) </span><span style="background-color:transparent">of the interface. This can then be selectively disabled with</span><span style="background-color:transparent"> </span><code style="background-color:transparent">[DoNotCheckSecurity]</code><span style="background-color:transparent">; this is only done in Location.idl and Window.idl. On attributes, </span><code style="background-color:transparent">[DoNotCheckSecurity]</code><span style="background-color:transparent"> takes an optional identifier, as </span><span style="background-color:transparent;color:rgb(0,96,0);font-family:monospace">[DoNotCheckSecurity=Setter]</span><span style="background-color:transparent"> (used only one place, <code>Location.href</code>, since setting <code>href</code> <i>changes</i> the page, which is ok, but reading <code>href</code> leaks information</span><span style="background-color:transparent">).</span></p>
<div style="font-size:13px;font-weight:normal">
<ul><li><code>[DoNotCheckSecurity]</code> on a method disables the security check for the method.</li>
<li><code>[DoNotCheckSecurity]</code> on an attribute disables the security check for a getter and setter of the attribute; for read only attributes this is just the getter.</li>
<li><code>[DoNotCheckSecurity=Setter]</code> on an attribute disables the security check for a setter of the attribute, but not the getter.</li></ul>
</div>
</div>
<div><br />
</div>
<div class="sites-codeblock sites-codesnippet-block" style="font-size:13px;font-weight:normal">
<pre>[
    CheckSecurity=Frame,
] interface DOMWindow {
    attribute DOMString str1;
    [DoNotCheckSecurity] attribute DOMString str2;
    [DoNotCheckSecurity=Setter] attribute DOMString str3;
    void func1();
    [DoNotCheckSecurity] void func2();
};</pre>
</div>

Consider the case where you access window.parent from inside an iframe that comes from a different origin. While it is allowed to access window.parent, it is not allowed to access window.parent.document. In such cases, you need to specify <code style="font-size:13px;font-weight:normal">[CheckSecurity]</code> in order to check whether a given DOM object is allowed to access the attribute or method, in terms of the same-origin security policy.</div>
<div><br />
</div>
<div><code>[CheckSecurity=Node]</code> can be specified on methods and attributes, which enables a <i>node</i> security check on that member. In practice all attribute uses are read only, and method uses all also have <code>[RaisesException]</code>:</div>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[CheckSecurity=Node] readonly attribute Document contentDocument;
[CheckSecurity=Node] SVGDocument getSVGDocument();</pre>
<div>In terms of the same-origin security policy, node.contentDocument should return undefined if the parent frame and the child frame are from different origins.</div>
<h3><a name="TOC-CustomConstructor-i-"></a>[CustomConstructor] (i)</h3>
<p style="font-size:13px"><span style="font-size:10pt">Summary: They allow you to write custom bindings for constructors.</span></p>
<p>Usage: They can be specified on interfaces.<span style="font-size:10pt;font-weight:normal;background-color:transparent"> </span><b style="font-size:10pt;font-weight:normal;background-color:transparent;font-style:italic">Strongly discouraged.</b><span style="font-size:10pt;font-weight:normal;background-color:transparent"> As with <code>[Custom]</code>, it is generally better to modify the code generator. Incompatible with <code>[Constructor]</code> </span><span style="background-color:transparent">– you cannot mix custom constructors and generated constructors.</span></p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    CustomConstructor(float x, float y, optional DOMString str),
] interface XXX {
    ...
};</pre>
<p style="font-size:13px;font-weight:normal"><span style="background-color:transparent">Note that the arguments of the constructor MUST be specified so that the </span><code style="background-color:transparent">length</code><span style="background-color:transparent"> property of the interface object is properly set, even though they do not affect the signature of the custom Blink code. Multiple <code>[CustomConstructor]</code> extended attributes are allowed; if you have overloading, this is good style, as it documents the interface, though the only effect on generated code is to change <code>length</code> (you need to write overload resolution code yourself).</span></p>
<span style="font-size:10pt;font-weight:normal">Consider the following example:</span>
<pre style="font-size:10pt;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    CustomConstructor(float x, float y, optional DOMString str),
] interface XXX {
    ...
};</pre>
<p style="font-size:13px;font-weight:normal">Then you can write custom bindings in Source/bindings/v8/custom/V8XXXConstructorCustom.cpp:</p>
<pre style="font-size:13px;font-weight:normal;border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">v8::Handle&lt;v8::Value&gt; V8XXX::constructorCallback(const v8::Arguments&amp; args)
{
   ...;
}</pre><h3><a name="TOC-FlexibleArrayBufferView-Summary:-FlexibleArrayBufferView-wraps-a-parameter-that-is-known-to-be-an-ArrayBufferView-or-a-subtype-of-e.g.-typed-arrays-with-a-FlexibleArrayBufferView.-The-FlexibleArrayBufferView-itself-can-then-either-refer-to-an-actual-ArrayB"></a><div><b><font size="3">[FlexibleArrayBufferView]</font></b></div><div><b><font size="3"><br /></font></b></div><div><div style="font-size:13.3333330154419px;font-weight:normal"><div style="font-size:13.3333330154419px">Summary: [<code>FlexibleArrayBufferView</code>] wraps a parameter that is known to be an ArrayBufferView (or a subtype of, e.g. typed arrays) with a FlexibleArrayBufferView. </div><div style="font-size:13.3333330154419px"><br /></div><div style="font-size:13.3333330154419px">The FlexibleArrayBufferView itself can then either refer to an actual ArrayBufferView or a temporary copy (for small payloads) that may even live on the stack. The idea is that copying the payload on the stack and referring to the temporary copy saves creating global handles (resulting in weak roots) in V8. Note that <span style="font-size:13.3333330154419px;background-color:transparent">[</span><code style="font-size:13.3333330154419px;background-color:transparent">FlexibleArrayBufferView</code><span style="font-size:13.3333330154419px;background-color:transparent">]  will actually result in a TypedFlexibleArrayBufferView wrapper for typed arrays.</span></div><div><br /></div></div><div style="font-size:13.3333330154419px;font-weight:normal">Usage: Applies to arguments of methods. See modules/webgl/WebGLRenderingContextBase.idl for an example.</div></div></h3><h3><a name="TOC-KeepAttributeAliveForGC-a-"></a>[KeepAttributeAliveForGC] (a)</h3>
<p>Summary: <code>[KeepAttributeAliveForGC]</code> forces the attribute wrapper to be kept alive. Used in only one place, may be removed when we implement <code>[ReachableFrom]</code> and <code>[ReachableTo]</code>.</p>
<div>This behavior is default for read only attributes of wrapper type (interface types, with some exceptions), with some exceptions.</div>
<div>For performance reasons we keep the attribute wrapper alive while the owner wrapper is alive, because the attribute never changes.</div>
<div><br />
</div>
<div>Usage: Applies to attributes, takes no arguments.</div>
<div><br /></div><div><div style="font-size:13.3333330154419px"><b><font size="3">[PermissiveDictionaryConversion] (p, d)</font></b></div><div><b><font size="3"><br /></font></b></div>
</div>
<div>Summary: [<code>PermissiveDictionaryConversion</code>] relaxes the rules about what types of values may be passed for an argument of dictionary type.</div>
<div><br />
</div>
<div>Ordinarily when passing in a value for a dictionary argument, the value must be either undefined, null, or an object. In other words, passing a boolean value like true or false must raise TypeError. The PermissiveDictionaryConversion extended attribute ignores non-object types, treating them the same as undefined and null. In order to effect this change, this extended attribute must be specified both on the dictionary type as well as the arguments of methods where it is passed. It exists only to eliminate certain custom bindings.</div>
<div><br />
</div>
<div>Usage: applies to dictionaries and arguments of methods. Takes no arguments itself.</div>
<div style="font-size:13px;font-weight:normal">
<h3><a name="TOC-URL-a-"></a>[URL] (a)</h3>
<div>
<p><span style="font-size:10pt">Summary: [URL] indicates that a given DOMString represents a URL.</span></p>
<p>Usage: [URL] can be specified on DOMString attributes that have [Reflect] extended attribute specified only:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[Reflect, URL] attribute DOMString url;<br /></pre>
<p>You need to specify [URL] if a given DOMString represents a URL, since getters of URL attributes need to be realized in a special routine in Blink, i.e. Element::getURLAttribute(...). If you forgot to specify [URL], then the attribute getter might cause a bug.</p>
<p>Only used in some HTML*ELement.idl files and one other place.</p>
</div>
</div>
<div style="font-size:13px;font-weight:normal"></div>
<h2><a name="TOC-3"></a>
<div style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-size:13px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)">
<div style="font-size:13px;font-weight:normal">
<div></div>
</div>
</div>
</h2>
<div>
<h3><a name="TOC-NoImplHeader-i-"></a>[NoImplHeader] (i)</h3>
<div>
<p><span style="font-size:10pt">Summary: [NoImplHeader] indicates that a given interface does not have a corresponding header file in the impl side.</span></p>
<p>Usage: [NoImplHeader] can be specified on any interface:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;padding:0.25em;background-color:rgb(247,247,247)">[
    NoImplHeader,
] interface XXX {
    ...;
};</pre>
<p>Without [NoImplHeader], the IDL compiler assumes that there is XXX.h in the impl side. With [NoImplHeader], you can tell the IDL compiler that there is no XXX.h. You can use [NoImplHeader] when all of the DOM attributes and methods of the interface are implemented in Blink-in-JS and thus don't have any C++ header file.</p>
</div>
</div>
<div></div>
<h2><a name="TOC-4"></a>
<div style="font-size:13px;font-weight:normal">
<div></div>
</div>
</h2>
<h2 style="color:rgb(0,0,0);font-family:Arial,Verdana,sans-serif;font-style:normal;font-variant:normal;letter-spacing:normal;line-height:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255)"><a name="TOC-Temporary-Blink-specific-IDL-Extended-Attributes"></a>Temporary Blink-specific IDL Extended Attributes</h2>
<div>These extended attributes are <i style="font-weight:bold">temporary</i> and are only in use while some change is in progress. Unless you are involved with the change, you can generally ignore them, and should not use them.</div>
<div>
<ul><li><span style="font-size:10pt"><code>[ExposeJSAccessors]</code> </span>– used in transition to expose accessors on the JS objects, as part of moving to prototype chain (haraken@)</li></ul>
<div style="font-size:13px;font-weight:normal">
</div>
<h3><a name="TOC-LegacyTreatAsPartialInterface-i-"></a>[LegacyTreatAsPartialInterface] (i)</h3>
<div>Summary: <code>[LegacyTreatAsPartialInterface]</code> on an interface that is the target of an <code>implements</code> statement means that the interface is treated as a partial interface, meaning members are accessed via static member functions in a separate class, rather than as instance methods on the instance object <code>*impl</code> or class methods on the C++ class implementing the (main) interface. This is legacy from original implementation of <code>implements</code>, and is being removed (<span style="font-size:10pt;background-color:transparent">Bug </span><a href="https://code.google.com/p/chromium/issues/detail?id=360435" style="font-size:10pt;background-color:transparent">360435</a><span style="font-size:10pt;background-color:transparent">, nbarth@).</span></div>
</div>
<h2><a name="TOC-Discouraged-Blink-specific-IDL-Extended-Attributes"></a>Discouraged Blink-specific IDL Extended Attributes</h2>
<div>These extended attributes are <i style="font-weight:bold">discouraged</i> – they are not deprecated, but they should be avoided and removed if possible.</div>
<h3><a name="TOC-DoNotCheckConstants-i-"></a>[DoNotCheckConstants] (i)</h3>
<p><span style="font-size:10pt">Summary: [DoNotCheckConstants] indicates that constant values in an IDL file can be different from constant values in Blink implementation.</span></p>
<p>Usage: [DoNotCheckConstants] can be specified on interfaces:</p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    DoNotCheckConstants,
] interface XXX {
    const unsigned short NOT_FOUND_ERR = 12345;
    const unsigned short SYNTAX_ERR = 12346;
};</pre>
<p>By default (i.e. without [DoNotCheckConstants]), compile-time assertions are inserted to check if the constant values defined in IDL files are equal to the constant values in Blink implementation. In the above example, if NOT_FOUND_ERR were implemented as 100 in Blink, the build will fail.</p>
<p>Note that basically all constant values are defined in the spec, and thus the values in Blink implementation should be equal to the values defined in the spec. If you really want to introduce non-speced constant values and allow different values between IDL files and Blink implementation, you can specify [DoNotCheckConstants] to skip the compile-time assertions.</p>
<h3><a name="TOC-ImplementedAs-i-m-s-a-"></a>[ImplementedAs] (i, m, s, a)</h3>
<p>Summary: [ImplementedAs] specifies a method name in Blink, if the method name in an IDL file and the method name in Blink are different.</p>
<p>[ImplementedAs] is <i>discouraged.</i> Please use only if absolutely necessary: rename Blink internal names to align with IDL.</p>
<p><span style="font-size:10pt">Usage: The possible usage is [ImplementedAs=XXX], where XXX is a method name in Blink. [ImplementedAs] can be specified on interfaces, methods and attributes.</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    ImplementedAs=DOMPath,
] interface Path {
    [ImplementedAs=classAttribute] attribute int class;
    [ImplementedAs=deleteFunction] void delete();
}; <br /></pre>
<p>Method names in Blink default to being the same as the name in an IDL file. In some cases this is not possible, e.g., <code>delete</code> is a C++ reserved word. In such cases, you can explicitly specify the method name in Blink by [ImplementedAs]. Generally the [ImplementedAs] name should be in lowerCamelCase. You should <i>not</i> use [ImplementedAs] simply to avoid renaming Blink methods.</p>
<h2><a name="TOC-Deprecated-Blink-specific-IDL-Extended-Attributes"></a>Deprecated Blink-specific IDL Extended Attributes</h2>
<div>These extended attributes are <b style="font-style:italic">deprecated</b>, or are under discussion for deprecation. They should be avoided.</div>
<div>
<div>
<h3><a name="TOC-Conditional-i-m-a-deprecated"></a>[Conditional] (i,m,a) <i>deprecated</i></h3>
</div>
<div>
<p><span style="font-size:10pt;background-color:rgb(255,255,0)"><b>FIXME: Should remove this extended attribute in favor of runtime flag control</b></span></p>
<p><span style="font-size:10pt">Summary: [Conditional] inserts "#if ENABLE(SOME_FLAG) ... #endif" into the generated code.</span></p>
<p>Usage: [Conditional] can be specified on interfaces, methods and attributes.</p>
<p>[Conditional] is <i>inherited: </i>if [Conditional] is specified on an interface, it means that [Conditional] is specified on all attributes and methods of the interface.</p>
<p>Multiple values can be combined by either &amp; or | (meaning AND or OR, as usual), as in [Conditional=Foo&amp;Bar] (used one place: <span style="background-color:transparent;font-size:10pt">NavigatorContentUtils.idl:[Conditional=NAVIGATOR_CONTENT_UTILS&amp;CUSTOM_SCHEME_HANDLER]), or [Conditional=Foo|Bar], which is not in actual use.</span></p>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">[
    Conditional=INDEXED_DATABASE,
] interface XXX {
    ...
};</pre>
<pre style="border:1px solid rgb(215,215,215);margin-right:1.75em;margin-left:1.75em;background-color:rgb(247,247,247);padding:0.25em">interface XXX {
    [Conditional=INDEXED_DATABASE] attribute DOMString str;
    [Conditional=INDEXED_DATABASE] void open();
};</pre>
<p>[Conditional] is used to enable or disable the generated code based on a "flag". If a given flag is enabled, the generated code is compiled. Otherwise, the generated code is not compiled. Whether a flag is enabled or disabled is controlled (mostly) by Tools/Scripts/build-webkit.</p>
</div>
</div>
<div>
<h3><a name="TOC-Immutable-m-a-DoNotCheckSignature-m-possibly-deprecated"></a>[Immutable] (m, a), [DoNotCheckSignature] (m) <i style="background-color:transparent;font-size:10pt;font-weight:normal">possibly deprecated</i></h3>
Might be deprecated. Discussion is on-going.</div>
<div>[Immutable] is only used 3 places: WebKitCSSMatrix (m), SVGMatrix (m), and SVGZoomEvent (a).</div>
<div><span style="background-color:transparent;font-size:10pt">[DoNotCheckSignature] is used only 1 place: Window.</span></div>
<h2><a name="TOC-Internal-use-Blink-specific-IDL-Extended-Attributes"></a>Internal-use Blink-specific IDL Extended Attributes</h2>
<div>These extended attributes are added internally by the compiler, and not intended to be literally included in <code>.idl</code> files; they are documented here for clarity and completeness.</div>
<h3><a name="TOC-PartialInterfaceImplementedAs-m-a-c-"></a>[PartialInterfaceImplementedAs] (m, a, c)</h3>
<div>Added to members of a partial interface definition (and implemented interfaces with <code>[LegacyTreatAsPartialInterface]</code>, due to Bug <a href="https://code.google.com/p/chromium/issues/detail?id=360435">360435</a>) when merging <code>.idl</code> files for two reasons. Firstly, <span style="background-color:transparent;font-size:10pt">these members are implemented in a separate class from the class for the (main) interface definition, so this name data is needed. This is most clearly <i>written</i> as an extended attribute on the partial interface definition, but this is discarded during merging (only the members are merged, into flat lists of methods, attributes, and constants), and thus this extended attribute is put on the members. </span><span style="background-color:transparent;font-size:10pt">Secondly, members of partial interface definitions are called differently (via static member functions of the separate class, not instance methods or class methods of the main class), and thus there needs to be a</span><span style="background-color:transparent;font-size:10pt"> flag indicating that the member comes from a partial interface definition.</span></div>
<h2><a name="TOC-Undocumented-Blink-specific-IDL-Extended-Attributes"></a>Undocumented Blink-specific IDL Extended Attributes</h2>
<div><b style="background-color:rgb(255,255,0)">FIXME: The following need documentation:</b></div>
<ul>
<li><span style="font-size:10pt">[PerWorldBindings] :: interacts with [LogActivity]</span></li>
<li><span style="font-size:10pt;background-color:transparent">[OverrideBuiltins] :: used on named accessors</span></li>
<li>[ImplementedInPrivateScript], [OnlyExposedToPrivateScript]</li></ul>
<hr />
<div>Derived from: <a href="http://trac.webkit.org/wiki/WebKitIDL" style="color:rgb(85,26,139)">http://trac.webkit.org/wiki/WebKitIDL</a> <i>Licensed</i><i> under <a href="http://www.webkit.org/coding/bsd-license.html">BSD</a>:</i></div>
<div><br />
</div>
<div>
<div></div>
BSD License
<p>Copyright (C) 2009 Apple Inc. All rights reserved.</p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>
<p>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p>
<p>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p>
<p>THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </p>
</div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/a/chromium.org/dev/blink/webidl/blink-idl-extended-attributes">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="https://ssl.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXtfSHKvVcqk9cQ5j7RW4S-CMxw0DpCwW1i3YvBDlFNKfarl4opg3P33FAjKHZzLQYy1DNJsa6-TgagwJsH5dv56EYgGh7MVMrK-ln_fT5VGlKPAL3pbQMfwapV5oHHTHnWIOCIZ/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
