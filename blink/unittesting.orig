<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/blink","deleted":false,"title":"Blink","dir":"ltr"},{"path":"/blink/unittesting","deleted":false,"title":"Unit Testing in Blink","dir":"ltr"}];
  var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttp://sites.google.com/a/chromium.org/dev/blink/unittesting\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"http://csi.gstatic.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["http://www.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["http://www.gstatic.com/sites/p/56e332/system/js/codemirror.js","http://www.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","http://www.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","http://www.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","http://www.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/blink","parentWuid":"wuid:gx:1c15db3ef1df1880","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Unit Testing in Blink","locale":"en","wuid":"wuid:gx:10473f1bc1c219af","revision":24,"path":"/blink/unittesting","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"unittesting","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Unit Testing in Blink - The Chromium Projects" />
<meta itemprop="name" content="Unit Testing in Blink - The Chromium Projects" />
<meta property="og:title" content="Unit Testing in Blink - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Unit Testing in Blink - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="http://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="http://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/blink" dir="ltr">Blink</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Unit Testing in Blink</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div style="text-align:center"><b><font color="#ff0000" size="4">WARNING: This document is a work in progress!</font></b></div>
<div><br />
</div>
<div>
<div><div class="sites-embed-align-left-wrapping-off"><div class="sites-embed-border-off sites-embed sites-embed-full-width" style="width:100%;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-6"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Unit-Testing-Tools"><strong>1 </strong>Unit Testing Tools</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-GTest---Google-Unit-Testing-Framework"><strong>1.1 </strong>GTest - Google Unit Testing Framework</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Further-Documentation"><strong>1.1.1 </strong>Further Documentation</a></li><li class="goog-toc"><a href="#TOC-Tip:-GTest-and-regular-expressions-regexp-"><strong>1.1.2 </strong>Tip: GTest and regular expressions (regexp)</a></li><li class="goog-toc"><a href="#TOC-Tip:-Using-GMock-matchers-with-GTest"><strong>1.1.3 </strong>Tip: Using GMock matchers with GTest</a></li><li class="goog-toc"><a href="#TOC-Error:-Has-the-template-typename-T-operator-T-private."><strong>1.1.4 </strong>Error: Has the "template&lt;typename T&gt; operator T*()" private.</a></li></ol></li><li class="goog-toc"><a href="#TOC-GMock---Google-C-Mocking-Framework"><strong>1.2 </strong>GMock - Google C++ Mocking Framework</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Further-Documentation1"><strong>1.2.1 </strong>Further Documentation</a></li><li class="goog-toc"><a href="#TOC-Tip:-GMock-and-regular-expressions-regexp-"><strong>1.2.2 </strong>Tip: GMock and regular expressions (regexp)</a></li><li class="goog-toc"><a href="#TOC-Tip:-Mocking-non-virtual-functions"><strong>1.2.3 </strong>Tip: Mocking non-virtual functions</a></li><li class="goog-toc"><a href="#TOC-Tip:-Mock-Injection-Dependency-Injection-"><strong>1.2.4 </strong>Tip: Mock Injection (Dependency Injection)</a></li><li class="goog-toc"><a href="#TOC-Tip:-Mocks-and-OwnPtr-PassOwnPtr-"><strong>1.2.5 </strong>Tip: Mocks and OwnPtr (PassOwnPtr)</a></li></ol></li></ol></li><li class="goog-toc"><a href="#TOC-Test-Helpers"><strong>2 </strong>Test Helpers</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Operator-"><strong>2.1 </strong>Operator==</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Operator-Gotchas---Namespacing"><strong>2.1.1 </strong>Operator== Gotchas - Namespacing</a></li></ol></li><li class="goog-toc"><a href="#TOC-Pretty-Printers"><strong>2.2 </strong>Pretty Printers</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Pretty-Printers-Gotchas---Namespace"><strong>2.2.1 </strong>Pretty Printers Gotchas - Namespace</a></li><li class="goog-toc"><a href="#TOC-Pretty-Printers-Gotchas---Type-matching"><strong>2.2.2 </strong>Pretty Printers Gotchas - Type matching</a></li></ol></li></ol></li><li class="goog-toc"><a href="#TOC-Future-Proposals"><strong>3 </strong>Future Proposals</a></li></ol></div></div></div></div></div>
<br />
</div>
<div><br />
</div>
<h2><a name="TOC-Unit-Testing-Tools"></a>Unit Testing Tools</h2>
<div>GTest and GMock are both imported into Blink and can be used in unit tests. Most existing tests are purely GTest based, but GMock is slowly being used more.</div>
<div><br />
</div>
<h3><a name="TOC-GTest---Google-Unit-Testing-Framework"></a>GTest - Google Unit Testing Framework</h3><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><i>"Google's framework for writing C++ tests on a variety of platforms (Linux, Mac OS X, Windows, Cygwin, Windows CE, and Symbian). Based on the xUnit architecture. Supports automatic test discovery, a rich set of assertions, user-defined assertions, death tests, fatal and non-fatal failures, value- and type-parameterized tests, various options for running the tests, and XML test report generation."</i></div></blockquote><h4><a name="TOC-Further-Documentation"></a>Further Documentation</h4>
<div><ul><li><span style="background-color:transparent;font-size:10pt">GTest Project Website - </span><a href="https://code.google.com/p/googletest/" style="background-color:transparent;font-size:10pt" target="_blank">https://code.google.com/p/googletest/</a></li><li>Primer - <a href="https://code.google.com/p/googletest/wiki/Primer" target="_blank">https://code.google.com/p/googletest/wiki/Primer</a></li><li>FAQ - <a href="https://code.google.com/p/googletest/wiki/FAQ" target="_blank">https://code.google.com/p/googletest/wiki/FAQ</a></li><li>Advanced Guide - <a href="https://code.google.com/p/googletest/wiki/AdvancedGuide" target="_blank">https://code.google.com/p/googletest/wiki/AdvancedGuide</a></li></ul></div><h4><a name="TOC-Tip:-GTest-and-regular-expressions-regexp-"></a>Tip: GTest and regular expressions (regexp)</h4><div>If you are using gtest "<a href="https://code.google.com/p/googletest/wiki/AdvancedGuide#How_to_Write_a_Death_Test">Death Tests</a>" or <span style="background-color:transparent;font-size:10pt">GMock's EXPECT_THAT with MatchesRegex or ContainsRegex, you have to <b>be very careful with your regex</b>. </span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><span style="background-color:transparent;font-size:10pt">There is no common syntax between all operating system for character class matches;</span></div><div><ul><li><span style="background-color:transparent;font-size:10pt">Character class short cuts</span><span style="background-color:transparent;font-size:10pt"> are NOT part of the POSIX regex standard and </span><b style="background-color:transparent;font-size:10pt">DO NOT</b><span style="background-color:transparent;font-size:10pt"> work on Mac OS X. It also <b>wont</b> give you a warning saying the regex is invalid.</span></li></ul><span style="background-color:transparent;font-size:10pt"><div class="sites-codeblock sites-codesnippet-block"><code>EXPECT_THAT("abc", MatchesRegex("\w*")) # Does NOT work on Mac OS X.</code></div></span><ul><li><span style="background-color:transparent;font-size:10pt">Character classes (IE the square bracketed kind) </span><b style="background-color:transparent;font-size:10pt">DO NOT</b><span style="background-color:transparent;font-size:10pt"> </span><span style="background-color:transparent"><font size="2">work with the gtest internal regex engine, and thus on Windows. </font>At least<font size="2"> it will warn you that the regex is invalid.</font></span></li></ul><span style="background-color:transparent;font-size:10pt"><div class="sites-codeblock sites-codesnippet-block"><code> EXPECT_THAT("abc", MatchesRegex("[a-c]*")) # Does NOT work on Windows.</code></div></span></div><div><br /></div><div><i>(CL <a href="https://codereview.chromium.org/55983002/" style="background-color:transparent;font-size:10pt">https://codereview.chromium.org/55983002/</a> proposes making chromium only use the gtest internal regex engine which would fix this problem.)</i></div><div><br /></div><h4><a name="TOC-Tip:-Using-GMock-matchers-with-GTest"></a>Tip: Using GMock matchers with GTest</h4>
<div><span style="background-color:transparent;font-size:10pt">You can use GMock EXPECT_THAT and the GMock matchers inside a GTest test for more powerful matching. </span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><span style="background-color:transparent;font-size:10pt">Quick example;</span></div>
<div><span style="background-color:transparent;font-size:10pt">
<div class="sites-codeblock sites-codesnippet-block">
<pre><span>EXPECT_THAT</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(102,0,102)">Foo</span><span style="color:rgb(102,102,0)">(),</span><span> testing::</span><span style="color:rgb(102,0,102)">StartsWith</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(0,136,0)">"Hello"</span><span style="color:rgb(102,102,0)">));</span><span>
EXPECT_THAT</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(102,0,102)">Bar</span><span style="color:rgb(102,102,0)">(),</span><span> testing::</span><span style="color:rgb(102,0,102)">MatchesRegex</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(0,136,0)">"Line \\d+"</span><span style="color:rgb(102,102,0)">));</span><span>
ASSERT_THAT</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(102,0,102)">Baz</span><span style="color:rgb(102,102,0)">(),</span><span> testing::</span><span style="color:rgb(102,0,102)">AllOf</span><span style="color:rgb(102,102,0)">(</span>testing::<span style="color:rgb(102,0,102)">Ge</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(0,102,102)">5</span><span style="color:rgb(102,102,0)">),</span><span> </span>testing::<span style="color:rgb(102,0,102)">Le</span><span style="color:rgb(102,102,0)">(</span><span style="color:rgb(0,102,102)">10</span><span style="color:rgb(102,102,0)">)));</span>

<span style="color:rgb(102,0,102)">Value</span><span> of</span><span style="color:rgb(102,102,0)">:</span><span> </span><span style="color:rgb(102,0,102)">Foo</span><span style="color:rgb(102,102,0)">()</span><span>
  </span><span style="color:rgb(102,0,102)">Actual</span><span style="color:rgb(102,102,0)">:</span><span> </span><span style="color:rgb(0,136,0)">"Hi, world!"</span><span>
</span><span style="color:rgb(102,0,102)">Expected</span><span style="color:rgb(102,102,0)">:</span><span> starts </span><span style="color:rgb(0,0,136)">with</span><span> </span><span style="color:rgb(0,136,0)">"Hello"</span>
</pre>
</div>
</span></div>
<div><span style="background-color:transparent;font-size:10pt"><br />
</span></div>
<div><span style="background-color:transparent;font-size:10pt">More information at;</span></div>
<div>
<ul><li><a href="http://googletesting.blogspot.com.au/2009/10/tott-making-perfect-matcher.html" style="background-color:transparent;font-size:10pt" target="_blank">TotT: Making a Perfect Matcher</a></li>
<li><a href="https://code.google.com/p/googlemock/wiki/CookBook#Using_Matchers_in_Google_Test_Assertions" target="_blank">GMock Cookbook - Using Matchers in Google Test Assertions</a><br />
</li></ul>
</div>
<div><br />
</div><div><h4><a name="TOC-Error:-Has-the-template-typename-T-operator-T-private."></a>Error: Has the "template&lt;typename T&gt; operator T*()" private.</h4><div>More information at <a href="https://code.google.com/p/googletest/issues/detail?id=442" style="background-color:transparent;font-size:10pt">https://code.google.com/p/googletest/issues/detail?id=442</a></div><div><br /></div><div>Workaround:</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>namespace</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> testing {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>namespace</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> internal {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// gtest tests won't compile with clang when trying to EXPECT_EQ a class that</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// has the "template&lt;typename T&gt; operator T*()" private.</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// (See <a href="https://code.google.com/p/googletest/issues/detail?id=442)">https://code.google.com/p/googletest/issues/detail?id=442)</a></font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">//</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Work around is to define this custom IsNullLiteralHelper.</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>char</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">(&amp;IsNullLiteralHelper(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> WebCore::CSSValue&amp;))[</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">2</font><span style="font-family:monospace;font-size:medium;line-height:normal">];</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div></div><div><br /></div></div><div><br /></div><div><br /></div><div><br /></div>
<h3><a name="TOC-GMock---Google-C-Mocking-Framework"></a>GMock - Google C++ Mocking Framework</h3>
<div><a href="https://code.google.com/p/googlemock/">https://code.google.com/p/googlemock/</a></div><div><div><br /></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><i>Inspired by jMock, EasyMock, and Hamcrest, and designed with C++'s specifics in mind, Google C++ Mocking Framework (or GMock for short) is a library for writing and using C++ mock classes.</i></div></div></blockquote><div><h4><a name="TOC-Further-Documentation1"></a><span style="background-color:transparent;font-size:10pt">Further Documentation</span></h4></div><div><ul><li>Blah</li><li>Blah</li></ul><div><br /></div></div><div><h4><a name="TOC-Tip:-GMock-and-regular-expressions-regexp-"></a>Tip: <span style="background-color:transparent;font-size:10pt">GMock and regular expressions (regexp)</span></h4></div><div>GMock uses the gtest for doing the regexs, <a href="http://www.chromium.org/blink/unittesting#TOC-Tip:-GTest-and-regular-expressions-regexp-">see the section under gtest above</a>.</div><div><br /></div>
<h4><a name="TOC-Tip:-Mocking-non-virtual-functions"></a>Tip: Mocking non-virtual functions</h4>
<div>For speed reasons, a majority of Blink's functions are non-virtual. This can make them quite hard to mock. Here are some tips for working around these problems;</div>
<h4><a name="TOC-Tip:-Mock-Injection-Dependency-Injection-"></a>Tip: Mock Injection (Dependency Injection)</h4>
<div><div>Useful documentation:<br /><ul><li><span style="background-color:transparent;font-size:10pt">TotT: Testing Against Interfaces - </span><a href="http://googletesting.blogspot.com.au/2008/07/tott-testing-against-interfaces.html" style="background-color:transparent;font-size:10pt">http://googletesting.blogspot.com.au/2008/07/tott-testing-against-interfaces.html</a></li><li><span style="background-color:transparent;font-size:10pt">TotT: Defeat "Static Cling" - </span><a href="http://googletesting.blogspot.com.au/2008/06/defeat-static-cling.html" style="background-color:transparent;font-size:10pt">http://googletesting.blogspot.com.au/2008/06/defeat-static-cling.html</a></li></ul></div></div><div><br /></div><div><br /></div><div>Using a proxy interface internally in your class;</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// MyClass.h</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// ------------------------------------------------------------</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClass {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>private</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> function1(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>int</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> a, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>int</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> b);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> function2();</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal* instance() { </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> pInstance(); }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> setInstanceForTesting(iExternal* newInstance) { pInstance(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">true</font><span style="font-family:monospace;font-size:medium;line-height:normal">, newInstance); }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> clearInstanceForTesting() { pInstance(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">true</font><span style="font-family:monospace;font-size:medium;line-height:normal">, </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">0</font><span style="font-family:monospace;font-size:medium;line-height:normal">); }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>protected</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        iExternal() { }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>private</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>inline</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal* pInstance(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> set = </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">false</font><span style="font-family:monospace;font-size:medium;line-height:normal">, iExternal* newInstance = </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">0</font><span style="font-family:monospace;font-size:medium;line-height:normal">)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal* defaultInstance = </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>new</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal();</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>static</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternal* instance = defaultInstance;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>if</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> (set) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">                </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>if</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> (!newInstance) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">                    newInstance = defaultInstance;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">                }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">                instance = newInstance;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> instance;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    };</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> aFunction() {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>if</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> (iExternal::instance()-&gt;function2()) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">            iExternal::instance()-&gt;function1(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">1</font><span style="font-family:monospace;font-size:medium;line-height:normal">, </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">2</font><span style="font-family:monospace;font-size:medium;line-height:normal">);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br /></div></div>
<div><br />
</div><div><br /></div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// MyClassTest.cpp</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// ------------------------------------------------------------</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassTest : </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> ::testing::Test {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> iExternalMock : </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClass::iExternal {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        MOCK_METHOD0(function1, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>int</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>int</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">));</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        MOCK_METHOD0(function2, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">());</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    };</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> setInstanceForTesting(MyClass::iExternal&amp; mock) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        MyClass::iExternal::setInstanceForTesting(&amp;mock);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">TEST_F(MyClassTest, aFunctionTest)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    iExternalMock externalMock;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    EXPECT_CALL(externalMock, function2())</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        .WillOnce(Return(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">true</font><span style="font-family:monospace;font-size:medium;line-height:normal">))</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        .WillOnce(Return(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">false</font><span style="font-family:monospace;font-size:medium;line-height:normal">));</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    EXPECT_CALL(externalMock, function1(</span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">1</font><span style="font-family:monospace;font-size:medium;line-height:normal">, </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">2</font><span style="font-family:monospace;font-size:medium;line-height:normal">));</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    setInstanceForTesting(externalMock);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClass c;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    c.aFunction();</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div></div><div><br /></div>
<h4><a name="TOC-Tip:-Mocks-and-OwnPtr-PassOwnPtr-"></a>Tip: Mocks and OwnPtr (PassOwnPtr)</h4>
<div>OwnPtr and mocking objects can be tricky to get right, here is some important information.</div>
<div><br />
</div><div><b><i>The Problem</i></b></div><div><br /></div>
<div>As normal, once you return an object via <span style="background-color:transparent;font-size:10pt">a PassOwnPtr you no longer control the life cycle of the object. This means that you </span><b style="background-color:transparent;font-size:10pt">must not</b><span style="background-color:transparent;font-size:10pt"> use the object as an expectation (EXPECT_CALL) for another function call because;</span></div>
<div>
<ul><li>On each call, GMock checks if any of the expectations match.</li>
<li>On termination, if something went wrong GMock might try to print the expectation (for both matched and unmatched expectations).</li></ul>
<div><br />
</div>
<div>Here is some example code which is <b><font color="#ff0000">WRONG</font></b>:</div>
</div>
<div>
<div>
<ul><li><span style="background-color:transparent;font-size:10pt">At <b><font color="#ff0000">(1)</font></b> myA1 has been deleted, but GMock will check <b>both</b> the mockb EXPECT_CALLs.</span></li>
<li><span style="background-color:transparent;font-size:10pt">At <b><font color="#ff0000">(2)</font></b> both myA1 and myA2 have been deleted, but if EXPECT_CALL is not</span><span style="background-color:transparent;font-size:10pt"> matched GMock may try to print myA1 and myA2.</span></li></ul>
</div>
</div>
<div>
<div class="sites-codeblock sites-codesnippet-block"><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Actual implementation</font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A {};</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> B {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">   </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> use(A&amp; a) {} {}</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> C {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">   B* m_b;</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">   C(B* b): m_b(b) {}</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">   </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> doIt(PassOwnPtr&lt;A&gt; myA) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">     m_b-&gt;use(*myA);</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">     </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// As we own myA it gets deleted here.</font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">   }</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Mocks</font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MockB : </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> B {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">    MOCK_METHOD0(use, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">(A&amp;));</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Test</font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">TEST(MyTest, CDoItTest)</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  OwnPtr&lt;A&gt; myA1 = adoptPtr(</span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>new</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A());</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  OwnPtr&lt;A&gt; myA2 = adoptPtr(</span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>new</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A());</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  MockB mockb;</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  EXPECT_CALL(mockb, use(Ref(*myA1.get()))); </span><span style="color:rgb(0,0,255);font-family:monospace;font-size:medium;line-height:normal">// Ref() means "is a reference to"</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  EXPECT_CALL(mockb, use(Ref(*myA2.get())));</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  C c(&amp;mockb);</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  c.doIt(myA1.release());</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  c.doIt(myA2.release()); </span><font style="font-family:monospace;font-size:medium;line-height:normal"><font color="#0000ff">// </font><b><font color="#ff0000">(1)</font></b></font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// </font><font color="#ff0000" style="font-family:monospace;font-size:medium;line-height:normal"><b>(2)</b></font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div>
</div>
<div><br /></div>
<div><b><i>Solutions that don't work
</i></b></div><div><br /></div><div>Creating a specialization of OwnedPtrDeleter </div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><span style="background-color:transparent;font-size:10pt"><code>template &lt;&gt; </code></span><span style="background-color:transparent;font-size:10pt"><code>struct OwnedPtrDeleter&lt;MyClass&gt; {}</code></span></div></div></blockquote><div><br /></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><b>   Why?</b></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px">The OwnedPtrDeleter specialization must be visible at the location that the OwnPtr/PassOwnPtr is created.</blockquote></blockquote><div><br /></div><div><br /></div><div><br /></div><div><br /></div>
<h2><a name="TOC-Test-Helpers"></a>Test Helpers</h2>
<div>Test helpers are an important part of making Blink easier to test for everyone. The more test helpers that exist, the easier it is to write new unit tests as you have to write less boilerplate code and find it easier to debug failing tests.</div>
<div><br />
</div>
<div>Test helpers include;</div>
<div>
<ul><li>Pretty printing functions for types.</li>
<li>Shared fake implementations of complex types.</li>
<li>Quick creation functions for types.</li><li><code>operator==</code> definitions to allow <code>EXPECT_EQ</code> and comparisons in <code>EXPECT_CALL</code> mocks to work. </li></ul>
<span style="background-color:transparent;font-size:10pt">Test helpers <b>should;</b></span></div>
<div>
<ul><li><span style="background-color:transparent;font-size:10pt">be define in a "XXXTestHelper.h" file, where XXX is the type (or type group) that it helps (there might also be a XXXTestHelper.cpp in rare cases).<br />
<br />
</span></li>
<li><span style="background-color:transparent;font-size:10pt">have some basic tests to make sure they work. <b><font color="#cc0000">N</font></b></span><span style="background-color:transparent;font-size:10pt"><b><font color="#cc0000">obody wants to debug test helpers while writing their own tests!</font></b></span></li>
<ul><li><span style="background-color:transparent;font-size:10pt">This is specially important for PrintTo functions to make sure they actually print what you expect. You can use the <code>EXPECT_THAT</code> with Regex from GMock to make these tests easier to write.</span></li>
<li><span style="background-color:transparent;font-size:10pt">These should be in a XXXTestHelperTest.cpp file (shouldn't need a header file).</span></li></ul></ul></div><div>
<h3><a name="TOC-Operator-"></a>Operator==</h3>Both the <code>EXPECT_EQ</code> and the <code>EXPECT_CALL</code> methods use <code>a == b</code> to compare if two objects are equal. However for many reasons you don't want this operator to be generally available in Blink. You can define the operator in the test helper instead and then it will only be available during tests. </div><div><br /></div><div>Unlike PrintTo, operator== is not a template so the normal type hierarchy applies.</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>operator</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">==(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> TYPE&amp; a, </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> TYPE&amp; b)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> SOMETHING</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div></div><div><br /></div><div><h4><a name="TOC-Operator-Gotchas---Namespacing"></a><b>Operator== Gotchas - Namespacing</b></h4><div>The <b>operator==</b> MUST be define in the same namespace as the type for <code>EXPECT_EQ</code> to work. For example, if type is <code>::WebCore::AnimatableValue</code> the operator must be in the <code>::WebCore</code> namespace.</div><div><br /></div><h3><a name="TOC-Pretty-Printers"></a>Pretty Printers</h3>
<div>Pretty printers make it much easier to see what is going on in your test and why a match isn't working. They should be created for any simple type which has a useful string representation.</div>
<div><br />
</div>
<div><br />
</div>
<div>
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><code>void PrintTo(const A&amp; a, ::std::ostream* os)</code></div>
<div><code>{</code></div>
<div><code>    *os &lt;&lt; "A@" &lt;&lt; &amp;a;</code></div>
<div><code>}</code></div>
</div>
</div>
<div><br />
</div>
<div>More Information on creating pretty printers can be found at <a href="https://code.google.com/p/googletest/wiki/AdvancedGuide#Teaching_Google_Test_How_to_Print_Your_Values" target="_blank">GTest Advanced Guide: Teaching Google Test How to Print Your Values</a>.</div>
<h4><a name="TOC-Pretty-Printers-Gotchas---Namespace"></a><b>Pretty Printers Gotchas - Namespace</b></h4>
<div>Pretty Printers <b>must</b> be define in the same namespace as the class which it is printing.</div>
<div><br />
</div>
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>namespace</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A{};</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<br style="font-family:monospace;font-size:medium;line-height:normal" />
<font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>namespace</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> {</span><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">  </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> PrintTo(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> A&amp; a, ::std::ostream* os) {} </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Never called</font><br style="font-family:monospace;font-size:medium;line-height:normal" />
<span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div>
</div>
<div>
<h4><a name="TOC-Pretty-Printers-Gotchas---Type-matching"></a><b>Pretty Printers Gotchas - Type matching</b></h4>
</div>
<div>Pretty Printers only work on <b>exact</b> and <b>known</b> type match. This means that;</div>
<div>
<ul><li><span style="background-color:transparent;font-size:10pt">A PrintTo for a base class will not apply to children classes.</span></li>
<li><span style="background-color:transparent;font-size:10pt">A PrintTo for a specific class will not apply when that class is referenced/pointed to as a base class.</span></li></ul></div><div>Further information at the gtest bug tracker - <a href="https://code.google.com/p/googletest/issues/detail?id=443">https://code.google.com/p/googletest/issues/detail?id=443</a></div><div><br /></div><div>This is hard to understand, but shown by the following example (also attached as printto-confusing.cpp).</div>
<div><br />
</div>
<div></div>
<div></div>
<div class="sites-codeblock sites-codesnippet-block">
<div><font face="monospace">
<font color="#a020f0">#include </font><font color="#ff00ff">&lt;iostream&gt;</font><br />
<font color="#a020f0">#include </font><font color="#ff00ff">&lt;gtest/gtest.h&gt;</font><br />
<br />
<font color="#a52a2a"><b>using</b></font> std::cout;<br />
<font color="#a52a2a"><b>using</b></font> testing::PrintToString;<br />
<br />
<font color="#2e8b57"><b>class</b></font> A {};<br />
<font color="#2e8b57"><b>class</b></font> B : <font color="#a52a2a"><b>public</b></font> A {};<br />
<font color="#2e8b57"><b>class</b></font> C : <font color="#a52a2a"><b>public</b></font> B {};<br />
<br />
<br />
<font color="#2e8b57"><b>void</b></font> PrintTo(<font color="#2e8b57"><b>const</b></font> A&amp; a, ::std::ostream* os)<br />
{<br />
    *os &lt;&lt; <font color="#ff00ff">"A@"</font> &lt;&lt; &amp;a;<br />
}<br />
<br />
<font color="#2e8b57"><b>void</b></font> PrintTo(<font color="#2e8b57"><b>const</b></font> B&amp; b, ::std::ostream* os)<br />
{<br />
    *os &lt;&lt; <font color="#ff00ff">"B@"</font> &lt;&lt; &amp;b;<br />
}<br />
<br />
<font color="#2e8b57"><b>int</b></font> main() {<br />
    A a;<br />
    B b;<br />
    C c;<br />
<br />
    A* a_ptr1 = &amp;a;<br />
    B* b_ptr = &amp;b;<br />
    A* a_ptr2 = &amp;b;<br />
    C* c_ptr = &amp;c;<br />
    A* a_ptr3 = &amp;c;<br />
<br />
    cout &lt;&lt; PrintToString(a) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>;       <font color="#0000ff">// A@0xXXXXXXXX</font><br />
    cout &lt;&lt; PrintToString(b) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>;       <font color="#0000ff">// B@0xYYYYYYYY</font><br />
    cout &lt;&lt; PrintToString(c) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>;       <font color="#0000ff">// 1-byte object &lt;60&gt;</font><br />
    cout &lt;&lt; PrintToString(*a_ptr1) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>; <font color="#0000ff">// A@0xXXXXXXXX</font><br />
    cout &lt;&lt; PrintToString(*b_ptr) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>;  <font color="#0000ff">// B@0xYYYYYYYY</font><br />
    cout &lt;&lt; PrintToString(*a_ptr2) &lt;&lt; <font color="#ff00ff">"</font><font color="#6a5acd">\n</font><font color="#ff00ff">"</font>; <font color="#0000ff">// A@0xYYYYYYYY</font><br />
}<br />
</font></div>
</div>
<div><br />
</div><div><br /></div><div>You can work around this problem by also defining a couple of extra PrintTo methods <span style="background-color:transparent;font-size:10pt">(also attached as printto-workaround.cpp).</span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><div class="sites-codeblock sites-codesnippet-block"><font color="#a020f0" style="font-family:monospace;font-size:medium;line-height:normal">#include </font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">&lt;iostream&gt;</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a020f0" style="font-family:monospace;font-size:medium;line-height:normal">#include </font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">&lt;gtest/gtest.h&gt;</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>using</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> std::cout;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>using</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> testing::PrintToString;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a020f0" style="font-family:monospace;font-size:medium;line-height:normal">#define OVERRIDE override</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// MyClass.h</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// ---------------------------------------------------------------</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassA {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// As WebKit is compiled without RTTI, the following idiom is used to</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// emulate RTTI type information.</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>protected</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">   </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>enum</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassType {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">     BType,</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">     CType</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">   };</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">   </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassType type() </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> = </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">0</font><span style="font-family:monospace;font-size:medium;line-height:normal">;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">:</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> isB() </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> { </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> type() == BType; }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>bool</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> isC() </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> { </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> type() == CType; }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassB : </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassA {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassType type() </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> OVERRIDE { </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> BType; }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>class</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassC : </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>public</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassB {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>virtual</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassType type() </span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> OVERRIDE { </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>return</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> CType; }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">};</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// MyClassTestHelper.h</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// ---------------------------------------------------------------</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> PrintTo(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassB&amp; b, ::std::ostream* os)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    *os &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"B@"</font><span style="font-family:monospace;font-size:medium;line-height:normal"> &lt;&lt; &amp;b;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Make C use B's PrintTo</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> PrintTo(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassC&amp; c, ::std::ostream* os)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    PrintTo(*</span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>static_cast</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">&lt;</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassB*&gt;(&amp;c), os);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// Call the more specific subclass PrintTo method</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// *WARNING*: The base class PrintTo must be defined *after* the other PrintTo</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// methods otherwise it'll just call itself.</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>void</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> PrintTo(</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassA&amp; a, ::std::ostream* os)</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">{</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>if</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> (a.isB()) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        PrintTo(*</span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>static_cast</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">&lt;</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassB*&gt;(&amp;a), os);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    } </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>else</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>if</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> (a.isC()) {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        PrintTo(*</span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>static_cast</b></font><span style="font-family:monospace;font-size:medium;line-height:normal">&lt;</span><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>const</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> MyClassC*&gt;(&amp;a), os);</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    } </span><font color="#a52a2a" style="font-family:monospace;font-size:medium;line-height:normal"><b>else</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">        </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">//ASSERT_NOT_REACHED();</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    }</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><font color="#2e8b57" style="font-family:monospace;font-size:medium;line-height:normal"><b>int</b></font><span style="font-family:monospace;font-size:medium;line-height:normal"> main() {</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassB b;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassC c;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassB* b_ptr = &amp;b;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassA* a_ptr1 = &amp;b;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassC* c_ptr = &amp;c;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    MyClassA* a_ptr2 = &amp;c;</span><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(b) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">;       </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xYYYYYYYY</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(*b_ptr) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">;  </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xYYYYYYYY</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(*a_ptr1) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">; </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xYYYYYYYY</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(c) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">;       </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xAAAAAAAA</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(*c_ptr) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">;  </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xAAAAAAAA</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">    cout &lt;&lt; PrintToString(*a_ptr2) &lt;&lt; </span><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><font color="#6a5acd" style="font-family:monospace;font-size:medium;line-height:normal">\n</font><font color="#ff00ff" style="font-family:monospace;font-size:medium;line-height:normal">"</font><span style="font-family:monospace;font-size:medium;line-height:normal">; </span><font color="#0000ff" style="font-family:monospace;font-size:medium;line-height:normal">// B@0xAAAAAAAA</font><br style="font-family:monospace;font-size:medium;line-height:normal" /><span style="font-family:monospace;font-size:medium;line-height:normal">}</span></div></div><div><br /></div>
<div><br />
</div><div><br /></div>
<h2><a name="TOC-Future-Proposals"></a>Future Proposals</h2>
<div>All these issues are up for discussion and have yet to be decided on;</div>
<div>
<ul><li>Creation of high quality fake objects for core blink components. Each fake should be created and maintained by the OWNERS that owns the real implementation. See <span style="background-color:transparent;font-size:10pt"><a href="http://googletesting.blogspot.com.au/2013/06/testing-on-toilet-fake-your-way-to.html">Testing on the Toilet: Know Your Test Doubles</a>, </span>TotT: Fake Your Way to Better Tests - <a href="http://googletesting.blogspot.com.au/2013/06/testing-on-toilet-fake-your-way-to.html" style="font-size:10pt;background-color:transparent">http://googletesting.blogspot.com.au/2013/06/testing-on-toilet-fake-your-way-to.html</a></li>
<li>Creation of test helpers for all objects in Blink.</li>
<li>Split unit tests into their own build unit rather then one big "webkit_unittest" (faster test building and linking, ability to use mocks via inclusion)</li></ul>
<div><br /></div></div>
</div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-attachments">
<div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px;"><span aria-label="Attachments" title="Attachments"><div class="sites-translucent sites-symbol" aria-hidden="true">Č</div></span></div><div id="sites-attachments-update-div" class="sites-attachments-inner-div" style="display:none;"><span class="sites-attachments-update-icon"><img src="http://www.gstatic.com/sites/p/56e332/system/app/images/spinner.gif" /></span><div class="sites-attachments-update-text">Updating...</div></div></div><div class="sites-attachments-separator"></div>
<div id="attachment-wuid:gx:296e08ccdc1863f7"><div class="sites-attachments-row"><div class="sites-attachments-icon sites-attachments-icon-accessible" style="left:5px"><div class="sites-translucent sites-symbol" aria-label="File" title="File">ċ</div></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name">printto-confusing.cpp <div class="sites-translucent">(1k)</div></div><div class="sites-attachments-author">Tim Ansell, <div class="sites-translucent">Oct 28, 2013, 6:11 PM</div></div></div><div class="sites-attachments-version sites-attachments-version-accessible"><a href="/system/app/pages/admin/revisions?wuid=wuid:gx:296e08ccdc1863f7">v.1</a></div><div id="attachment-download-wuid:gx:296e08ccdc1863f7" class="sites-attachments-icon sites-attachments-icon-accessible" style="right:0px"><a href="/blink/unittesting/printto-confusing.cpp?attredirects=0&amp;d=1" aria-label="Download printto-confusing.cpp" title="Download" role="button"><span class="sites-symbol" aria-hidden="true">ď</span></a></div></div><div class="sites-attachments-separator"></div></div>
<div id="attachment-wuid:gx:209a0fd58e26a240"><div class="sites-attachments-row"><div class="sites-attachments-icon sites-attachments-icon-accessible" style="left:5px"><div class="sites-translucent sites-symbol" aria-label="File" title="File">ċ</div></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name">printto-workaround.cpp <div class="sites-translucent">(2k)</div></div><div class="sites-attachments-author">Tim Ansell, <div class="sites-translucent">Oct 28, 2013, 8:36 PM</div></div></div><div class="sites-attachments-version sites-attachments-version-accessible"><a href="/system/app/pages/admin/revisions?wuid=wuid:gx:209a0fd58e26a240">v.1</a></div><div id="attachment-download-wuid:gx:209a0fd58e26a240" class="sites-attachments-icon sites-attachments-icon-accessible" style="right:0px"><a href="/blink/unittesting/printto-workaround.cpp?attredirects=0&amp;d=1" aria-label="Download printto-workaround.cpp" title="Download" role="button"><span class="sites-symbol" aria-hidden="true">ď</span></a></div></div><div class="sites-attachments-separator"></div></div>
<div style="height: 10px"></div>
</div>
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/chromium.org/dev/blink/unittesting">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq9Fxet-0YbUKdbhQV_YQCJ3mmsOjuJYJzZon8RbZlZjuPkty2lFhyuIVAySyXq-q-IA9aKLLT3pC1xcQ045SCqEGbMW3GX_dPJyG5XGGMLBQtINV3f/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
