<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/developers","deleted":false,"title":"For Developers","dir":"ltr"},{"path":"/developers/testing","deleted":false,"title":"Testing and infrastructure","dir":"ltr"},{"path":"/developers/testing/gpu-recipe","deleted":false,"title":"The GPU bots\u0027 recipe","dir":"ltr"}];
  var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttps://sites.google.com/a/chromium.org/dev/developers/testing/gpu-recipe\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"https://gg.google.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["https://ssl.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["https://ssl.gstatic.com/sites/p/56e332/system/js/codemirror.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","https://ssl.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/developers/testing","parentWuid":"wuid:gx:1415bd4fdab62446","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"The GPU bots\u0027 recipe","locale":"en","wuid":"wuid:gx:715a78ce0631aa73","revision":37,"path":"/developers/testing/gpu-recipe","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"gpu-recipe","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="The GPU bots' recipe - The Chromium Projects" />
<meta itemprop="name" content="The GPU bots' recipe - The Chromium Projects" />
<meta property="og:title" content="The GPU bots' recipe - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="https://ssl.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>The GPU bots' recipe - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="https://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="https://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/developers" dir="ltr">For Developers</A>‎ &gt; ‎<A href="/developers/testing" dir="ltr">Testing and infrastructure</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">The GPU bots' recipe</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div><div class="sites-embed-align-left-wrapping-off"><div class="sites-embed-border-off sites-embed" style="width:250px;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-6"><p>Contents</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Introduction"><strong>1 </strong>Introduction</a></li><li class="goog-toc"><a href="#TOC-High-Level-Description"><strong>2 </strong>High-Level Description</a></li><li class="goog-toc"><a href="#TOC-Code-Organization"><strong>3 </strong>Code Organization</a></li><li class="goog-toc"><a href="#TOC-Running-the-Recipe-Locally"><strong>4 </strong>Running the Recipe Locally</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Goma"><strong>4.1 </strong>Goma</a></li><li class="goog-toc"><a href="#TOC-Credentials-for-Various-Servers"><strong>4.2 </strong>Credentials for Various Servers</a></li><li class="goog-toc"><a href="#TOC-Isolate-Server-Credentials"><strong>4.3 </strong>Isolate Server Credentials</a></li><li class="goog-toc"><a href="#TOC-Cloud-Storage-Credentials"><strong>4.4 </strong>Cloud Storage Credentials</a></li><li class="goog-toc"><a href="#TOC-Running-the-recipes"><strong>4.5 </strong>Running the recipes</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-The-build_and_test-and-build_and_upload-recipes"><strong>4.5.1 </strong>The build_and_test and build_and_upload recipes</a></li><li class="goog-toc"><a href="#TOC-The-download_and_test-recipe"><strong>4.5.2 </strong>The download_and_test recipe</a></li><li class="goog-toc"><a href="#TOC-Testing-your-own-isolates-with-the-download_and_test-recipe"><strong>4.5.3 </strong>Testing your own isolates with the download_and_test recipe</a></li></ol></li></ol></li><li class="goog-toc"><a href="#TOC-Modifying-the-Recipe-Including-Adding-New-Steps-"><strong>5 </strong>Modifying the Recipe (Including Adding New Steps)</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Retraining-Recipes-Expectations"><strong>5.1 </strong>Retraining Recipes' Expectations</a></li><li class="goog-toc"><a href="#TOC-Code-Coverage"><strong>5.2 </strong>Code Coverage</a></li><li class="goog-toc"><a href="#TOC-Try-Jobs-for-Recipes-or-lack-thereof-"><strong>5.3 </strong>Try Jobs for Recipes (or lack thereof)</a></li><li class="goog-toc"><a href="#TOC-Adding-New-Steps-to-the-Recipe"><strong>5.4 </strong>Adding New Steps to the Recipe</a></li></ol></li></ol></div></div></div></div></div><h2><a name="TOC-1"></a><br /></h2><h2><a name="TOC-Introduction"></a>Introduction</h2><div><br /></div>As mentioned on the <a href="https://www.chromium.org/developers/testing/gpu-testing">GPU testing</a> page, the GPU bots use a new framework from Chrome's infrastructure team called <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/README.recipes.md" target="_blank">recipes</a>. The previous infrastructure sent commands from the buildbot master to the various build machines. In comparison, recipes delegate most of the responsibility of deciding how to compile the code, run tests, etc. to the machine doing the build. Compared to the legacy buildbot scripts, recipes vastly simplify the tasks of modifying the bots' configuration, adding new steps, and locally testing changes to the bots. They virtually eliminate waterfall restarts when making changes to the bots.<div><br /></div><div>This page describes the GPU recipe, how it's configured on the various bots, and how to modify and test it locally.</div><h2><a name="TOC-High-Level-Description"></a>High-Level Description</h2><div>The GPU recipe is run on almost all of the bots on the chromium.gpu waterfall (all but the Android bot, as of this writing), the GPU bots on the chromium.webkit waterfall, and the GPU bots on the chromium.gpu.fyi waterfall. <span style="background-color:transparent;font-size:10pt">All of the bots on these waterfalls are split into builders and testers. The builders compile the code, upload the build results, and trigger the testers. The testers download the builds and run the tests.</span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div>Portions of the GPU recipe, which describe the tests to be run, are also run on the Chromium tryservers. The GPU trybots which previously lived on their own waterfall have been added to the swarming pool, and are now triggered from the regular Chromium and Blink tryservers. See the <a href="http://www.chromium.org/developers/testing/gpu-testing#TOC-Using-the-GPU-Bots" target="_blank">GPU testing page</a> for more details on which bot configurations run the GPU tests.</div><div><br /></div><div>On the GPU bots, the binaries are sent from builders to testers using <a href="https://www.chromium.org/developers/testing/isolated-testing">isolates</a>. An isolate contains the binary as well as any dependent libraries or data files. The GPU testers do not check out the Chromium workspace; they receive all of the binaries, test harnesses and data files in the isolates coming from the builders. The high-level point is that when adding any new tests to the GPU bots, they must be made to work with isolates. The Release builders build the static library build; the Debug builders build the component build, to speed up linking. Isolates work with both flavors.</div><div><br /></div><div>There are a couple of differences between the GPU tryservers and the waterfall bots. First, the tryservers have been changed to use the swarming infrastructure for better resource utilization, so they run the regular Chromium recipe rather than the GPU recipe. (This difference will ideally be eliminated in the future.) Second, when running the pixel tests, they expect to download a reference image from cloud storage, rather than potentially uploading one to cloud storage. The reason for this behavior is that a bad patch may cause the try server to produce a bad image, so the try servers' results can not be trusted. Because the try servers rely on the other waterfalls to produce their reference images, there must be at least one bot with the same GPU and operating system configuration on the main waterfall (e.g. chromium.gpu) for each such configuration on the try servers.</div><h2><a name="TOC-Code-Organization"></a>Code Organization</h2><div>The GPU recipe lives in the tools workspace under <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/" target="_blank">tools/build/</a>. Here is a .gclient for fetching the sources (only developers working at Google can fetch the internal sources; I don't know whether the recipe will run without them):</div><div><br /></div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><code>solutions = [</code></div><div><code>  { "name"        : "build",</code></div><div><code>    "url"         : "https://chromium.googlesource.com/chromium/tools/build.git",</code></div><div><code>    "deps_file"   : ".DEPS.git",</code></div><div><code>    "managed"     : True,</code></div><div><code>    "custom_deps" : {</code></div><div><code>    },</code></div><div><code>    "safesync_url": "",</code></div><div><code>  },</code></div><div><code>  { "name"        : "build_internal",</code></div><div><code>    "url"         : "https://chrome-internal.googlesource.com/chrome/tools/build.git",</code></div><div><code>    "deps_file"   : ".DEPS.git",</code></div><div><code>    "managed"     : True,</code></div><div><code>    "custom_deps" : {</code></div><div><code>    },</code></div><div><code>    "safesync_url": "",</code></div><div><code>  },</code></div><div><code>]</code></div><div><code>cache_dir = None</code></div></div></div><div><br /></div><div>The GPU recipes themselves live in <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/" target="_blank">tools/build/scripts/slave/recipes/gpu/</a>. There are three recipes: <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/build_and_upload.py" target="_blank">build_and_upload.py</a>, <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/download_and_test.py" target="_blank">download_and_test.py</a>, and <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/build_and_test.py" target="_blank">build_and_test.py</a>. All of the GPU bots currently use either the build_and_upload or download_and_test recipes. build_and_test was previously used on some bots, but currently is used only for local testing.</div><div><br /></div><div>The recipes themselves are short; the bulk of the logic is factored into modules. Here is, for example, the entire code for the build_and_upload recipe:</div><div><br /></div><div><div></div><div class="sites-codeblock sites-codesnippet-block"><div><font color="#006000" face="monospace">DEPS = [</font></div><div><font color="#006000" face="monospace">  'buildbot',</font></div><div><font color="#006000" face="monospace">  'gpu',</font></div><div><font color="#006000" face="monospace">  'json',</font></div><div><font color="#006000" face="monospace">  'platform',</font></div><div><font color="#006000" face="monospace">  'properties',</font></div><div><font color="#006000" face="monospace">]</font></div><div><font color="#006000" face="monospace"><br /></font></div><div><font color="#006000" face="monospace">def GenSteps(api):</font></div><div><font color="#006000" face="monospace">  api.gpu.setup()</font></div><div><font color="#006000" face="monospace">  api.buildbot.prep()</font></div><div><font color="#006000" face="monospace">  api.gpu.checkout_steps()</font></div><div><font color="#006000" face="monospace">  api.gpu.compile_steps()</font></div><div><br /></div></div></div><div><br /></div><div>The GPU recipe module lives in <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipe_modules/gpu/" target="_blank">tools/build/scripts/slave/recipe_modules/gpu/</a> alongside the other recipe modules. <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipe_modules/gpu/api.py" target="_blank">api.py</a> contains most of the logic for the GPU bots. The more significant logic includes:</div><div><ul><li><span style="font-size:10pt;background-color:transparent">Whether to use "Blink mode" (fetching top of tree Blink; used on the Blink waterfall)</span></li><li>Steps to compile the product</li><li>Steps to generate and run the list of GPU tests</li></ul><h2><a name="TOC-Running-the-Recipe-Locally"></a>Running the Recipe Locally</h2></div><div>Testing recipes locally is easier than testing buildbot script changes. It's not necessary to run buildbot locally and trigger builds by hand. <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/tools/run_recipe.py" target="_blank">run_recipe.py</a> executes the recipe in the same way it is run on the bot. Command line arguments easily change the behavior of the recipe.</div><div><br /></div><div>When running the "builder" recipes (build_and_upload, build_and_test), a separate checkout of the entire Chromium source tree is made into the tools/build workspace. This takes a fair amount of time the first time. It is recommended to use a git checkout for local testing. More information below on how this is configured.</div><div><br /></div><div>As the GPU recipes have evolved, the number of command line arguments required in order to execute them properly has increased. Normally buildbot specifies these arguments, but "fake" values which are good enough can be used in order to test changes to the recipes.</div><div><br /></div><div>Unfortunately, multiple dependencies prevent anyone except Google employees from running the GPU recipe effectively. If you are a non-Google Chromium contributor and wish to make contributions and run the recipe locally, please file a bug at crbug.com/new with the label Cr-Internals-GPU-Testing.</div><h3><a name="TOC-Goma"></a>Goma</h3><div>The Chromium project's distributed build system, Goma, is currently required to run the GPU recipe, which unfortunately limits its direct execution to Google employees. Visit go/ma for setup instructions. Goma must be installed into tools/build/goma/, so that tools/build/goma/goma_ctl.sh exists on disk. When running the recipe locally, other instances of the compiler proxy should be stopped.</div><div><br /></div><div>In short:</div><div><ol><li>cd tools/build/</li><li>mkdir goma</li><li>cd goma</li><li>&lt;fetch the goma_ctl.sh from the instructions above&gt;</li><li>chmod a+x goma_ctl.sh</li><li>./goma_ctl.sh update</li></ol></div><h3><a name="TOC-Credentials-for-Various-Servers"></a>Credentials for Various Servers</h3><div>As of this writing, the GPU recipe requires credentials for two services: namely, the isolate server and cloud storage.</div><h3><a name="TOC-Isolate-Server-Credentials"></a><span style="background-color:transparent;font-size:10pt">Isolate Server Credentials</span></h3><div><span style="background-color:transparent;font-size:10pt">Release builds via the GPU recipe automatically upload their results to the isolate server, so it is required to first authenticate to it. </span><span style="background-color:transparent;font-size:10pt">From a Chromium checkout, run:</span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><div class="sites-codeblock sites-codesnippet-block"><span style="background-color:transparent;font-size:10pt"><code>./src/tools/swarming_client/auth.py </code></span><span style="background-color:transparent;font-size:10pt"><code>login --service=https://isolateserver.appspot.com</code></span></div></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div>This will open a web browser to complete the authentication flow. A @google.com email address is required in order to properly authenticate.</div><div><br /></div><div>To test your authentication, find a hash for a recent isolate. For example, go to a recent build on <a href="http://build.chromium.org/p/chromium.gpu/builders/Linux%20Release%20(NVIDIA)" target="_blank">Linux Release (NVIDIA)</a>, go to the setup_build step, search for the "swarm_hashes" property, and take a random hash from one of the targets like content_gl_tests. Then run the following:</div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><span style="background-color:transparent;font-size:10pt"><div class="sites-codeblock sites-codesnippet-block"><code>./src/tools/swarming_client/isolateserver.py download -f [hash] delete_me --isolate-server https://isolateserver.appspot.com</code></div></span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><span style="background-color:transparent;font-size:10pt">If authentication succeeded, this will silently download a file called "delete_me" into the current working directory. If it failed, the script will report multiple authentication errors. In this case, use the following command to log out and then try again:</span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><div><span style="background-color:transparent;font-size:10pt"><div class="sites-codeblock sites-codesnippet-block"><code>./src/tools/swarming_client/auth.py logout --service=https://isolateserver.appspot.com</code></div></span></div><div><span style="background-color:transparent;font-size:10pt"><br /></span></div><h3><a name="TOC-Cloud-Storage-Credentials"></a>Cloud Storage Credentials</h3><div>Authentication to Google Cloud Storage is needed for a couple of reasons: uploading pixel test results to the cloud, and potentially uploading and downloading builds as well, at least in Debug mode. Use the copy of gsutil in depot_tools/third_party/gsutil/gsutil, and follow the <a href="https://developers.google.com/storage/docs/gsutil" target="_blank">Google Cloud Storage instructions</a> to authenticate. You must use your @google.com email address and be a member of the Chrome GPU team in order to receive read-write access to the appropriate cloud storage buckets. Roughly:</div><div><ol><li>Run gsutil config</li><li>Copy/paste the URL into your browser</li><li>Log in with your @google.com account</li><li>Allow the app to access the information it requests</li><li>Copy-paste the resulting key back into your Terminal</li><li>Press "enter" when prompted for a project-id (i.e., leave it empty)</li></ol>At this point you should be able to write to the cloud storage bucket.</div><div><br /></div><div>Navigate to <a href="https://storage.cloud.google.com/?arg=chromium-gpu-archive" target="_blank">https://storage.cloud.google.com/?arg=chromium-gpu-archive</a> to view the contents of the cloud storage bucket.</div><h3><a name="TOC-Running-the-recipes"></a>Running the recipes</h3><div>The GPU recipes live in <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/" target="_blank">tools/build/scripts/slave/recipes/gpu</a>. As of this writing there are three main recipes: <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/build_and_upload.py" target="_blank">build_and_upload.py</a>, <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/download_and_test.py" target="_blank">download_and_test.py</a>, and <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipes/gpu/build_and_test.py" target="_blank">build_and_test.py</a>. All of the GPU bots on all of the waterfalls are running either the build_and_upload or download_and_test recipes. build_and_test is at this point mainly used for local testing, though since the introduction of isolates, download_and_test is much easier to use for that purpose. </div><h4><a name="TOC-The-build_and_test-and-build_and_upload-recipes"></a>The build_and_test and build_and_upload recipes</h4><div>Once all authentication is complete, the recipes can be run. Here is an example invocation of the build_and_test recipe:</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><code>./scripts/tools/run_recipe.py gpu/build_and_test use_mirror=False [use_git=True] revision=253330 build_config=Release buildername="Linux Release (myname)" buildnumber=1503 slavename=mynamelinux mastername=chromium.gpu.myname &gt; recipe_output.txt 2&gt;&amp;1</code></div></div><div><br /></div><div>This will run the recipe and put all of its output into "recipe_output.txt" in the current working directory. <span style="font-size:10pt;background-color:transparent">You can watch its progress in another terminal by running 'tail -f recipe_output.txt'. It is strongly recommended to capture the recipe's entire output when running it locally so that you can easily search back for unexpected failures.</span></div><div><br /></div><div>Throughout, it is recommended to replace "myname" with your login, so in case you write results to cloud storage, it can be easily identified who wrote them.</div><div><br /></div><div>Some notes on the command line arguments:</div><div><ul><li>use_mirror=False: whether to use the mirrors in the Chromium golo. This should be set to False for local testing. (It's set to true on the real bots.)</li><li>use_git=True: optional; use git during the checkout. This flag is often necessary during local testing in order for the checkout to complete in a reasonable amount of time. However, some code paths (like uploading results to the flakiness dashboard) may not have been fully tested in git mode. (Since this flag was added, the bots and recipes have been transitioned to the bot_update step. It isn't clear right now whether the use_git=True flag is still needed.)</li><li>revision: the svn revision or git hash to use. When running the recipe locally you should usually set this to the top of tree revision, or close to it. If you set use_git=True then you must supply a git hash for this value.</li><li>build_config: set to Release or Debug. Release will automatically build and upload isolates. Debug will upload a build to cloud storage.</li><li>buildername, slavename, mastername: choose synthetic values for these which are similar in form to those above, for consistency. Note that for the Debug flavor of the recipe, builds will be uploaded to https://cloud.google.com/console/storage/chromium-gpu-archive/ under [mastername]/[buildername]/full-build-[os]_[revision].zip.</li><li>buildnumber: used to name some cloud storage upload results. Choose a random value.</li></ul><div>The build_and_test and build_and_upload recipes require the same basic command line arguments.</div></div><div><br /></div><div>There are some other arguments which may be useful for local testing. skip_checkout can be used to skip the whole-workspace "gclient sync" operation which usually triggers large rebuilds. skip_compile can be used to skip the compile, reusing the last run's binaries. See the build_and_test recipe for </div><h4><a name="TOC-The-download_and_test-recipe"></a>The download_and_test recipe</h4><div><span style="font-size:10pt;background-color:transparent">The download_and_test recipe requires additional arguments, because ordinarily the testers are triggered by the parent builder machines.</span></div><div><span style="font-size:10pt;background-color:transparent"><br /></span></div><div><span style="font-size:10pt;background-color:transparent">Example invocation on Linux:</span></div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><code>./scripts/tools/run_recipe.py gpu/download_and_test revision=d9364f16029ba167c5208b9308c9198ae30fa12c parent_got_revision=d9364f16029ba167c5208b9308c9198ae30fa12c parent_got_webkit_revision=186796 parent_got_swarming_client_revision=dbff01c15252107603928c32f24fafca48b57a30 build_config=Release buildername='Linux Release (myname)' buildnumber=1785 slavename=mynamelinux mastername=chromium.gpu.myname swarm_hashes='{"angle_unittests":"30907d52c009c36c313aeb2f46a051305466faed","content_gl_tests":"43deb99c6a6c4cb584aa0982e5322b63489438db","content_unittests":"196a197201c87cab22f79c0316a7486b897491ca","gl_tests":"787a47a50d16d425d1e1d8ede14340d426b07870","gles2_conform_test":"caf81618cc8cf08ce621cf376814af8e2e91c936","gpu_unittests":"b778b90117de60ee1ec34975ffa3f45bbdde7fc6","media_unittests":"07c25f2d3748ded9a634737901559d45a2b53b79","tab_capture_end2end_tests":"89388d3c1be24f9798ea35c5a25026db7c4b6425","telemetry_gpu_test":"5ec58d21fd9c46cf169261337800634380370695"}' master_class_name_for_testing=ChromiumGPUMYNAME &gt; recipe-output.txt 2&gt;&amp;1</code></div></div><div>Example invocation on Windows:</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><code>D:\src\depot_tools\python276_bin\python.exe scripts\tools\run_recipe.py gpu/download_and_test revision=d9364f16029ba167c5208b9308c9198ae30fa12c parent_got_revision=d9364f16029ba167c5208b9308c9198ae30fa12c parent_got_webkit_revision=186796 parent_got_swarming_client_revision=dbff01c15252107603928c32f24fafca48b57a30 build_config=Release buildername="Win Release (myname)" buildnumber=1785 slavename=mynamewin mastername=chromium.gpu.myname swarm_hashes="{'angle_unittests':'8d0d57ac6bec58d2acb2df362820a2d01925bb32,'content_gl_tests':'e1ff74e1c8930b311d4f5fedd66eed77f5ef432a,'content_unittests':'1ba8ef7d33cbccda70162d7ac68f701778f8171a','gl_tests':'a185664a9fa2ef2d99f0a8fc9e8c5144107d2935,'gles2_conform_test':'b09d11250c48f8eb6cde13712300cb2b52b8a1ac,'gpu_unittests':'0aae412f084a1aefb5f7dd1f2edca2033814bc55','media_unittests':'5f13730a7e48ce1904dc22cd2e725a295bf2ca4a','tab_capture_end2end_tests':'a210f60afd45a90c50e3634094e41009583e0720,'telemetry_gpu_test':'1a935bef483b6503d5e6c9a84d307052a0c48686}" master_class_name_for_testing=ChromiumGPUMYNAME &gt; recipe-output.txt</code></div></div><div><br /></div><div>Replace "myname" everywhere with your username to disambiguate any results which might be uploaded to the flakiness dashboard inadvertently.</div><div><br /></div><div>Notes on the command line arguments:</div><div><ul><li>parent_got_revision, parent_got_webkit_revision: these are ordinarily transmitted from the builder to the tester, and is required in order to identify the run on the flakiness dashboard and other places. For parent_got_revision, pick a revision close to Chromium's <a href="http://build.chromium.org" target="_blank">top of tree revision</a>. For parent_got_webkit_revision, pick one close to <a href="http://build.chromium.org/p/chromium.webkit/console" target="_blank">Blink's top of tree revision</a> (note that this waterfall displays both Chromium and Blink commits). If you're running with isolates, the exact numbers are not important.</li><li>parent_got_swarming_client_revision: tells the recipe which version of swarming_client should be used. Use the value in "swarming_revision" in src/DEPS.</li><li>build_config: Debug or Release. Debug will try to download a build of that revision from cloud storage. Release will run the isolates identified in swarm_hashes. It is <b>much</b> easier and faster to run via isolates in Release mode.</li><li>slavename, mastername: see above.</li><li>master_class_name_for_testing: the flakiness dashboard identifies the waterfall by the so-called buildbot "class name", which for the chromium.gpu waterfall is ChromiumGPU, for example. If you want to test the code path which uploads results to the flakiness dashboard, supply a value here.</li><li>swarm_hashes: these identify the isolates which were uploaded to the isolate server during the build step. It's required to supply hashes for all of the tests currently yielded by test_steps() in tools/build/scripts/slave/recipe_modules/gpu/api.py. For your given OS, you can find a list of recently-valid hashes by looking at one of the Release builders like <a href="http://build.chromium.org/p/chromium.gpu/builders/Linux%20Release%20(NVIDIA)" target="_blank">Linux Release (NVIDIA)</a>, going to a recent successful build, going to the stdio for the "setup_build" step, and copying the swarm_hashes property. Note that you will have to reformat it with single quotes around the braces, double quotes within, and no "u" prefixes on the strings.</li></ul></div><h4><a name="TOC-Testing-your-own-isolates-with-the-download_and_test-recipe"></a>Testing your own isolates with the download_and_test recipe</h4><div>The easiest way to see how tests are invoked on the bots is to build isolates out of your own Chromium workspace, upload them to the isolate server, and then run the download_and_test recipe, passing the isolates' hashes in the swarm_hashes property. To do this:</div><div><ol><li>Set the test_isolation_mode and archive_gpu_tests GYP_DEFINES per the <a href="https://www.chromium.org/developers/testing/isolated-testing/for-swes" target="_blank">isolated testing documentation</a>. The easiest way to do this is to create a file called chromium.gyp_env at the top level of your Chromium workspace (alongside src/) with the following contents:<br /><br /><div class="sites-codeblock sites-codesnippet-block"><code>{'GYP_DEFINES': 'test_isolation_mode=prepare archive_gpu_tests=1' }</code></div></li><li>Run gclient runhooks</li><li>Build the desired isolate targets. See <a href="https://chromium.googlesource.com/chromium/src/+/master/chrome/chrome_tests.gypi" target="_blank">src/chrome/chrome_tests.gypi</a> and look for targets ending in "_run". If you only want to test one isolate, you can build just its target and supply its hash in the swarm_hashes, picking up the rest of the hashes from a recent build on the same OS from one of the GPU testers.</li><li>Run isolate.py per the <a href="https://github.com/luci/luci-py/wiki/Isolate-User-Guide" target="_blank">Isolate User Guide</a> to upload the resulting isolate to the isolate server. For example, for the "telemetry_gpu_test_run" target:<br /><div class="sites-codeblock sites-codesnippet-block"><code>python tools\swarming_client\isolate.py batcharchive --isolate-server https://isolateserver.appspot.com out\Release\telemetry_gpu_test.isolated.gen.json</code></div></li><li>The output will contain something like:<br /><div class="sites-codeblock sites-codesnippet-block"><code>889ade0386ca42fa0e35e50904c6aed0ff531aae  telemetry_gpu_test</code></div><br />The hash is the number on the left.</li><li>To force an isolate to be rebuilt, delete the files:<br /><span style="font-size:10pt;background-color:transparent"><div class="sites-codeblock sites-codesnippet-block"><span style="font-size:13.3333330154419px"><code> src/out/Release/[isolate name].gen.json</code></span><br style="font-size:13.3333330154419px" /><code> src/out/Release/[isolate name].isolated</code><br /></div>and rebuild them per steps 3 and 4. This is necessary if you changed the binary or test files and building the _run target reports "no work to do".</span></li></ol><h2><a name="TOC-Modifying-the-Recipe-Including-Adding-New-Steps-"></a>Modifying the Recipe (Including Adding New Steps)</h2></div><h3><a name="TOC-Retraining-Recipes-Expectations"></a>Retraining Recipes' Expectations</h3><div>As described in the <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/README.recipes.md" target="_blank">documentation for recipes</a>, the primary way recipes are tested is to record the output of what commands they would have executed. <span style="font-size:10pt;background-color:transparent">Any changes to the recipe which affect the steps in any way, including the command line arguments that might be passed to any command or which steps are executed, require the recipe's expectations to be retrained. You will discover this if you attempt to </span><font face="courier new, monospace" style="font-size:10pt;background-color:transparent"><b>git cl upload</b></font><span style="font-size:10pt;background-color:transparent"> a change to the recipe and the presubmit checks fail with output like</span></div><div><span style="font-size:10pt;background-color:transparent"><br /></span></div><div><span style="background-color:transparent"><div></div><div class="sites-codeblock sites-codesnippet-block"><div><code><div>FAIL: gpu/build_and_upload.win_release_gclient_revert_failure (/Work/kbr/tools/build/scripts/slave/recipes/gpu/build_and_upload.expected/win_release_gclient_revert_failure.json)</div><div>----------------------------------------------------------------------</div><div>*** expected</div><div>--- current</div><div>***************</div><div>*** 32,39 ****</div><div>--- 32,107 ----</div><div>            'src@204787',</div><div>            '--output-json',</div><div>            '/path/to/tmp/json'],</div><div>    'name': 'gclient sync',</div><div>+   '~followup_annotations': ['@@@STEP_LOG_LINE@json.output@{@@@',</div><div>+                             '@@@STEP_LOG_LINE@json.output@  "solutions": {@@@',</div></code></div></div><div style="font-size:10pt">To retrain the recipes' expectations, run:</div><div style="font-size:10pt"><br /></div><div style="font-size:10pt"></div></span></div><div class="sites-codeblock sites-codesnippet-block"><div><span style="background-color:transparent"><div style="font-size:10pt"><code>./build/scripts/slave/unittests/recipe_simulation_test.py train</code></div></span></div><div></div></div><br /><div>This must be done <b>on Linux only</b> as of this writing. Otherwise, extraneous differences in paths will show up.</div><div><br /></div><div>Then <b>carefully</b> examine the changed files. Make sure the differences in the commands are what you expect. This is the primary line of defense against breaking the bots.</div><h3><a name="TOC-Code-Coverage"></a>Code Coverage</h3><div>Recipes require 100% code coverage. It is not allowed to add a conditional to a recipe without tests that exercise both branches. <span style="font-size:10pt;background-color:transparent">For this reason, if you add a conditional, a new recipe module, or a new API to an existing module, it is very likely that you will need to either add a new test for it, or modify an existing one.</span></div><div><br /></div><div>Study the GenTests() methods in the build_and_test, build_and_upload, and download_and_test recipes. These should give an idea of the form of the tests, and the situations where new tests are needed in order to provide 100% code coverage. See for example:</div><div><ul><li><span style="font-size:10pt;background-color:transparent">the top-of-tree ANGLE test in build_and_upload</span></li><li><span style="font-size:10pt;background-color:transparent">the test of Blink issues on the trybot in build_and_test</span></li><li><span style="font-size:10pt;background-color:transparent">the use of the master_class_name_for_testing property in download_and_test</span></li></ul></div><h3><a name="TOC-Try-Jobs-for-Recipes-or-lack-thereof-"></a>Try Jobs for Recipes (or lack thereof)</h3><div>As of this writing, it is unfortunately not possible to send try jobs of the GPU recipe for actual execution on the GPU try servers. This means that significant changes to the recipe must be handed very carefully. <b style="font-size:10pt;background-color:transparent">Always</b><span style="font-size:10pt;background-color:transparent"> file a bug about changes to the GPU recipe, and point the BUG= line to it in associated CLs. Doing so will yield a clear timeline of all commits and reverts associated with a change to the recipe. </span><span style="font-size:10pt;background-color:transparent">Be prepared to use drover or "git revert" to roll back changes to the recipe which introduce breakage on the bots. Always provide at least a brief description of the reason for the revert in the CL, and provide more detail in the bug report, including excerpts of logs. (The links to logs expire after only a short time.) Do not let bots stay red for an extended period of time while issues with the recipe are being fixed. </span></div><h3><a name="TOC-Adding-New-Steps-to-the-Recipe"></a>Adding New Steps to the Recipe</h3><div>It's straightforward to add new steps to the recipe. Follow the patterns in <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipe_modules/gpu/api.py" target="_blank">tools/build/scripts/slave/recipe_modules/gpu/api.py</a> for either a new build step or a new test step.</div><div><br /></div><div><b>All new tests running on the tryservers and main waterfall bots (chromium.gpu, chromium.webkit) must be open-source.</b> Please see the <a href="http://www.chromium.org/developers/testing/chromium-build-infrastructure/tour-of-the-chromium-buildbot#TOC-Adding-new-build-configurations-and-tests-to-the-main-Chromium-waterfall" target="_blank">Chromium testing guidelines</a> for details on this policy. If it's simply impossible to open-source the test it is possible that it can be run on the chromium.gpu.fyi waterfall, but a better approach would be to create an open-source version of the test.</div><div><b><br /></b></div><div><b>All new tests must be able to be run via isolates.</b> If you are adding a new binary (unlikely), you need to add a new .isolate file in src/chrome/, and a new _run target to <a href="http://src.chromium.org/viewvc/chrome/trunk/src/chrome/chrome_tests.gypi" target="_blank">src/chrome/chrome_tests.gypi</a>. Then add your isolate's name to the list in <a href="http://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/recipe_modules/gpu/common.py" target="_blank">tools/build/scripts/slave/recipe_modules/gpu/common.py</a>. If you're adding a new Telemetry based test (both likely and hopefully), it is likely that your new test or data files will already be covered by either <a href="http://src.chromium.org/viewvc/chrome/trunk/src/chrome/telemetry.isolate" target="_blank">telemetry.isolate</a> or <a href="http://src.chromium.org/viewvc/chrome/trunk/src/chrome/telemetry_gpu_test.isolate" target="_blank">telemetry_gpu_test.isolate</a>. Adjust the isolates as necessary. Create a new one if absolutely necessary.</div><div><br /></div><div>Build and run your isolate locally before attempting to add it to the GPU recipe. See the subsection above entitled "Testing your own isolates with the download_and_test recipe" for instructions on setting up the needed GYP_DEFINES to build and upload your isolate to the isolate server. To run it locally, run src/tools/swarming_client/run_isolated.py with the appropriate arguments. For simple isolates (i.e., non-Telemetry based ones):</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><code>./src/tools/swarming_client/run_isolated.py -H [hash] -I https://isolateserver.appspot.com</code></div></div><div><br /></div><div>The telemetry-based GPU tests currently use the same isolate for all the tests. In this case the invocation looks like (for example):</div><div><br /></div><div><div class="sites-codeblock sites-codesnippet-block"><code>./src/tools/swarming_client/run_isolated.py -H [hash] -I https://isolateserver.appspot.com -- webgl_conformance --browser=release --show-stdout [additional telemetry arguments]</code></div></div><div><br /></div><div>If you are adding a new build step, run the build_and_upload recipe locally to make sure it works.</div><div><br /></div><div>If you are adding a new test step, it is recommended to first build its associated isolate out of your (separate) Chromium workspace and upload that to the isolate server. Then run the download_and_test step locally, passing the hash of your local build's isolate in the swarm_hashes dictionary. Copy the rest of the hashes from a recent build on one of the Release GPU bots running the same OS as your local machine.</div><div><br /></div><div>Because currently it <b>isn't possible to send try jobs of the recipe itself</b> (see the section above), if you are adding a new test step, it is strongly recommended to:</div><div><ol><li>Check in the skeleton of the test to the Chromium workspace, with all of the tests within commented out.</li><li>Commit the change to the GPU recipe adding the new step. This should trivially be green on all of the GPU bots.</li><li>Send a try job to the GPU try servers uncommenting the tests. This will at least provide coverage on a subset of the GPUs on the main waterfall.</li><li>If the try job looks good, commit it.</li></ol>Note that the GPU try servers should be part of the commit queue soon, so soon it shouldn't be necessary to send these try jobs manually.</div><div><br /></div><div><b>When you commit your change to the recipe:</b></div><div><ol><li><b>Make sure the tree is green first.</b> Don't commit changes to the recipe if there is redness on the tree.</li><li><b>Watch the tree after your commit.</b> If any of the bots turn red because of your commit, <b>revert</b>, diagnose what happened, fix it, and re-land. (See also the next paragraph.)</li></ol><div><b>Note also</b> that changes to the recipe might be seen for the first time on the testers rather than the builders. If you add a new binary, you might find that the testers fail during the first execution of that recipe change, unable to find the isolate for the new binary. You could work around this by committing your recipe changes in two stages: the first which adds the compilation of the new binary, and the second which adds its execution, waiting for your changes to propagate through the waterfalls in between. Or, if this is the issue, just wait for a second build and see if the problem clears up. If not, revert.</div><div><br /></div>Again, there is currently <b>no support for try jobs of the recipe itself</b>. Be careful when making changes!</div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/a/chromium.org/dev/developers/testing/gpu-recipe">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="https://ssl.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq9pTzAUbnIPPtnQ0olG_yStU8dJobeN4TIoP2Sjo4uSD1aQ-c1fA0krflXuMdLufMSdoZ7dZZfnkEx0Vjq1xkDWCo98tut9NOwPIGIoIKIyP--O6l-/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
