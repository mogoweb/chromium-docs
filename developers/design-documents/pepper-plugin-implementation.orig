<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="http://www.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/developers","deleted":false,"title":"For Developers","dir":"ltr"},{"path":"/developers/design-documents","deleted":false,"title":"Design Documents","dir":"ltr"},{"path":"/developers/design-documents/pepper-plugin-implementation","deleted":false,"title":"Pepper plugin implementation","dir":"ltr"}];
  var JOT_clearDotPath = 'http://www.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttp://sites.google.com/a/chromium.org/dev/developers/design-documents/pepper-plugin-implementation\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"http://csi.gstatic.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["http://www.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["http://www.gstatic.com/sites/p/56e332/system/js/codemirror.js","http://www.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","http://www.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","http://www.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","http://www.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/developers/design-documents","parentWuid":"wuid:gx:359ef223e0fb14ac","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Pepper plugin implementation","locale":"en","wuid":"wuid:gx:2a54787d9c549e49","revision":82,"path":"/developers/design-documents/pepper-plugin-implementation","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"pepper-plugin-implementation","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Pepper plugin implementation - The Chromium Projects" />
<meta itemprop="name" content="Pepper plugin implementation - The Chromium Projects" />
<meta property="og:title" content="Pepper plugin implementation - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="http://www.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Pepper plugin implementation - The Chromium Projects</title>
<meta itemprop="image" content="http://www.chromium.org/_/rsrc/1347512885999/developers/design-documents/pepper-plugin-implementation/pepper_design.png" />
<meta property="og:image" content="http://www.chromium.org/_/rsrc/1347512885999/developers/design-documents/pepper-plugin-implementation/pepper_design.png" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="http://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="http://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:fe204a485666144" class="sites-navigation-link">Sitemap</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/developers" dir="ltr">For Developers</A>‎ &gt; ‎<A href="/developers/design-documents" dir="ltr">Design Documents</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Pepper plugin implementation</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr">This document provides a quick reference for PPAPI integration in Chromium.<div><br /></div><div>If you're adding a new API, see <a href="http://www.chromium.org/developers/pepper-api-best-practices">Pepper API Best Practices</a> for helpful guidelines and our process is documented in <a href="https://docs.google.com/document/d/1sjR0ZlDFVaxnKYdYCeLShumcaeYYSC_CgTM05gKcfXs/edit#heading=h.y526gzy584nh">Pepper API Proposals</a>.<br /><div><h2><a name="TOC-Quick-reference-to-important-code-locations"></a>Quick reference to important code locations</h2><div><ul><li><font face="'courier new', monospace">ppapi</font> — Root PPAPI code.</li><ul><li><font face="'courier new', monospace">api</font><font face="arial, sans-serif"><span style="font-family:Arial,Verdana,sans-serif"> —</span> IDL versions of the interfaces.</font></li><li><font face="'courier new', monospace">c</font> — Public C binary interface (generated by the IDL, checked into the tree)</li><li><font face="'courier new', monospace">cpp</font> — Convenience C++ wrapper around the C interface.</li><li><font face="'courier new', monospace">generators</font> — the IDL-to-C compiler</li><li><font face="courier new, monospace">host</font> — code used in content and chrome to implement the backends for the various resources.</li><li><font face="'courier new', monospace">native_client</font> — The NaCl trusted plugin</li><li><font face="'courier new', monospace">proxy</font> — Chrome IPC-based proxy</li><li><font face="'courier new', monospace">tests</font> — Source code for the unit tests.</li><li><font face="courier new, monospace">shared_impl</font> — Contains implementations for Pepper objects that we want to share between the proxied (<font face="'courier new', monospace">ppapi/proxy</font>) and the in-process version (<font face="'courier new', monospace">content/renderer/pepper</font>).</li><li><font face="'courier new', monospace">thunk</font> — Converts the C PPAPI calls from the plugin into C++ for the browser implementation.</li></ul><li><font face="courier new, monospace" style="font-size:10pt">chrome/browser/renderer_host/pepper/pepper_*_host.* </font><span style="font-size:10pt">— Backend ("host") implementations of new-style resources in the Chrome browser process.</span></li><li><font face="courier new, monospace">chrome/renderer/pepper/pepper_*_host.*</font> — Backend ("host") implementations of new-style resources in the Chrome renderer process.</li><li><font face="'courier new', monospace">content/renderer/pepper/ppb_*_impl.*</font> — Implementation of the old-style in-process resources and their connection to WebKit.</li><li><font face="courier new, monospace">content/browser/renderer_host/pepper/pepper_*_host.* </font>— Backend ("host") implementations of new-style resources in the Content browser process.</li><li><font face="courier new, monospace">content/renderer/pepper/pepper_*_host.*</font> — Backend ("host") implementations of new-style resources in Content renderer process</li><li><font face="'courier new', monospace">content/renderer/pepper/pepper_plugin_delegate_impl.*</font> — Delegate interface used to talk to the browser from the WebKit code.</li><li><font face="'courier new', monospace">content/renderer/render_view.cc</font> — Allocates the plugins (see <font face="'courier new', monospace">createPlugin</font>).</li><li><font face="'courier new', monospace">chrome/test/ppapi/</font> — Code to run the tests as part of the Chrome browser tests.</li></ul><h2><a name="TOC-Issue-tracking"></a>Issue tracking</h2><div>We're tracking PPAPI bugs in the Chromium issue tracker to keep things simpler. To file a pepper-related bug, use <i>all</i> of the following labels:</div><div><ul><li>Area-Internals</li><li>Cr-Internals-Plugins-Pepper</li></ul><div>If the bug relates to a Native Client specific part, additionally use the label:</div></div><div><ul><li>NaCl</li></ul><div>See the <a href="https://code.google.com/p/chromium/issues/list?can=2&amp;q=label%3ACr-Internals-Plugins-Pepper&amp;colspec=ID+Pri+M+Iteration+ReleaseBlock+Cr+Status+Owner+Summary+OS+Modified&amp;cells=tiles">current open bugs under the "Cr-Internals-Plugins-Pepper" label</a>.</div></div><h2><a name="TOC-Running-a-plugin-in-Chrome"></a>Running a plugin in Chrome</h2></div><div>There are two modes of operation, "trusted" and "untrusted" plugins. Untrusted plugins use the <a href="http://code.google.com/p/nativeclient/">Native Client</a> to safely run code from the web and is cross-platform. Trusted plugins are loaded directly in either the renderer process or a separate plugin process as platform-specific libraries.</div><div><br /></div><div>You run a plugin in trusted mode by building a platform-specific library implementing the API. For random manual testing, you can use one of the examples, the graphics 2D "paint manager" example is a good one for general hacking (see <font face="courier new, monospace">ppapi/examples/2d/</font>). A trusted plugin is instantiated by registering it to handle a MIME type on the command line. Provide the full plugin name (which varies by platform), followed by a semicolon, followed by the MIME type. The MIME type should match the "type" attribute of the object tag specified on your page. For the paint manager example plugin on Linux, you would run:</div><div><br /></div></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><div><font face="'courier new', monospace">chrome --register-pepper-plugins="/local/src/out/Debug/lib/libppapi_example_paint_manager.so;application/x-ppapi-example-2d" file:///local/src/ppapi/examples/2d/2d.html</font></div></div></blockquote><div><div><br /></div><div>In this case, <font face="'courier new', monospace">application/x-ppapi-example-2d</font> is what is specified in the <a href="http://src.chromium.org/viewvc/chrome/trunk/src/ppapi/examples/2d/2d.html?revision=144972&amp;view=markup"><font face="'courier new', monospace">example.html</font></a> page. This can be anything you want, as long as the two types match. Note also that we specify <span style="font-family:courier new,monospace">--ppapi-out-of-process</span><font face="arial, sans-serif">. In-process mode is being deprecated so it's a good idea to use this in general.</font></div></div><div><div><br /></div><div>On Linux, you can automatically launch this process in a new GDB instance in a new xterm, which will help you in debugging startup problems. Use this command line switch:</div><div><br /></div></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><div><font face="courier new, monospace" size="2">--ppapi-plugin-launcher=<span style="white-space:pre">'xterm -title plugin -e gdb --eval-command=run --args'</span></font></div></div></blockquote><div><div><h2><a name="TOC-Old-resource-and-proxy-design"></a>"Old" resource and proxy design</h2><div>Most resources are currently implemented using the old proxy design. There are several layers, and each resource is implemented once for in-process and once for out-of-process.</div><div><br /></div><div>The in-process implementations are in <font face="courier new, monospace">content/renderer/pepper/ppb_*_impl.*</font> These integrate with the rest of Chrome by using blink or other parts of content/renderer.</div><div><br /></div><div>The proxy implements interfaces for the out-of-process case. They are implemented in <font face="courier new, monospace">ppapi/proxy/ppb_*_proxy.*</font> The proxy has a <font face="courier new, monospace">ppapi/proxy/dispatcher.h</font> on each end of the IPC channel. The specialization <font face="courier new, monospace">PluginDispatcher</font> is on the plugin side, and the specialization <font face="courier new, monospace">HostDispatcher</font> is on the renderer side. Each interface has a Proxy object for which there is one per dispatcher, and a resource object that corresponds to the PP_Resource object.</div><div><br /></div><div>Some proxy objects and implementations share some or all of their code. Shared code can be put into <font face="courier new, monospace">ppapi/shared_impl/ppb_*_shared.*</font> to avoid duplication.</div><div><br /></div><div>Life cycle of a plugin -&gt; renderer call:</div><div><ol><li>Plugin calls PPAPI function.</li><li>Thunk layer converts this to a C++ call on a resource object.</li><li>Resource object sends IPC message to renderer via the <font face="courier new, monospace">PluginDispatcher</font>.</li><li><font face="arial, sans-serif">The </font><font face="courier new, monospace">HostDispatcher</font> receives message and forwards it to the appropriate interface proxy object in the renderer.</li><li>Interface proxy converts IPC message back to a PPAPI call and issues it to the in-process implementation.</li><li>Resource "impl" gets call and performs action.</li></ol></div><div>Unlike the "new" design there is no standard way of communicating with the browser. Some components (TCP/UDP sockets) do this with hand-rolled tracking.</div><h2><a name="TOC-New-resource-and-proxy-design"></a>"New" resource and proxy design</h2><div>All additions should use the new proxy design. It is higher performance and involves writing much less code. The new and old designs exist in parallel and we're moving resources over one-by-one.</div><div><br /></div><div>The resource object is implemented once (in <font face="courier new, monospace">ppapi/proxy/*_resource.cc</font>). This resource sends IPC to a "host" object in the browser and/or renderer process to do its work. The host object does not speak the Pepper API, it just uses Chrome IPC types. It can be in the renderer process, the browser process, or potentially both or neither (if all functionality is contained in the plugin process). It can also be implemented in the chrome or the content modules.</div><div><br /></div><div><div style="text-align:center;display:block"><a href="http://www.chromium.org/developers/design-documents/pepper-plugin-implementation/pepper_design.png?attredirects=0" imageanchor="1"><img border="0" src="http://www.chromium.org/_/rsrc/1347512885999/developers/design-documents/pepper-plugin-implementation/pepper_design.png" /></a></div><br /></div><div>Where does your host object live?</div><div><ul><li><font face="courier new, monospace">content/renderer/pepper/</font> — Probably the most common location. Most resources that interact with blink or other renderer functionality will go here.</li><li><font face="courier new, monospace">chrome/renderer/pepper/</font> — Use for Chrome-only interfaces (Flash, PDF, other custom stuff for custom Google plugins).</li><li><font face="courier new, monospace">content/browser/renderer_host/pepper/</font> — Use instead of or in addition to content/renderer/pepper when your resource needs to talk to the browser process for some reason.</li><li><font face="courier new, monospace">chrome/browser/renderer_host/pepper/</font> — Use instead of or in addition to chrome/renderer/pepper when your resource needs to talk to the browser process for some reason.</li></ul>Each of the above directories has a "host factory" file in it for creating the hosts for your resource. You'll also have access to the <font face="courier new, monospace">BrowserPpapiHost</font><font face="arial, sans-serif"> / </font><font face="courier new, monospace">RendererPpapiHost</font><font face="arial, sans-serif"> which will allow you to make calls into the system and get context for your resource.</font></div><div><font face="arial, sans-serif"><br /></font></div><div><font face="arial, sans-serif">We support in-process mode for legacy interfaces needed by certain plugins. New resources do not need to support in-process. For resources that need in-process, we have a "fake" IPC channel that allows the "proxy" and "host" to be in the same process. To wire this up, first get your out-of-process implementation working, then hook up creation through </font><font face="courier new, monospace">content/renderer/pepper/pepper_in_process_resource_creation.cc</font><font face="arial, sans-serif">. Note that this only works for resources implemented in </font><font face="courier new, monospace">content/renderer</font><font face="arial, sans-serif">. Other types of hosts are not supported in in-process mode.</font></div><div><font face="arial, sans-serif"><br /></font></div><div><font face="arial, sans-serif">Life cycle of a plugin -&gt; renderer call</font></div><div><ol><li>Plugin calls PPAPI function.</li><li>Thunk layer converts this to a C++ call on the proxy resource object.</li><li>Proxy resource does a <font face="courier new, monospace">CallRenderer</font> with its message. This gets embedded into a "resource call" IPC message which encodes the resource ID and instance.</li><li>The <font face="courier new, monospace">ResourceHost</font> in the renderer receives the message and finds the corresponding resource host object.</li><li>The resource host decodes the message and performs the operation.</li></ol><div>Note that creation is a separate step. The resource creates the host in the browser or renderer by calling <font face="courier new, monospace">SendCreateToBrowser</font> or <font face="courier new, monospace">SendCreateToRenderer</font>. This is picked up by the host factory in the directory holding the resource.</div></div><h3><a name="TOC-Adding-a-new-interface"></a>Adding a new interface</h3><div><b><span style="font-weight:normal">Please look at our <a href="https://docs.google.com/document/d/1sjR0ZlDFVaxnKYdYCeLShumcaeYYSC_CgTM05gKcfXs/edit#heading=h.y526gzy584nh">Pepper API Process Doc</a> before starting to implement a new API.</span></b></div><div><b><span style="font-weight:normal"><br /></span></b></div><div><b><span style="font-weight:normal">To make the interface definitions (this is the same between the "new" and "old" proxy designs):</span></b><br /><ol><li><b>Create the IDL file.</b><b style="font-weight:normal"> </b>Most new interfaces will be dev so would be called <font face="'courier new', monospace">ppapi/api/dev/ppb_foo_dev.idl</font>.</li><li><b>Generate the C interface file.</b> Run the script <font face="'courier new', monospace">ppapi/generators/generator.py</font>. Make sure to run it from within the generators directory. This should make a corresponding <font face="'courier new', monospace">ppapi/c/dev/ppb_foo_dev.h</font> file which you should add to your CL.</li><li><b>Write a C++ wrapper for your interface.</b> (Some classes may not need C++ wrappers, check with Brett if you're unsure.) The corresponding location would be in <font face="'courier new', monospace">ppapi/cpp/foo_dev.h</font>. This is pretty easy and you should be able to copy the surrounding classes. Add it to the .gyp file.</li><li><b>Add your new interface file to the C test list in</b> <span style="border-collapse:collapse"><font face="'courier new', monospace">ppapi/tests/all_c_includes.h</font></span><span style="font-family:arial,sans-serif;border-collapse:collapse">. This is how we make sure that everything continues to compile in C (rather than just C++ mode).</span></li></ol><font face="arial, sans-serif">To hook up your interface</font><b><span style="font-weight:normal"> (this is the same between the "new" and "old" proxy designs):</span></b></div><div><ol><li><font face="arial, sans-serif"><b>Write a C++ "API" for it.</b> This is in </font><font face="'courier new', monospace">ppapi/thunk/ppb_foo_api.h</font><font face="arial, sans-serif">. This defines the virtual interface that Chrome will use to implement your interface. If your interface is a bunch of functions rather than a new resource, you can just add it on to </font><font face="'courier new', monospace">ppb_instance_api.h</font><font face="arial, sans-serif">. Check with Brett if you're unsure. Add a creation function for your resource to </font><font face="'courier new', monospace">ResourceCreationAPI</font>.</li><li><font face="arial, sans-serif"><b>Write a thunk for it.</b> This converts the C PPAPI calls for your interface to C++ calls on the API you made in the previous step. Look at a similar interface to see what it does. Typically the Create function on a resource API would go through the </font><font face="'courier new', monospace">ResourceCreationAPI</font><font face="arial, sans-serif"> object (add a function there for your new resource type) and the rest of the functions go through to your API. Add the thunk and API to ./ppapi/ppapi_shared.gypi.<br /></font></li><li><font face="arial, sans-serif"><b>Register the interface with Chrome.</b> Add it to ppapi/thunk/interfaces_ppb_public_dev.h. Follow the directions in the _stable version of that file. This tells Chrome about your interface name and connects your thunk function to it. This file is included in various places that define implementations of the macros to register the name-&gt;vtable mapping.</font></li></ol><font face="arial, sans-serif">Implement the resource "proxy" (this is different from the "old" design):</font></div><div><ol><li><font face="arial, sans-serif"><b>Create the proxy file.</b> This is called </font><font face="courier new, monospace">FooResource</font><font face="arial, sans-serif"> as opposed to "old" design resources which would be </font><font face="courier new, monospace">PPB_Foo_Proxy</font><font face="arial, sans-serif">. </font></li><li><font face="arial, sans-serif"><b>Define the IPC messages you need.</b> Add them to </font><font face="courier new, monospace">ppapi/proxy/ppapi_messages.h</font><font face="arial, sans-serif">. You'll generally need one for creating your host resource, one for each "call" from the proxy to the host, and one for each "reply".</font></li><li><font face="arial, sans-serif"><b>Write a unit test in the same directory.</b> This should just emulate the IPC layer. Be sure to test different edge conditions and make sure that the proper IPC messages are sent in response to plugin calls, and that the correct plugin callbacks are called in response to IPC messages.</font></li></ol><div><font face="arial, sans-serif">Implement the resource "host" (this is different from the "old" design):</font></div></div><div><ol><li><font face="arial, sans-serif"><b>Write the resource host.</b> Put the file in one of the four locations discussed above.</font></li><li><font face="arial, sans-serif"><b>Hook up the host creation.</b> The host factory in the same directory as your resource host should have a switch in it. Be sure to check the permissions if your interface is dev/trusted/etc. to make sure the plugin is allowed to create such resources.</font></li><li><font face="arial, sans-serif"><b>Implement the IPC message handlers.</b> You should be able to copy how an existing resource host works to get the calls you expect.</font></li><li><font color="#ff0000" face="arial, sans-serif"><b>Keep in mind that the plugin is untrusted.</b> It could be trying to exploit you. Don't trust that it has permission to do anything, and rigorously check all parameters.</font></li></ol></div><h2><a name="TOC-Designing-your-interface"></a>Designing your interface</h2></div><div><div><font face="arial, sans-serif" size="2">Features are implemented as "interfaces." An interface is just a vtable identified by a string name. Most features are implemented as "resources" which are generic refcounted project identified by an opaque handle. Your normally have an interface that exposes all the functions your resource supports.</font></div><div><ul><li><font face="arial, sans-serif" size="2">The first two functions in a resource's interface should be </font><font face="'courier new', monospace" size="2">PP_Resource Create(PP_Instance, ...)</font><font face="arial, sans-serif" size="2"> to allow creation of your resource and </font><font face="'courier new', monospace" size="2">PP_Bool IsFoo(PP_Resource)</font><font face="arial, sans-serif" size="2"> to allow for type checking.</font></li></ul><ul><li><font face="arial, sans-serif" size="2">Since most stuff happens out-of-process, these functions should be asynchronous. Asynchronous functions should take a </font><font face="'courier new', monospace" size="2">PP_CompletionCallback</font><font face="arial, sans-serif" size="2"> argument and return an </font><font face="'courier new', monospace" size="2">int32_t</font><font face="arial, sans-serif" size="2"> (which will normally be </font><font face="'courier new', monospace" size="2">PP_OK_COMPLETIONPENDING</font><font face="arial, sans-serif" size="2"> for asynchronous completion). It's important that your create function <i>not</i> be asynchronous because then the caller has no way to cancel the callback (normally you can just delete the object). If you object constuction requires asynchronous completion, have a simple synchronous </font><font face="'courier new', monospace" size="2">Create</font><font face="arial, sans-serif" size="2"> function and then an asynchronous </font><font face="'courier new', monospace" size="2">Open</font><font face="arial, sans-serif" size="2"> or </font><font face="'courier new', monospace" size="2">Init</font><font face="arial, sans-serif" size="2"> function which you would call after creation.</font></li></ul><ul><li><font size="2"><font face="arial, sans-serif">Many completion callbacks want to return data. These should be of the form:</font><br /><font face="courier new, monospace">  int32_t DoFoo(PP_Resource resource, PP_Var* output_arg, PP_CompletionCallback cb);</font><br /><font face="arial, sans-serif">Your C++ wrapper can then take a </font><font face="courier new, monospace">CompletionCallbackWithOutput&lt;Var&gt;</font><font face="arial, sans-serif"> which has template magic to convert the output argument to a parameter on the callback function.</font></font></li></ul><div><h2><a name="TOC-Writing-error-logs"></a>Writing error logs</h2><div>In a resource implementation, use <font face="'courier new', monospace">Resource.Log()</font> to display a message in the console (in the JS inspector) for the page. In other places, use <font face="'courier new', monospace">PpapiGlobals::LogWithSource()</font>.<br /></div><div><ul><li>Log messages should have the name of the interface, a dot, and the function name, followed by a colon and the text of the message. The rest of the message should begin with a capital and end with a period as with Chrome comments. So: <font face="'courier new', monospace">"PPB_Foo.Frobulate: The bar is invalid."</font><font face="arial, sans-serif">.</font></li><li><font face="arial, sans-serif">Not all errors should have error logs. In fact, most shouldn't. Most functions should have well-defined error conditions that are described in the documentation for that function. In this case, it's unnecessary to log an error because the caller can easily see they got a NOACCESS and look up what that means in the context of your function, for example.</font></li><li><font face="arial, sans-serif">Some things may be tricky or easily called incorrectly, may have no return value, or ambiguous return values. In these cases, it can be useful to add a Log call to tell the programmer how they messed up.</font></li></ul></div><h2><a name="TOC-Architecture-of-the-renderer-implementation"></a>Architecture of the renderer implementation</h2></div></div></div><div>It may help to open the NPAPI <a href="http://www.chromium.org/developers/design-documents/plugin-architecture">plugin architecture design doc</a> in another tab. This section will compare Pepper to the "in process" NPAPI implementation. Most of the names are the same between Pepper and NPAPI, except we use the <font face="'courier new', monospace">webkit::ppapi</font> namespace and NPAPI uses the <font face="'courier new', monospace">webkit::npapi</font> namespace. If you haven't already, you should also understand the <a href="http://code.google.com/p/ppapi/wiki/Concepts">important concepts</a> of PPAPI.</div><div><ul><li>To WebKit, a Pepper plugin is the same as an NPAPI plugin. We implement the <font face="'courier new', monospace">WebKit::WebPlugin</font> interface as <font face="'courier new', monospace">webkit::ppapi::WebPluginImpl</font> in <font face="'courier new', monospace">ppapi_webplugin_impl.cc</font>. This is our analog of NPAPI's <font face="'courier new', monospace">webkit::npapi::WebPluginImpl</font>.</li></ul><ul><li>The <font face="'courier new', monospace">PluginInstance</font> object talks to the plugin's <font face="'courier new', monospace">PPP_Instance</font> interface, and receives requests through the browser's <font face="'courier new', monospace">PPB_Instance</font> interface.</li></ul><ul><li>The <font face="'courier new', monospace">PluginInstance</font> owns a reference to the <font face="'courier new', monospace">PluginModule</font> which represents the shared library loaded in the renderer. The <font face="'courier new', monospace">PluginModule</font><font face="arial, sans-serif"> is shared between all instances of that plugin. It</font> handles loading and unloading of the library, implements the <font face="'courier new', monospace">PPB_Core</font> interface, and also implements the <font face="'courier new', monospace">GetInterface</font> function that the plugin module uses to get all other browser interfaces.</li></ul><ul><li>In some cases, the plugin needs to talk "up" the browser stack. For example, a certain operation might require that the browser process do something on behalf of the plugin. To support this, there is the <font face="'courier new', monospace">webkit::ppapi::PluginDelegate</font> virtual interface.</li></ul><ul><li>The <font face="'courier new', monospace">RenderView</font> handles creation of the Pepper plugin in <font face="'courier new', monospace">RenderView::createPlugin</font>. <font face="'courier new', monospace">RenderView</font> has as a member a helper class <font face="'courier new', monospace">PepperPluginDelegateImpl</font> which implements the <font face="'courier new', monospace">webkit::ppapi::PluginDelegate</font> interface. This implementation is supplied to a plugin when it is created.</li></ul></div><h2><a name="TOC-Debugging-a-plugin"></a>Debugging a plugin</h2><div>Trusted plugins are loaded directly into the renderer sub-process, rather than a separate plugin process. You can use the standard renderer debugging techniques, including single process mode, for debugging the plugin.</div><div><br /></div><div>Plugins also run in the renderer sandbox. You will find your plugin code is constrained to the same requirements and limitations as other code in the renderer (can't read and write files or directly access devices).</div><h2><a name="TOC-Running-the-tests"></a>Running the tests</h2><div>The tests in <font face="'courier new', monospace">ppapi/tests</font> are run as part of the Chrome <font face="'courier new', monospace">browser_tests</font>. The source code is in <font face="'courier new', monospace">chrome/test/ppapi</font> and you can see in that file there are separate GTest tests for each PPAPI test file. To just run this test, you can use:</div></div><div><br /></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="'courier new', monospace">browser_tests --gtest_filter="PPAPITest.*"</font></div><div><span style="font-family:arial,sans-serif"><br /></span></div></blockquote><span style="font-family:arial,sans-serif">Or to run tests out of process:</span><br /><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace">browser_tests --gtest_filter="OutOfProcessPPAPITest.*"</font></div></blockquote><font face="arial, sans-serif"><br /></font><div><font face="arial, sans-serif">You can also run the tests manually in Chrome. You first need to build the test plugin, which is the </font><font face="'courier new', monospace">ppapi_tests</font><font face="arial, sans-serif"> project, and build Chrome (PPAPI doesn't work in test shell). When running Chrome, enable the PPAPI testing interface (it's off by default to prevent production plugins from abusing this API) and register the test plugin as handling the </font><font face="'courier new', monospace">application/x-ppapi-tests</font><font face="arial, sans-serif"> MIME type:</font></div><div><font face="arial, sans-serif"><br /></font></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="'courier new', monospace">chrome --register-pepper-plugins="C:\code\src\chrome\Debug\ppapi_tests.dll</font><span style="font-family:courier new,monospace">#PPAPI Tests##1.2.3</span><font face="'courier new', monospace">;</font><span style="font-family:courier new,monospace">application/x-ppapi-tests" --enable-pepper-testing</span></div></blockquote><div><font face="arial, sans-serif"><br /></font></div><div><font face="arial, sans-serif">The library name is platform-specific. On Linux, use </font><font face="'courier new', monospace">libppapi_tests.so</font><font face="arial, sans-serif"> in the output directory. On Mac, use </font><font face="'courier new', monospace">ppapi_tests.plugin</font><font face="arial, sans-serif">. </font><font face="arial, sans-serif">Once Chrome is running, just load the </font><font face="'courier new', monospace"><a href="http://code.google.com/p/ppapi/source/browse/trunk/tests/test_case.html">test_case.html</a></font><font face="arial, sans-serif"> </font><font face="arial, sans-serif">file in the browser. Set the "query" part of the URL to be the name of the test you want to run, for example to run the ImageData tests, load:</font></div><div><font face="arial, sans-serif"><br /></font></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="arial, sans-serif"><span style="font-family:courier new,monospace">file:///C:/code/src/ppapi/tests/test_case.html?ImageData</span></font></div></blockquote><div><font face="arial, sans-serif"><br /></font></div><div><font face="arial, sans-serif">You will see a log of the test cases in the gray square. If the plugin doesn't load, you will see an error message above the gray square indicating that the plugin could not be found. This means that the library name is incorrect or it failed to load for some reason.</font></div><h4><a name="TOC-Running-HTTP-tests-manually"></a>Running HTTP tests manually</h4><div><font face="arial, sans-serif">Some tests like the URLLoader test require that it be run over HTTP. The Chrome browser tests are configured to automatically do this. But for debugging purposes you may want to do this manually. From your </font><font face="'courier new', monospace">src</font><font face="arial, sans-serif"> directory on Linux, do:</font></div><div><font face="arial, sans-serif"><br /></font></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><div><span style="font-family:courier new,monospace">export PYTHONPATH=third_party/pyftpdlib/src:third_party/tlslite:</span><font face="courier new, monospace">third_party/pywebsocket/src</font></div><div><font face="'courier new', monospace">python net/tools/testserver/testserver.py --port=1337 --data-dir=ppapi/tests</font></div></div></blockquote><font face="arial, sans-serif"><br /></font><div><font face="arial, sans-serif">and on Windows, use:</font></div><div><font face="arial, sans-serif"><br /></font></div><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="'courier new', monospace">set PYTHONPATH=third_party\pyftpdlib\src;third_party\tlslite;third_party\pywebsocket\src</font></div><div><font face="'courier new', monospace">python net\tools\testserver\testserver.py --port=1337 --data-dir=ppapi/tests</font></div><div><font face="arial, sans-serif"><br /></font></div></blockquote><font face="arial, sans-serif">Then you should be able to load</font><font face="'courier new', monospace"> http://127.0.0.1:1337/files/test_case.html</font><font face="arial, sans-serif"> in your browser.<br /><br /></font><h4><a name="TOC-Running-NaCl-tests-manually"></a>Running NaCl tests manually</h4><div>The NaCl tests also must be run over HTTP, but they are loaded from the build output directory instead of ppapi/tests. So to start the test server for NaCl tests on Linux for a Debug build, do:</div><div><br /><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><span style="font-family:courier new,monospace">export PYTHONPATH=third_party/pyftpdlib/src:third_party/tlslite:</span><font face="courier new, monospace">third_party/pywebsocket/src</font></div><div><font face="'courier new', monospace">python net/tools/testserver/testserver.py --port=1337 --data-dir=out/Debug</font></div><div><span style="font-family:arial,sans-serif"><br /></span></div></blockquote><span style="font-family:arial,sans-serif">and on Windows, use:</span><br /><font face="arial, sans-serif"><br /></font><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><span style="font-family:courier new,monospace">set PYTHONPATH=third_party\pyftpdlib\src;third_party\tlslite;third_party\pywebsocket\src</span><br /><span style="font-family:courier new,monospace">python net\tools\testserver\testserver.py --port=1337 --data-dir=out/Debug</span><br /></blockquote><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><blockquote style="margin:0pt 0pt 0pt 40px;border:medium none;padding:0px"><div><font face="'courier new', monospace"><br /></font></div></blockquote></blockquote></div><span style="font-family:arial,sans-serif">The command-line for running NaCl tests is different; you don't need to load the test plugin, but you do need to enable NaCl:</span><br /><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><font face="arial, sans-serif"><br /></font></div></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><font face="'courier new', monospace">chrome --enable-nacl</font><span style="font-family:courier new,monospace"> --enable-pepper-testing</span></div></div></blockquote><font face="courier new, monospace"><br /></font><div><div><font face="arial, sans-serif">You must append "</font><font face="courier new, monospace">&amp;mode=nacl_glibc</font><font face="arial, sans-serif">" or "</font><font face="courier new, monospace">&amp;mode=nacl_newlib</font><font face="arial, sans-serif">" to the URL. E.g.: load </font><font face="'courier new', monospace">http://127.0.0.1:1337/files/test_case.html?testcase=URLLoader&amp;mode=nacl_glibc</font><font face="arial, sans-serif"> in your browser</font><span style="font-family:arial,sans-serif">.<br /></span></div></div></div><div><span style="font-family:arial,sans-serif"><br /></span></div><div><h2><a name="TOC-Testing-with-Flash"></a>Testing with Flash</h2><h2><a name="TOC-Running-a-local-build-with-Flash-is-slightly-different.-You-can-usually-run-a-local-build-of-Chromium-with-a-Flash-plugin-that-comes-with-a-recent-Chrome-distribution-for-example-Canary-or-Dev-Channel-using---ppapi-flash-path-and---ppapi-flash-version-gott"></a><span style="background-color:transparent;font-family:arial,sans-serif;font-size:13px;font-weight:normal">Running a local build with Flash is slightly different. You can usually run a local build of Chromium with a Flash plugin that comes with a recent Chrome distribution (for example, Canary or Dev Channel) using --ppapi-flash-path and --ppapi-flash-version (gotten from the "Manifest.json" file that is bundled alongside the Flash plugin in Chrome. For example, on Linux you could type:<br /></span></h2></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><h2><a name="TOC-out-Debug-chrome---ppapi-flash-path-opt-google-chrome-unstable-PepperFlash-libpepflashplayer.so---ppapi-flash-version-grep--i-version-opt-google-chrome-unstable-PepperFlash-manifest.json-awk-print-2-awk--F-print-2-"></a><font face="courier new, monospace" size="2"><span style="font-weight:normal">out/Debug/chrome --ppapi-flash-path=/opt/google/chrome-unstable/PepperFlash/libpepflashplayer.so --ppapi-flash-version=`grep -i version /opt/google/chrome-unstable/PepperFlash/manifest.json | awk '{print $2}' | awk -F"\"" '{print $2}'`</span></font></h2></div></blockquote></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-attachments">
<div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px;"><span aria-label="Attachments" title="Attachments"><div class="sites-translucent sites-symbol" aria-hidden="true">Č</div></span></div><div id="sites-attachments-update-div" class="sites-attachments-inner-div" style="display:none;"><span class="sites-attachments-update-icon"><img src="http://www.gstatic.com/sites/p/56e332/system/app/images/spinner.gif" /></span><div class="sites-attachments-update-text">Updating...</div></div></div><div class="sites-attachments-separator"></div>
<div id="attachment-wuid:gx:36881be7c867ed5b"><div class="sites-attachments-row"><div class="sites-attachments-icon sites-attachments-icon-accessible" style="left:5px"><div class="sites-translucent sites-symbol" aria-label="File" title="File">ċ</div></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name"><a href="http://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=Y2hyb21pdW0ub3JnfGRldnxneDozNjg4MWJlN2M4NjdlZDVi">Pepper design.ai</a> <div class="sites-translucent">(1096k)</div></div><div class="sites-attachments-author">Brett Wilson, <div class="sites-translucent">Sep 12, 2012, 10:07 PM</div></div></div><div class="sites-attachments-version sites-attachments-version-accessible"><a href="/system/app/pages/admin/revisions?wuid=wuid:gx:36881be7c867ed5b">v.1</a></div><div id="attachment-download-wuid:gx:36881be7c867ed5b" class="sites-attachments-icon sites-attachments-icon-accessible" style="right:0px"><a href="/developers/design-documents/pepper-plugin-implementation/Pepper%20design.ai?attredirects=0&amp;d=1" aria-label="Download Pepper design.ai" title="Download" role="button"><span class="sites-symbol" aria-hidden="true">ď</span></a></div></div><div class="sites-attachments-separator"></div></div>
<div style="height: 10px"></div>
</div>
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=http://sites.google.com/a/chromium.org/dev/developers/design-documents/pepper-plugin-implementation">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="http://www.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXvrAwjAfmld0ObrebBiGRq9PSi7C4f0lqXAGuNB7F9XBA0n4zcr9dJJpO9IIsB-73XuaEMjCUtGansWKS2m5SqE1Y5UaWc0l5yU8KvxOLIBVDW55SXFAnSef10UJZ_4t_OXCplM/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('http://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'http://csi.gstatic.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
