<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e="wtsrt_",g="tbsd_",h="tbnd_",k="start",l="_wtsrt",m="_tbnd",n="CSI/";(function(){function f(a){this.t={};this.tick=function(a,c,b){this.t[a]=[void 0!=b?b:(new Date).getTime(),c];if(void 0==b)try{window.console.timeStamp(n+a)}catch(d){}};this.tick(k,null,a)}var a;window.performance&&(a=window.performance.timing);var p=a?new f(a.responseStart):new f;window.jstiming={Timer:f,load:p};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick(l,void 0,c),b.tick(e,l,d),b.tick(g,e))}try{a=null,
window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick(m,void 0,window.chrome.csi().startE),b.tick(h,m,c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick(m,void 0,window.external.startE),b.tick(h,m,c))),a&&(window.jstiming.pt=a)}catch(q){}})(); })()
</script>
<link rel="shortcut icon" href="/_/rsrc/1354323194313/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/56e332/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d="",g="__duration__",h="function";function k(c){return document.getElementById(c)}window.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,d)}window.trim=l;var m=[],n=0;window.JOT_addListener=function(c,a,b){var e=new String(n++);c={eventName:c,handler:a,compId:b,key:e};m.push(c);return e};window.JOT_removeListenerByKey=function(c){for(var a=0;a<m.length;a++)if(m[a].key==c){m.splice(a,1);break}};
window.JOT_removeAllListenersForName=function(c){for(var a=0;a<m.length;a++)m[a].eventName==c&&m.splice(a,1)};window.JOT_postEvent=function(c,a,b){var e={eventName:c,eventSrc:a||{},payload:b||{}};if(window.JOT_fullyLoaded)for(a=m.length,b=0;b<a&&b<m.length;b++){var f=m[b];f&&f.eventName==c&&(e.listenerCompId=f.compId||d,(f=typeof f.handler==h?f.handler:window[f.handler])&&f(e))}else window.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};window.JOT_delayedEvents=[];
window.JOT_fullyLoaded=!1;window.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var e=0;60<=b&&(b/=60,e=2);2<=b&&e++;return a?window.JOT_siteRelTimeStrs[e].replace(g,Math.floor(b)):window.JOT_userRelTimeStrs[e].replace(g,Math.floor(b))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/developers","deleted":false,"title":"For Developers","dir":"ltr"},{"path":"/developers/design-documents","deleted":false,"title":"Design Documents","dir":"ltr"},{"path":"/developers/design-documents/impl-side-painting","deleted":false,"title":"Multithreaded Rasterization","dir":"ltr"}];
  var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/56e332/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

  
  

  

  var webspace = {"enableAnalytics":true,"pageSharingId":"jotspot_page","enableUniversalAnalytics":false,"sharingPolicy":"OPENED_WITH_INDICATOR","siteTitle":"The Chromium Projects","isStartPageEnabled":true,"adsensePublisherId":null,"features":{"languageSelectDefaultTextSetToDefault":true,"validateClientGvizDataSourceUrls":true,"moreMobileStyleImprovements":true,"newInsertMenuIcons":true,"accessibleSortingButtons":true,"domainAnalyticsInGAOnly":true,"noCaptcha":true,"fileCabinetScreenReaderFix":true,"updatedTosAndPrivacyLinks":null,"pageDrafts":false,"mobileOrientationFix":true,"plusBadge":false,"pdfEmbedSupport":false,"jsClickFix":true},"isPublic":true,"isConsumer":false,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"onepickBaseUrl":"https://docs.google.com","domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttps://sites.google.com/a/chromium.org/dev/developers/design-documents/impl-side-painting\u0026service\u003djotspot","analyticsAccountId":"UA-5484340-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"https://gg.google.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/en/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["https://ssl.gstatic.com/sites/p/56e332/system/app/css/sitelayouteditor.css"],"text":["https://ssl.gstatic.com/sites/p/56e332/system/js/codemirror.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codemirror_css.css","https://ssl.gstatic.com/sites/p/56e332/system/js/trog_edit__en.js","https://ssl.gstatic.com/sites/p/56e332/system/app/css/trogedit.css","/_/rsrc/1441580320000/system/app/css/editor.css","https://ssl.gstatic.com/sites/p/56e332/system/app/css/codeeditor.css","/_/rsrc/1441580320000/system/app/css/camelot/editor-jfk-wlb.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"chromium.org","baseUri":"","name":"dev","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":"/developers/design-documents","parentWuid":"wuid:gx:359ef223e0fb14ac","siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Multithreaded Rasterization","locale":"en","wuid":"wuid:gx:603039fce843dcd","revision":11,"path":"/developers/design-documents/impl-side-painting","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"impl-side-painting","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"Web Page"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Multithreaded Rasterization - The Chromium Projects" />
<meta itemprop="name" content="Multithreaded Rasterization - The Chromium Projects" />
<meta property="og:title" content="Multithreaded Rasterization - The Chromium Projects" />
<meta name="description" content="Home of the Chromium Open Source Project" />
<meta itemprop="description" content="Home of the Chromium Open Source Project" />
<meta id="meta-tag-description" property="og:description" content="Home of the Chromium Open Source Project" />
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="https://ssl.gstatic.com/sites/p/56e332/system/app/themes/beigeandblue/standard-css-beigeandblue-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/overlay.css?cb=beigeandblueundefineda100%25%25150goog-ws-leftthemedefaultstandard" />
<link rel="stylesheet" type="text/css" href="/_/rsrc/1441580320000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Multithreaded Rasterization - The Chromium Projects</title>
<meta itemprop="image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<meta property="og:image" content="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" />
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="height:auto;">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="height:auto;">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><a href="https://www.chromium.org/" id="sites-chrome-userheader-logo"><img id="logo-img-id" src="/_/rsrc/1438879449147/config/customLogo.gif?revision=3" alt="The Chromium Projects" class="sites-logo  " /></a><h2><a href="https://www.chromium.org/" dir="ltr" id="sites-chrome-userheader-title">The Chromium Projects</a></h2></div></td><td class="sites-layout-searchbox  "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/system/app/pages/search" role="search"><input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" /><input type="text" id="jot-ui-searchInput" name="q" size="20" value="" aria-label="Search this site" /><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">Search this site</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</table>
</div>
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_7648876402527094" class="sites-embed" role="navigation"><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-projects" jotId="wuid:gx:10ae433dadbbab13" class="sites-navigation-link">Home</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/Home" jotId="wuid:gx:43582b9d2029d3af" class="sites-navigation-link">Chromium</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/chromium-os" jotId="wuid:gx:83df2ab1f8880ba" class="sites-navigation-link">Chromium OS</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_14720868319272995" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Quick links</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/for-testers/bug-reporting-guidelines" class="sites-navigation-link">Report bugs</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://www.chromium.org/developers/discussion-groups" class="sites-navigation-link">Discuss</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="/system/app/pages/sitemap/hierarchy" jotId="wuid:gx:4b58a9a350ad12f" class="sites-navigation-link">网站地图</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19690813310444355" class="sites-embed" role="navigation"><h4 class="sites-embed-title">Other sites</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotId="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="http://blog.chromium.org/" class="sites-navigation-link">Chromium Blog</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="http://code.google.com/chrome/extensions/" class="sites-navigation-link">Google Chrome Extensions</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://developers.google.com/chrome/chrome-frame/" class="sites-navigation-link">Google Chrome Frame</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_19695218559354544" class="sites-embed" role="complementary"><h4 class="sites-embed-title"></h4><div class="sites-embed-content sites-embed-content-sidebar-textbox"><div dir="ltr"><span style="font-size:x-small">Except as otherwise </span><a href="http://developers.google.com/site-policies.html#restrictions"><span style="font-size:x-small">noted</span></a><span style="font-size:x-small">, the content of this page is licensed under a </span><a href="http://creativecommons.org/licenses/by/2.5/"><span style="font-size:x-small">Creative Commons Attribution 2.5 license</span></a><span style="font-size:x-small">, and examples are licensed under the </span><a href="http://src.chromium.org/viewvc/chrome/trunk/src/LICENSE" target="_blank"><span style="font-size:x-small">BSD License</span></a><span style="font-size:x-small">.<br /></span></div></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
<A href="/developers" dir="ltr">For Developers</A>‎ &gt; ‎<A href="/developers/design-documents" dir="ltr">Design Documents</A>‎ &gt; ‎
  </div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Multithreaded Rasterization</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><h2 dir="ltr" style="font-weight:bold;font-size:medium;font-family:Times New Roman"><a name="TOC-nduca-enne-vangelis-and-many-others-"></a><b style="font-size:medium;font-weight:normal"><h2 dir="ltr" style="display:inline!important"><a name="TOC-nduca-enne-vangelis-and-many-others-1"></a><b style="font-size:medium;font-weight:normal"><h2 dir="ltr" style="display:inline!important"><a name="TOC-nduca-enne-vangelis-and-many-others-2"></a><b style="font-size:medium;font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">@nduca, @enne, @vangelis (and many others)</span></b></h2></b></h2></b></h2><br /><h1 style="font-weight:bold;font-size:medium;font-family:Times New Roman"><a name="TOC-Implementation-status:"></a><span style="font-size:16px;font-family:Arial;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Implementation status:</span></h1><h1><a name="TOC-crbug.com-169282-and-https:-code.google.com-p-chromium-issues-list-q-label:Cr-Internals-Compositing-Rasterization"></a><font size="3"><span style="color:rgb(102,102,102);vertical-align:baseline;white-space:pre-wrap;font-weight:normal;background-color:transparent"><font face="arial, sans-serif">crbug.com/169282, and </font></span><span style="font-weight:normal;white-space:pre-wrap;background-color:transparent"><font color="#666666" face="arial, sans-serif"><a href="https://code.google.com/p/chromium/issues/list?q=label:Cr-Internals-Compositing-Rasterization">https://code.google.com/p/chromium/issues/list?q=label:Cr-Internals-Compositing-Rasterization</a></font></span></font></h1><div><span style="font-size:10pt;background-color:transparent">This feature is referred to as "multithreaded painting" and "impl-side painting" in some forums.</span></div><div><h2 dir="ltr"><a name="TOC-Background-Problem-StatementOur-current-compositor-thread-architecture-is-built-around-the-idea-of-rasterizing-layers-on-the-main-webkit-thread-and-then-on-the-compositor-thread-drawing-the-bits-of-the-layers-that-we-have-based-on-their-various-animated-an"></a><span style="background-color:transparent;color:rgb(102,102,102);font-family:Arial;font-size:16px;white-space:pre-wrap">Background &amp; Problem Statement</span><br /><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap;font-weight:normal">Our current compositor thread architecture is built around the idea of rasterizing layers on the main webkit thread and then, on the compositor thread, drawing the bits of the layers that we have based on their various animated and scrolled positions. This allows us to move the page up and down, e.g. due to finger dragging, without having to block on the webkit thread. When a tile is exposed that does not have contents, we draw a checkerboard and wait for the main thread to rasterize that tile.</span></h2><h2 dir="ltr"><a name="TOC-We-want-to-be-able-to-fill-in-checkerboards-without-requiring-a-new-commit-since-that-requires-going-to-a-busy-webkit-thread-and-pulling-in-a-whole-new-tree-damage.-We-also-want-to-be-able-to-render-tiles-at-multiple-resolutions-and-quality-levels.-These-k"></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><ol style="margin-top:0pt;margin-bottom:0pt;display:inline!important"><li style="list-style-type:decimal;font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;display:inline!important"><span style="background-color:transparent;vertical-align:baseline;white-space:pre-wrap">We want to be able to fill in checkerboards without requiring a new commit, since that requires going to a busy webkit thread and pulling in a whole new tree + damage. We also want to be able to render tiles at multiple resolutions, and quality levels. These kinds of tricks reduce memory pressure, avoid the jarring interruption of checkerboards.</span></li></ol></b></b></h2><h2 dir="ltr"><a name="TOC-The-Excessive-Checkerboarding-ProblemA-lot-of-our-unwanted-checkerboarding-comes-from-invalidates-getting-intermixed-with-requests-from-the-impl-thread-to-fill-in-missing-tiles.-In-the-current-architecture-we-can-only-rasterize-tiles-on-the-main-thread-usi"></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-size:medium;font-weight:normal"><h3 dir="ltr"><a name="TOC-The-Excessive-Checkerboarding-Problem"></a><span style="font-size:16px;font-family:Arial;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">The Excessive Checkerboarding Problem</span></h3><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">A lot of our unwanted checkerboarding comes from invalidates getting intermixed with "requests" from the impl thread to fill in missing tiles. In the current architecture, we can only rasterize tiles on the main thread, using webkit's rendering data structures. If webkit's rendering tree is completely unchanged, then the page scrolls, all the rasterization requests that go to the main thread are easily satisifed by webkit.</span></b></b></h2><h2 dir="ltr"><a name="TOC-However-any-time-javascript-changes-the-rendering-tree-we-have-the-following-problem:-we-have-some-newly-exposed-tiles-that-the-compositor-thread-needs-to-prevent-checkerboarding.-But-annoyingly-any-of-the-previously-painted-tiles-that-webkit-says-were-inv"></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">However, any time javascript changes the rendering tree, we have the following problem: we have some "newly exposed tiles" that the compositor thread needs to prevent checkerboarding. But, annoyingly, any of the previously-painted tiles that webkit says were invalidated. We can only paint the new rendering tree -- the old rendering tree is gone. So, we have two options at this point:</span></b></b></h2><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">1. Draw the new tiles with the new rendering tree, and redraw the old tiles with the new rendering tree</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">2. Draw only the new tiles, and let the old tiles stick around.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">#2 doesn't work well at all, of course: if you have a page that toggles between green and blue constantly, what you'd see is a random mix of green and blue page at any given moment. We want to preserve the "atomicity of rendering"  --- meaning that the complete state of a web page at rAF time is what gets put on the screen.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">There is a variant on 2 where we draw the new tiles, as well as any old tiles that are *onscreen*. If a tile is offscreen, then we make a note that is is invalid, but dont repaint it. In the green-blue scenario, this causes the screen to be green or blue, but never both<u>, as long as you dont scroll</u>. We ship this on Chrome Android m18. Even so, this is undesirable: if you scroll, you'll see a mix of content. This is expedient performance wise, but makes us all feel dirty.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><h2 dir="ltr"><a name="TOC-Our-other-source-of-heavy-checkerboarding-is-latency-related.-The-work-we-do-on-the-main-thread-is-based-on-as-scroll-position-update-message-that-comes-from-the-impl-thread.-This-message-is-itself-not-very-latent-arriving-on-the-main-thread-milliseconds-a"></a><font face="Arial"><span style="font-size:15px;font-weight:normal;white-space:pre-wrap">Our other source of heavy checkerboarding is latency related. The work we do on  the main thread is based on as scroll position update message that comes from the impl thread. This message is itself not very latent, arriving on the main thread milliseconds after it is sent. However, paints for a new set of tiles can take 300ms + to complete, even with the relaxed atomicity approach described above. By the time we have painted all 300ms worth of work, the page has scrolled way past the original scroll position, and half of the tiles we worked hard to prepare are irrelevant. We have discussed a variety of solutions here, but the real core problem is that the main thread cannot be updated fast enough with the new scroll positions to really ever keep up properly.</span></font></h2><div><font face="Arial"><span style="font-size:15px;font-weight:normal;white-space:pre-wrap"><br /></span></font></div><h3 dir="ltr"><a name="TOC-Planned-Solution"></a><span style="font-family:Arial;font-size:16px;font-weight:bold;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Planned Solution</span></h3><h3 dir="ltr"><a name="TOC-Display-lists.-Namely-SkPictures-modified-a-bit-to-support-partial-updating.-We-call-this-a-Picture-pile-a-name-borrowed-from-the-awesome-folks-behind-Android-Browser.-The-idea-is-to-only-capture-a-display-list-of-the-webkit-rendering-tree-on-the-main-thre"></a><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap;font-weight:normal">Display lists. Namely, SkPictures, modified a bit to support partial updating. We call this a Picture pile, a name borrowed from the awesome folks behind Android Browser. </span><span style="background-color:transparent;font-family:Arial;font-size:15px;font-weight:normal;white-space:pre-wrap">The idea is to only capture a display list of the webkit rendering tree on the main thread. Then, do rasterization on the impl thread, which is much more responsive.</span></h3><h3 dir="ltr"><a name="TOC-On-main-thread-web-content-is-turned-into-PictureLayers.-Picture-layers-make-a-recording-of-the-layer-into-a-PicturePile.-We-track-invalidations-in-SkRegions-and-during-the-display-list-capture-process-decide-between-re-capturing-the-entire-layer-or-just-g"></a><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap;font-weight:normal">On main thread, web content is turned into PictureLayers. </span><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Picture layers make a recording of the layer into a PicturePile. We track invalidations in SkRegions and during the display list capture process, decide between re-capturing the entire layer or just grabbing the invalidated area and drawing it on-top of the previously recorded base layer.</span></b></b></h3><h2 dir="ltr"><a name="TOC-During-commit-we-pass-these-PicturePiles-to-a-PictureLayerImpl.-Recall-layers-can-change-in-scale-over-time-under-animation-pinch-zoom-etc.-To-handle-this-a-PictureLayerImpl-manages-one-or-more-PictureLayerTiling-objects-via-a-PictureLayerTilingSet-which-i"></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">During commit, we pass these PicturePiles to a PictureLayerImpl. </span></b></b><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Recall, layers can change in scale over time, under animation, pinch zoom, etc. To handle this, a PictureLayerImpl manages </span></b></b><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">one or more PictureLayerTiling objects (via a PictureLayerTilingSet), which is a decomposition of the layer's entire contents into tiles at a picture screenspace resolution. So for example, a 512x512 layer might have a tiling into 4 256x256 tiles for a 1:1 ratio of screenspace pixels to content pixels, but also 1 256x256 tile for a 1:2 ratio of screenspace to conten space. We manage these tilings dyanmically.</span></b></b></h2><h2 dir="ltr"><a name="TOC-A-tiling-itself-takes-the-layers-entire-size-not-just-the-visible-part-and-breaks-it-up-into-Tiles.-Each-tile-represents-a-rectangle-of-the-PicturePile-painted-into-a-Resource-ID-think-GL-texture-at-a-given-resolution-and-quality-setting."></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">A tiling itself takes the layers entire size, not just the visible part, and breaks it up into Tiles. Each tile represents a rectangle of the PicturePile painted into a Resource ID [think, GL texture], at a given resolution and quality setting.</span></b></b></h2><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Every tile is given a set of TilePriority values by the PictureLayerImpl based on its screen space position, animation and scroll velocity, and picture contents. These different priorities encode how soon, in time units, the tile could be visually useful onscreen. Key metrics are things like "how soon will it be visible" and "how soon will it be crisp" and "is this a tile we'd use if a crisp one wasn't available?"</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">These Tiles are registered to the </span></b></b><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">TileManager, which keeps these tiles sorted based on their priority and some global priority states. Tiles are binned in orders of urgency (needed now, needed in the next second, needed eventually, never going to be needed) and then sorted within their bin. The total GPU Memory budget is then assigned in decreasing priority order to these tiles. Tiles that are given permission to use memory are then added to a rasterization queue if needed.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">The raster thread scheduler is a very simple solution: on the impl thread, we simply pop from the raster queue, dispatch the raster task. We keep a certain number of jobs enqueued per thread, opting to not enqueue them all so that if the prioritization changes much in the future, we wont do redundant work.</span></b></b></div><div><br /></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">JPEG/PNG/etc bitmaps are stored in the display lists in still-encoded form to keep display list recording cost low and memory footprint small. Thus, the first time we draw a bitmap, a costly decode and downsample operation may be needed. </span></b></b><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Thus, before dispatch, tiles are "cracked open" to determine whether any bitmaps need to be decompressed, using the SkLazyPixelRef interface to WebCore's ImageDecodingStore. If decoding is needed, the tile is held in a side queue while a decoding task is dispatched to the raster threads. When the decodes are done, raster tasks are enqueued.</span></b></b></div><h2 dir="ltr"><a name="TOC-This-approach-fixes-the-atomicity-of-commits-problem-by-allowing-us-to-servie-checkerboard-misses-without-havin-to-go-to-the-laggy-potentially-changed-main-thread.-In-the-previous-example-when-the-compositor-sees-a-checkerboarded-tile-we-can-rasterize-it-w"></a><b style="font-weight:normal"><h3 dir="ltr"><a name="TOC-This-approach-fixes-the-atomicity-of-commits-problem-by-allowing-us-to-servie-checkerboard-misses-without-havin-to-go-to-the-laggy-potentially-changed-main-thread.-In-the-previous-example-when-the-compositor-sees-a-checkerboarded-tile-we-can-rasterize-it-w1"></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">This approach fixes the “atomicity of commits” problem by allowing us to servie checkerboard misses without havin to go to the laggy, potentially changed main thread. In the previous example, when the compositor sees a checkerboarded tile, we can rasterize it without having to start a commit flow, allowing us to disallow commits entirely during flings and other heavy animation use cases.</span></b></b></h3></b></h2><h2 dir="ltr"><a name="TOC-Hitch-free-commitsA-key-challenge-with-this-approach-is-switching-from-the-old-tree-to-the-new-tree.-In-the-existing-architecture-when-we-go-to-switch-to-the-new-tree-we-have-painted-and-uploaded-all-the-tiles-so-the-tree-can-be-immediately-switched.In-the"></a><b style="font-weight:normal"><b style="font-weight:normal"><h3 dir="ltr"><a name="TOC-Hitch-free-commitsA-key-challenge-with-this-approach-is-switching-from-the-old-tree-to-the-new-tree.-In-the-existing-architecture-when-we-go-to-switch-to-the-new-tree-we-have-painted-and-uploaded-all-the-tiles-so-the-tree-can-be-immediately-switched.In-the1"></a><span style="background-color:transparent;vertical-align:baseline"><h2 dir="ltr"><a name="TOC-Hitch-free-commitsA-key-challenge-with-this-approach-is-switching-from-the-old-tree-to-the-new-tree.-In-the-existing-architecture-when-we-go-to-switch-to-the-new-tree-we-have-painted-and-uploaded-all-the-tiles-so-the-tree-can-be-immediately-switched.In-the2"></a><b style="font-weight:normal"><h3 dir="ltr" style="color:rgb(0,0,0);font-family:Times New Roman;font-size:medium;white-space:normal"><a name="TOC-Hitch-free-commits"></a><span style="font-size:16px;font-family:Arial;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Hitch-free commits</span></h3></b><b style="font-size:20px;font-weight:normal"><h3 dir="ltr"><a name="TOC-A-key-challenge-with-this-approach-is-switching-from-the-old-tree-to-the-new-tree.-In-the-existing-architecture-when-we-go-to-switch-to-the-new-tree-we-have-painted-and-uploaded-all-the-tiles-so-the-tree-can-be-immediately-switched."></a><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">A key challenge with this approach is switching from the old tree to the new tree. In the existing architecture, when we go to switch to the new tree, we have painted and uploaded all the tiles, so the tree can be immediately switched.</span></b></b></h3><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">In the impl-side painting architecture, we need to create PictureLayerImpl's in order to begin rasterizing them. Moreover, those impls need to be attached together to the LayerTreeHostImpl in order to get their screenspace positions, which are essential in computing their priorities.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">The obvious way to do this is to simply commit the main tree to the impl tree like we usually do. However, if we do that, then the impl tree now has holes in it where there were invalidations. At this point, the impl-side has two options when vsync comes around: checkerboard, or drop the frame. Neither is very cool.</span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-family:Times New Roman;font-size:medium;font-weight:normal"><b style="font-weight:normal"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Our solution is the LayerTreeImpl. Whereas the previous architecture's LayerTreeHostImpl had a root layer and all its associated state, we instead introduce LayerTreeImpl, which has all the state associated with a layer tree: scrolling info, viewport, background color, etc. The LTHI then stores not one, but two LayerTreeImpl's: the active tree is the one we are drawing, while the pending tree is the one we are rasterizing. Priority is given to the active tree, but once the pending tree is fully painted, we activate it and throw away the old one. This allows us to switch between old and new trees without janking.</span></b></b></div></b></h2></span></h3><h3 dir="ltr" style="font-family:Times New Roman;font-size:medium"><a name="TOC-Handling-Giant-SkPictures"></a><span style="font-size:16px;font-family:Arial;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Handling Giant SkPictures</span></h3><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">One potential challenge to impl-side painting compared to our existing painting model is that the SkPicture for a given layer are potentially unbounded. We plan to mitigate this by limiting the PicturePile's size to a 10,000px (emperically determined) </span><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">portion of the total layer size cenetered around the viewport at the time of the picture pile's first creation. When the impl thread starts needing tiles outside the pile's area, we will asynchronously trigger the main thread to go update the pile around the new viewport center.</span></b></b></h2><div><b style="font-size:10pt;font-weight:normal"><b style="font-weight:normal"><h3 dir="ltr" style="display:inline!important"><a name="TOC-Choosing-the-scale-at-which-to-raster"></a><font color="#666666" face="Arial"><span style="white-space:pre-wrap">Choosing the scale at which to raster</span></font></h3></b></b></div><div><br /></div><div><font face="Arial"><span style="font-size:15px;white-space:pre-wrap">Whenever we compute the draw properties for a PictureLayerImpl, we also decide what tilings it should have, or in other words, at what scales it should have sets of tiles. To do this we track two scale values: The ideal scale, and the raster scale. The ideal scale is the scale at which we should create tiles to give the texels in the tile a 1:1 correspondence with pixels on the screen. The raster scale is the high-resolution scale at which we are currently creating tiles. When we set the raster scale to be equal to the ideal scale, we get crisp tiles. This is what we'd like to have at all times, but we limit this for performance reasons. During a pinch gesture, or an accelerated animation, the raster scale lags behind the ideal scale. CSS can change the scale of a layer through the DOM, and we limit how often it is allowed to change the raster scale. This decision to reset the raster scale to the ideal or leave it alone is made in PictureLayerImpl::ManageTilings. Whenever the raster scale changes, we add a tiling both at the raster scale, and at a low resolution related to the raster scale. These tilings are marked as HIGH_RESOLUTION and LOW_RESOLUTION and are given priority as we raster tiles for the layer.</span></font></div><div><b style="font-weight:normal"><b style="font-weight:normal"><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><div><b style="font-size:10pt;font-weight:normal"><b style="font-weight:normal"><h3 dir="ltr" style="display:inline!important"><a name="TOC-Texture-Upload"></a><font color="#666666" face="Arial"><span style="white-space:pre-wrap">Texture Upload</span></font></h3></b></b></div><div><b style="font-weight:normal"><b style="font-weight:normal"><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">One key challenge on lowend devcies is that uploading a single 256x256 texture can take many milliseconds, sometimes as crazy as 3-5ms. Because of this, we have to carefully throttle our texture uploads so that we dont drop a frame. To do this, we are adopting a new approach of async texture uploads. Instad of issuing standard glTexImage calls, we instead place textures into shared memory and then instruct the GPU process to do the upload when-convenient. This enables the GPU process to do the upload during idle times, or even on another thread. The compositor then polls the GPU process via the query infrastructure to determine  if the upload is complete. Only when the upload is complete will we draw with it.</span></b></b></div><div><b style="font-weight:normal"><b style="font-weight:normal"><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></b></b></div><b style="font-weight:normal"><b style="font-weight:normal"><h3 dir="ltr" style="font-family:Times New Roman;font-size:medium"><a name="TOC-Handling-setPictureListener"></a><span style="font-size:16px;font-family:Arial;color:rgb(102,102,102);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Handling setPictureListener</span></h3><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">If the embedder has a picture listener, we need to send a serialized SkPicture to the embedding process. We would need to, at every impl-side swapbuffers, serialize our SkPictures for all the active layers (plus the bitmaps) and send them to the main thread.</span></b></b><div><b style="font-weight:normal"><b style="font-weight:normal"><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span><br /><span style="font-family:Arial;font-size:16px;color:rgb(102,102,102);background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">Followup Work</span><br /><br /><span style="font-family:Arial;font-size:15px;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">The initial impl-side painting implementation is expected to enable the following followup use cases:</span><br /><br /><p dir="ltr" style="font-family:Times New Roman;font-size:medium;margin-left:36pt;margin-top:0pt;margin-bottom:0pt"><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">Low-res tiles: </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">For tiles that take a long time to rasterize, we may want to rasterize them at half or third resolution. This often dramatically reduces (5-6x anecdotally) raster cost and allows us to avoid checkerboarding during fling. However, it is worth noting that some Android users criticized this behavior on ICS devices as making fonts look too ugly. High-dpi devices may change the UX impact of this behavior on users.</span></p><br /><p dir="ltr" style="font-family:Times New Roman;font-size:medium;margin-left:36pt;margin-top:0pt;margin-bottom:0pt"><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">Just-in-time scaling: </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">We currently do resizing of content at many layers in the pipeline. For example, we rasterize layers at their content resolution without consideration to their screenspace transform. Thus, a layer that is -webkit-transform: scale(0.5)’d will actually paint at its full size. Similarly, we resize images inside webkit at their content resolution. We could reduce rasterization/decode costs and memory footprint if we could do all of this scaling using the draw-time transforms on the impl thread.<br /></span></p><p dir="ltr" style="font-family:Times New Roman;font-size:medium;margin-left:36pt;margin-top:0pt;margin-bottom:0pt"><br /></p><p dir="ltr" style="font-family:Times New Roman;font-size:medium;margin-left:36pt;margin-top:0pt;margin-bottom:0pt"><span style="font-size:15px;font-family:Arial;background-color:transparent;font-weight:bold;vertical-align:baseline;white-space:pre-wrap">Accelerated painting: </span><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap">An interesting property of impl-side painting is that it cleans up our accelerated painting story. We would store the SkPicture for a layer, and then can decide to rasterize a layer with the GPU without having to involve the main thread at all in the process.</span></p><div style="font-family:Times New Roman;font-size:medium"><span style="font-size:15px;font-family:Arial;background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><br /></span></div></b></b></div></div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">Comments</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/a/chromium.org/dev/developers/design-documents/impl-side-painting">Sign in</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/recentChanges">Recent Site Activity</a><span aria-hidden="true">|</span><a class="sites-system-link" href="/system/app/pages/reportAbuse" target="_blank">Report Abuse</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a><span aria-hidden="true">|</span><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="https://ssl.gstatic.com/sites/p/56e332/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
      
          sites.core.Analytics.createTracker();
          sites.core.Analytics.trackPageview();
        
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"Configure search options...","url":"/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("7648876402527094", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_7648876402527094');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("14720868319272995", "Quick links", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_14720868319272995');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("19690813310444355", "Other sites", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_19690813310444355');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXukca4jaDOG9SuQz_G8t7HlGZb5ZfL_BJuKX3LIv8zwDqsnACMueHe7-uYXRDmz_xTELbjjlSWh7olJqhom4SVCGxIksIgdSi8dzVtkqsn_5Rr8zHkekBE8ojXk2Z6OVd2RyD5v/api/js?anon=true',
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://www.chromium.org/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupPostRenderingManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>
</body>
</html>
